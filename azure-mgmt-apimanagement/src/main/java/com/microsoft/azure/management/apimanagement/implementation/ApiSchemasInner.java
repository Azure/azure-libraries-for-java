/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.apimanagement.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.apimanagement.ErrorResponseException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.HEAD;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ApiSchemas.
 */
public class ApiSchemasInner {
    /** The Retrofit service to perform REST calls. */
    private ApiSchemasService service;
    /** The service client containing this operation class. */
    private ApiManagementClientImpl client;

    /**
     * Initializes an instance of ApiSchemasInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ApiSchemasInner(Retrofit retrofit, ApiManagementClientImpl client) {
        this.service = retrofit.create(ApiSchemasService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ApiSchemas to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ApiSchemasService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.ApiSchemas listByApi" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/schemas")
        Observable<Response<ResponseBody>> listByApi(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("apiId") String apiId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.ApiSchemas getEntityTag" })
        @HEAD("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/schemas/{schemaId}")
        Observable<Response<Void>> getEntityTag(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("apiId") String apiId, @Path("schemaId") String schemaId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.ApiSchemas get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/schemas/{schemaId}")
        Observable<Response<ResponseBody>> get(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("apiId") String apiId, @Path("schemaId") String schemaId, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.ApiSchemas createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/schemas/{schemaId}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("apiId") String apiId, @Path("schemaId") String schemaId, @Path("subscriptionId") String subscriptionId, @Body SchemaContractInner parameters, @Header("If-Match") String ifMatch, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.ApiSchemas delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/apis/{apiId}/schemas/{schemaId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("apiId") String apiId, @Path("schemaId") String schemaId, @Path("subscriptionId") String subscriptionId, @Header("If-Match") String ifMatch, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.ApiSchemas listByApiNext" })
        @GET
        Observable<Response<ResponseBody>> listByApiNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get the schema configuration at the API level.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;SchemaContractInner&gt; object if successful.
     */
    public PagedList<SchemaContractInner> listByApi(final String resourceGroupName, final String serviceName, final String apiId) {
        ServiceResponseWithHeaders<Page<SchemaContractInner>, ApiSchemaListByApiHeadersInner> response = listByApiSinglePageAsync(resourceGroupName, serviceName, apiId).toBlocking().single();
        return new PagedList<SchemaContractInner>(response.body()) {
            @Override
            public Page<SchemaContractInner> nextPage(String nextPageLink) {
                return listByApiNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get the schema configuration at the API level.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SchemaContractInner>> listByApiAsync(final String resourceGroupName, final String serviceName, final String apiId, final ListOperationCallback<SchemaContractInner> serviceCallback) {
        return AzureServiceFuture.fromHeaderPageResponse(
            listByApiSinglePageAsync(resourceGroupName, serviceName, apiId),
            new Func1<String, Observable<ServiceResponseWithHeaders<Page<SchemaContractInner>, ApiSchemaListByApiHeadersInner>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Page<SchemaContractInner>, ApiSchemaListByApiHeadersInner>> call(String nextPageLink) {
                    return listByApiNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get the schema configuration at the API level.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SchemaContractInner&gt; object
     */
    public Observable<Page<SchemaContractInner>> listByApiAsync(final String resourceGroupName, final String serviceName, final String apiId) {
        return listByApiWithServiceResponseAsync(resourceGroupName, serviceName, apiId)
            .map(new Func1<ServiceResponseWithHeaders<Page<SchemaContractInner>, ApiSchemaListByApiHeadersInner>, Page<SchemaContractInner>>() {
                @Override
                public Page<SchemaContractInner> call(ServiceResponseWithHeaders<Page<SchemaContractInner>, ApiSchemaListByApiHeadersInner> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get the schema configuration at the API level.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SchemaContractInner&gt; object
     */
    public Observable<ServiceResponseWithHeaders<Page<SchemaContractInner>, ApiSchemaListByApiHeadersInner>> listByApiWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final String apiId) {
        return listByApiSinglePageAsync(resourceGroupName, serviceName, apiId)
            .concatMap(new Func1<ServiceResponseWithHeaders<Page<SchemaContractInner>, ApiSchemaListByApiHeadersInner>, Observable<ServiceResponseWithHeaders<Page<SchemaContractInner>, ApiSchemaListByApiHeadersInner>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Page<SchemaContractInner>, ApiSchemaListByApiHeadersInner>> call(ServiceResponseWithHeaders<Page<SchemaContractInner>, ApiSchemaListByApiHeadersInner> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByApiNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get the schema configuration at the API level.
     *
    ServiceResponseWithHeaders<PageImpl<SchemaContractInner>, ApiSchemaListByApiHeadersInner> * @param resourceGroupName The name of the resource group.
    ServiceResponseWithHeaders<PageImpl<SchemaContractInner>, ApiSchemaListByApiHeadersInner> * @param serviceName The name of the API Management service.
    ServiceResponseWithHeaders<PageImpl<SchemaContractInner>, ApiSchemaListByApiHeadersInner> * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;SchemaContractInner&gt; object wrapped in {@link ServiceResponseWithHeaders} if successful.
     */
    public Observable<ServiceResponseWithHeaders<Page<SchemaContractInner>, ApiSchemaListByApiHeadersInner>> listByApiSinglePageAsync(final String resourceGroupName, final String serviceName, final String apiId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByApi(resourceGroupName, serviceName, apiId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Page<SchemaContractInner>, ApiSchemaListByApiHeadersInner>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Page<SchemaContractInner>, ApiSchemaListByApiHeadersInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<PageImpl<SchemaContractInner>, ApiSchemaListByApiHeadersInner> result = listByApiDelegate(response);
                        return Observable.just(new ServiceResponseWithHeaders<Page<SchemaContractInner>, ApiSchemaListByApiHeadersInner>(result.body(), result.headers(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<PageImpl<SchemaContractInner>, ApiSchemaListByApiHeadersInner> listByApiDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<SchemaContractInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<SchemaContractInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, ApiSchemaListByApiHeadersInner.class);
    }

    /**
     * Gets the entity state (Etag) version of the schema specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param schemaId Schema identifier within an API. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void getEntityTag(String resourceGroupName, String serviceName, String apiId, String schemaId) {
        getEntityTagWithServiceResponseAsync(resourceGroupName, serviceName, apiId, schemaId).toBlocking().single().body();
    }

    /**
     * Gets the entity state (Etag) version of the schema specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param schemaId Schema identifier within an API. Must be unique in the current API Management service instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> getEntityTagAsync(String resourceGroupName, String serviceName, String apiId, String schemaId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(getEntityTagWithServiceResponseAsync(resourceGroupName, serviceName, apiId, schemaId), serviceCallback);
    }

    /**
     * Gets the entity state (Etag) version of the schema specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param schemaId Schema identifier within an API. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<Void> getEntityTagAsync(String resourceGroupName, String serviceName, String apiId, String schemaId) {
        return getEntityTagWithServiceResponseAsync(resourceGroupName, serviceName, apiId, schemaId).map(new Func1<ServiceResponseWithHeaders<Void, ApiSchemaGetEntityTagHeadersInner>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, ApiSchemaGetEntityTagHeadersInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the entity state (Etag) version of the schema specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param schemaId Schema identifier within an API. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<ServiceResponseWithHeaders<Void, ApiSchemaGetEntityTagHeadersInner>> getEntityTagWithServiceResponseAsync(String resourceGroupName, String serviceName, String apiId, String schemaId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (schemaId == null) {
            throw new IllegalArgumentException("Parameter schemaId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getEntityTag(resourceGroupName, serviceName, apiId, schemaId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<Void>, Observable<ServiceResponseWithHeaders<Void, ApiSchemaGetEntityTagHeadersInner>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Void, ApiSchemaGetEntityTagHeadersInner>> call(Response<Void> response) {
                    try {
                        ServiceResponseWithHeaders<Void, ApiSchemaGetEntityTagHeadersInner> clientResponse = getEntityTagDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<Void, ApiSchemaGetEntityTagHeadersInner> getEntityTagDelegate(Response<Void> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildEmptyWithHeaders(response, ApiSchemaGetEntityTagHeadersInner.class);
    }

    /**
     * Get the schema configuration at the API level.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param schemaId Schema identifier within an API. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SchemaContractInner object if successful.
     */
    public SchemaContractInner get(String resourceGroupName, String serviceName, String apiId, String schemaId) {
        return getWithServiceResponseAsync(resourceGroupName, serviceName, apiId, schemaId).toBlocking().single().body();
    }

    /**
     * Get the schema configuration at the API level.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param schemaId Schema identifier within an API. Must be unique in the current API Management service instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SchemaContractInner> getAsync(String resourceGroupName, String serviceName, String apiId, String schemaId, final ServiceCallback<SchemaContractInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(getWithServiceResponseAsync(resourceGroupName, serviceName, apiId, schemaId), serviceCallback);
    }

    /**
     * Get the schema configuration at the API level.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param schemaId Schema identifier within an API. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SchemaContractInner object
     */
    public Observable<SchemaContractInner> getAsync(String resourceGroupName, String serviceName, String apiId, String schemaId) {
        return getWithServiceResponseAsync(resourceGroupName, serviceName, apiId, schemaId).map(new Func1<ServiceResponseWithHeaders<SchemaContractInner, ApiSchemaGetHeadersInner>, SchemaContractInner>() {
            @Override
            public SchemaContractInner call(ServiceResponseWithHeaders<SchemaContractInner, ApiSchemaGetHeadersInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get the schema configuration at the API level.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param schemaId Schema identifier within an API. Must be unique in the current API Management service instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SchemaContractInner object
     */
    public Observable<ServiceResponseWithHeaders<SchemaContractInner, ApiSchemaGetHeadersInner>> getWithServiceResponseAsync(String resourceGroupName, String serviceName, String apiId, String schemaId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (schemaId == null) {
            throw new IllegalArgumentException("Parameter schemaId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(resourceGroupName, serviceName, apiId, schemaId, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<SchemaContractInner, ApiSchemaGetHeadersInner>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<SchemaContractInner, ApiSchemaGetHeadersInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<SchemaContractInner, ApiSchemaGetHeadersInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<SchemaContractInner, ApiSchemaGetHeadersInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SchemaContractInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SchemaContractInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, ApiSchemaGetHeadersInner.class);
    }

    /**
     * Creates or updates schema configuration for the API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param schemaId Schema identifier within an API. Must be unique in the current API Management service instance.
     * @param parameters The schema contents to apply.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SchemaContractInner object if successful.
     */
    public SchemaContractInner createOrUpdate(String resourceGroupName, String serviceName, String apiId, String schemaId, SchemaContractInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, apiId, schemaId, parameters).toBlocking().single().body();
    }

    /**
     * Creates or updates schema configuration for the API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param schemaId Schema identifier within an API. Must be unique in the current API Management service instance.
     * @param parameters The schema contents to apply.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SchemaContractInner> createOrUpdateAsync(String resourceGroupName, String serviceName, String apiId, String schemaId, SchemaContractInner parameters, final ServiceCallback<SchemaContractInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, apiId, schemaId, parameters), serviceCallback);
    }

    /**
     * Creates or updates schema configuration for the API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param schemaId Schema identifier within an API. Must be unique in the current API Management service instance.
     * @param parameters The schema contents to apply.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SchemaContractInner object
     */
    public Observable<SchemaContractInner> createOrUpdateAsync(String resourceGroupName, String serviceName, String apiId, String schemaId, SchemaContractInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, apiId, schemaId, parameters).map(new Func1<ServiceResponse<SchemaContractInner>, SchemaContractInner>() {
            @Override
            public SchemaContractInner call(ServiceResponse<SchemaContractInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates schema configuration for the API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param schemaId Schema identifier within an API. Must be unique in the current API Management service instance.
     * @param parameters The schema contents to apply.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SchemaContractInner object
     */
    public Observable<ServiceResponse<SchemaContractInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String serviceName, String apiId, String schemaId, SchemaContractInner parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (schemaId == null) {
            throw new IllegalArgumentException("Parameter schemaId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String ifMatch = null;
        return service.createOrUpdate(resourceGroupName, serviceName, apiId, schemaId, this.client.subscriptionId(), parameters, ifMatch, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SchemaContractInner>>>() {
                @Override
                public Observable<ServiceResponse<SchemaContractInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SchemaContractInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates or updates schema configuration for the API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param schemaId Schema identifier within an API. Must be unique in the current API Management service instance.
     * @param parameters The schema contents to apply.
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SchemaContractInner object if successful.
     */
    public SchemaContractInner createOrUpdate(String resourceGroupName, String serviceName, String apiId, String schemaId, SchemaContractInner parameters, String ifMatch) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, apiId, schemaId, parameters, ifMatch).toBlocking().single().body();
    }

    /**
     * Creates or updates schema configuration for the API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param schemaId Schema identifier within an API. Must be unique in the current API Management service instance.
     * @param parameters The schema contents to apply.
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SchemaContractInner> createOrUpdateAsync(String resourceGroupName, String serviceName, String apiId, String schemaId, SchemaContractInner parameters, String ifMatch, final ServiceCallback<SchemaContractInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, apiId, schemaId, parameters, ifMatch), serviceCallback);
    }

    /**
     * Creates or updates schema configuration for the API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param schemaId Schema identifier within an API. Must be unique in the current API Management service instance.
     * @param parameters The schema contents to apply.
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SchemaContractInner object
     */
    public Observable<SchemaContractInner> createOrUpdateAsync(String resourceGroupName, String serviceName, String apiId, String schemaId, SchemaContractInner parameters, String ifMatch) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, apiId, schemaId, parameters, ifMatch).map(new Func1<ServiceResponse<SchemaContractInner>, SchemaContractInner>() {
            @Override
            public SchemaContractInner call(ServiceResponse<SchemaContractInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates schema configuration for the API.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param schemaId Schema identifier within an API. Must be unique in the current API Management service instance.
     * @param parameters The schema contents to apply.
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SchemaContractInner object
     */
    public Observable<ServiceResponse<SchemaContractInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String serviceName, String apiId, String schemaId, SchemaContractInner parameters, String ifMatch) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (schemaId == null) {
            throw new IllegalArgumentException("Parameter schemaId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.createOrUpdate(resourceGroupName, serviceName, apiId, schemaId, this.client.subscriptionId(), parameters, ifMatch, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SchemaContractInner>>>() {
                @Override
                public Observable<ServiceResponse<SchemaContractInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SchemaContractInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SchemaContractInner> createOrUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SchemaContractInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SchemaContractInner>() { }.getType())
                .register(201, new TypeToken<SchemaContractInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Deletes the schema configuration at the Api.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param schemaId Schema identifier within an API. Must be unique in the current API Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String serviceName, String apiId, String schemaId, String ifMatch) {
        deleteWithServiceResponseAsync(resourceGroupName, serviceName, apiId, schemaId, ifMatch).toBlocking().single().body();
    }

    /**
     * Deletes the schema configuration at the Api.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param schemaId Schema identifier within an API. Must be unique in the current API Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String serviceName, String apiId, String schemaId, String ifMatch, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, serviceName, apiId, schemaId, ifMatch), serviceCallback);
    }

    /**
     * Deletes the schema configuration at the Api.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param schemaId Schema identifier within an API. Must be unique in the current API Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String serviceName, String apiId, String schemaId, String ifMatch) {
        return deleteWithServiceResponseAsync(resourceGroupName, serviceName, apiId, schemaId, ifMatch).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the schema configuration at the Api.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param apiId API revision identifier. Must be unique in the current API Management service instance. Non-current revision has ;rev=n as a suffix where n is the revision number.
     * @param schemaId Schema identifier within an API. Must be unique in the current API Management service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String serviceName, String apiId, String schemaId, String ifMatch) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (apiId == null) {
            throw new IllegalArgumentException("Parameter apiId is required and cannot be null.");
        }
        if (schemaId == null) {
            throw new IllegalArgumentException("Parameter schemaId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (ifMatch == null) {
            throw new IllegalArgumentException("Parameter ifMatch is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(resourceGroupName, serviceName, apiId, schemaId, this.client.subscriptionId(), ifMatch, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get the schema configuration at the API level.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;SchemaContractInner&gt; object if successful.
     */
    public PagedList<SchemaContractInner> listByApiNext(final String nextPageLink) {
        ServiceResponseWithHeaders<Page<SchemaContractInner>, ApiSchemaListByApiHeadersInner> response = listByApiNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<SchemaContractInner>(response.body()) {
            @Override
            public Page<SchemaContractInner> nextPage(String nextPageLink) {
                return listByApiNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Get the schema configuration at the API level.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SchemaContractInner>> listByApiNextAsync(final String nextPageLink, final ServiceFuture<List<SchemaContractInner>> serviceFuture, final ListOperationCallback<SchemaContractInner> serviceCallback) {
        return AzureServiceFuture.fromHeaderPageResponse(
            listByApiNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponseWithHeaders<Page<SchemaContractInner>, ApiSchemaListByApiHeadersInner>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Page<SchemaContractInner>, ApiSchemaListByApiHeadersInner>> call(String nextPageLink) {
                    return listByApiNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get the schema configuration at the API level.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SchemaContractInner&gt; object
     */
    public Observable<Page<SchemaContractInner>> listByApiNextAsync(final String nextPageLink) {
        return listByApiNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponseWithHeaders<Page<SchemaContractInner>, ApiSchemaListByApiHeadersInner>, Page<SchemaContractInner>>() {
                @Override
                public Page<SchemaContractInner> call(ServiceResponseWithHeaders<Page<SchemaContractInner>, ApiSchemaListByApiHeadersInner> response) {
                    return response.body();
                }
            });
    }

    /**
     * Get the schema configuration at the API level.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;SchemaContractInner&gt; object
     */
    public Observable<ServiceResponseWithHeaders<Page<SchemaContractInner>, ApiSchemaListByApiHeadersInner>> listByApiNextWithServiceResponseAsync(final String nextPageLink) {
        return listByApiNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponseWithHeaders<Page<SchemaContractInner>, ApiSchemaListByApiHeadersInner>, Observable<ServiceResponseWithHeaders<Page<SchemaContractInner>, ApiSchemaListByApiHeadersInner>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Page<SchemaContractInner>, ApiSchemaListByApiHeadersInner>> call(ServiceResponseWithHeaders<Page<SchemaContractInner>, ApiSchemaListByApiHeadersInner> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByApiNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get the schema configuration at the API level.
     *
    ServiceResponseWithHeaders<PageImpl<SchemaContractInner>, ApiSchemaListByApiHeadersInner> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;SchemaContractInner&gt; object wrapped in {@link ServiceResponseWithHeaders} if successful.
     */
    public Observable<ServiceResponseWithHeaders<Page<SchemaContractInner>, ApiSchemaListByApiHeadersInner>> listByApiNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByApiNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Page<SchemaContractInner>, ApiSchemaListByApiHeadersInner>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Page<SchemaContractInner>, ApiSchemaListByApiHeadersInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<PageImpl<SchemaContractInner>, ApiSchemaListByApiHeadersInner> result = listByApiNextDelegate(response);
                        return Observable.just(new ServiceResponseWithHeaders<Page<SchemaContractInner>, ApiSchemaListByApiHeadersInner>(result.body(), result.headers(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<PageImpl<SchemaContractInner>, ApiSchemaListByApiHeadersInner> listByApiNextDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<SchemaContractInner>, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<SchemaContractInner>>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, ApiSchemaListByApiHeadersInner.class);
    }

}
