/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.apimanagement.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.apimanagement.ErrorResponseException;
import com.microsoft.azure.management.apimanagement.TemplateName;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.HEAD;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in EmailTemplates.
 */
public class EmailTemplatesInner {
    /** The Retrofit service to perform REST calls. */
    private EmailTemplatesService service;
    /** The service client containing this operation class. */
    private ApiManagementClientImpl client;

    /**
     * Initializes an instance of EmailTemplatesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public EmailTemplatesInner(Retrofit retrofit, ApiManagementClientImpl client) {
        this.service = retrofit.create(EmailTemplatesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for EmailTemplates to be
     * used by Retrofit to perform actually REST calls.
     */
    interface EmailTemplatesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.EmailTemplates listByService" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/templates")
        Observable<Response<ResponseBody>> listByService(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("subscriptionId") String subscriptionId, @Query("$top") Integer top, @Query("$skip") Integer skip, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.EmailTemplates getEntityTag" })
        @HEAD("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/templates/{templateName}")
        Observable<Response<Void>> getEntityTag(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("templateName") TemplateName templateName1, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.EmailTemplates get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/templates/{templateName}")
        Observable<Response<ResponseBody>> get(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("templateName") TemplateName templateName1, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.EmailTemplates createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/templates/{templateName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("templateName") TemplateName templateName1, @Path("subscriptionId") String subscriptionId, @Body EmailTemplateUpdateParametersInner parameters, @Header("If-Match") String ifMatch, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.EmailTemplates update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/templates/{templateName}")
        Observable<Response<ResponseBody>> update(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("templateName") TemplateName templateName1, @Path("subscriptionId") String subscriptionId, @Body EmailTemplateUpdateParametersInner parameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.EmailTemplates delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/templates/{templateName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("serviceName") String serviceName, @Path("templateName") TemplateName templateName1, @Path("subscriptionId") String subscriptionId, @Header("If-Match") String ifMatch, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.apimanagement.EmailTemplates listByServiceNext" })
        @GET
        Observable<Response<ResponseBody>> listByServiceNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists a collection of properties defined within a service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;EmailTemplateContractInner&gt; object if successful.
     */
    public PagedList<EmailTemplateContractInner> listByService(final String resourceGroupName, final String serviceName) {
        ServiceResponse<Page<EmailTemplateContractInner>> response = listByServiceSinglePageAsync(resourceGroupName, serviceName).toBlocking().single();
        return new PagedList<EmailTemplateContractInner>(response.body()) {
            @Override
            public Page<EmailTemplateContractInner> nextPage(String nextPageLink) {
                return listByServiceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists a collection of properties defined within a service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EmailTemplateContractInner>> listByServiceAsync(final String resourceGroupName, final String serviceName, final ListOperationCallback<EmailTemplateContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByServiceSinglePageAsync(resourceGroupName, serviceName),
            new Func1<String, Observable<ServiceResponse<Page<EmailTemplateContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EmailTemplateContractInner>>> call(String nextPageLink) {
                    return listByServiceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists a collection of properties defined within a service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EmailTemplateContractInner&gt; object
     */
    public Observable<Page<EmailTemplateContractInner>> listByServiceAsync(final String resourceGroupName, final String serviceName) {
        return listByServiceWithServiceResponseAsync(resourceGroupName, serviceName)
            .map(new Func1<ServiceResponse<Page<EmailTemplateContractInner>>, Page<EmailTemplateContractInner>>() {
                @Override
                public Page<EmailTemplateContractInner> call(ServiceResponse<Page<EmailTemplateContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists a collection of properties defined within a service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EmailTemplateContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<EmailTemplateContractInner>>> listByServiceWithServiceResponseAsync(final String resourceGroupName, final String serviceName) {
        return listByServiceSinglePageAsync(resourceGroupName, serviceName)
            .concatMap(new Func1<ServiceResponse<Page<EmailTemplateContractInner>>, Observable<ServiceResponse<Page<EmailTemplateContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EmailTemplateContractInner>>> call(ServiceResponse<Page<EmailTemplateContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByServiceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists a collection of properties defined within a service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;EmailTemplateContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<EmailTemplateContractInner>>> listByServiceSinglePageAsync(final String resourceGroupName, final String serviceName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Integer top = null;
        final Integer skip = null;
        return service.listByService(resourceGroupName, serviceName, this.client.subscriptionId(), top, skip, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<EmailTemplateContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EmailTemplateContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<EmailTemplateContractInner>> result = listByServiceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<EmailTemplateContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists a collection of properties defined within a service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;EmailTemplateContractInner&gt; object if successful.
     */
    public PagedList<EmailTemplateContractInner> listByService(final String resourceGroupName, final String serviceName, final Integer top, final Integer skip) {
        ServiceResponse<Page<EmailTemplateContractInner>> response = listByServiceSinglePageAsync(resourceGroupName, serviceName, top, skip).toBlocking().single();
        return new PagedList<EmailTemplateContractInner>(response.body()) {
            @Override
            public Page<EmailTemplateContractInner> nextPage(String nextPageLink) {
                return listByServiceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists a collection of properties defined within a service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EmailTemplateContractInner>> listByServiceAsync(final String resourceGroupName, final String serviceName, final Integer top, final Integer skip, final ListOperationCallback<EmailTemplateContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByServiceSinglePageAsync(resourceGroupName, serviceName, top, skip),
            new Func1<String, Observable<ServiceResponse<Page<EmailTemplateContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EmailTemplateContractInner>>> call(String nextPageLink) {
                    return listByServiceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists a collection of properties defined within a service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EmailTemplateContractInner&gt; object
     */
    public Observable<Page<EmailTemplateContractInner>> listByServiceAsync(final String resourceGroupName, final String serviceName, final Integer top, final Integer skip) {
        return listByServiceWithServiceResponseAsync(resourceGroupName, serviceName, top, skip)
            .map(new Func1<ServiceResponse<Page<EmailTemplateContractInner>>, Page<EmailTemplateContractInner>>() {
                @Override
                public Page<EmailTemplateContractInner> call(ServiceResponse<Page<EmailTemplateContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists a collection of properties defined within a service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param top Number of records to return.
     * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EmailTemplateContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<EmailTemplateContractInner>>> listByServiceWithServiceResponseAsync(final String resourceGroupName, final String serviceName, final Integer top, final Integer skip) {
        return listByServiceSinglePageAsync(resourceGroupName, serviceName, top, skip)
            .concatMap(new Func1<ServiceResponse<Page<EmailTemplateContractInner>>, Observable<ServiceResponse<Page<EmailTemplateContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EmailTemplateContractInner>>> call(ServiceResponse<Page<EmailTemplateContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByServiceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists a collection of properties defined within a service instance.
     *
    ServiceResponse<PageImpl<EmailTemplateContractInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<EmailTemplateContractInner>> * @param serviceName The name of the API Management service.
    ServiceResponse<PageImpl<EmailTemplateContractInner>> * @param top Number of records to return.
    ServiceResponse<PageImpl<EmailTemplateContractInner>> * @param skip Number of records to skip.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;EmailTemplateContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<EmailTemplateContractInner>>> listByServiceSinglePageAsync(final String resourceGroupName, final String serviceName, final Integer top, final Integer skip) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByService(resourceGroupName, serviceName, this.client.subscriptionId(), top, skip, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<EmailTemplateContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EmailTemplateContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<EmailTemplateContractInner>> result = listByServiceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<EmailTemplateContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<EmailTemplateContractInner>> listByServiceDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<EmailTemplateContractInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<EmailTemplateContractInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the entity state (Etag) version of the email template specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier. Possible values include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper', 'quotaLimitApproachingDeveloperNotificationMessage', 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault', 'inviteUserNotificationMessage', 'newCommentNotificationMessage', 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage', 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault', 'passwordResetByAdminNotificationMessage', 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void getEntityTag(String resourceGroupName, String serviceName, TemplateName templateName) {
        getEntityTagWithServiceResponseAsync(resourceGroupName, serviceName, templateName).toBlocking().single().body();
    }

    /**
     * Gets the entity state (Etag) version of the email template specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier. Possible values include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper', 'quotaLimitApproachingDeveloperNotificationMessage', 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault', 'inviteUserNotificationMessage', 'newCommentNotificationMessage', 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage', 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault', 'passwordResetByAdminNotificationMessage', 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> getEntityTagAsync(String resourceGroupName, String serviceName, TemplateName templateName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(getEntityTagWithServiceResponseAsync(resourceGroupName, serviceName, templateName), serviceCallback);
    }

    /**
     * Gets the entity state (Etag) version of the email template specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier. Possible values include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper', 'quotaLimitApproachingDeveloperNotificationMessage', 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault', 'inviteUserNotificationMessage', 'newCommentNotificationMessage', 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage', 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault', 'passwordResetByAdminNotificationMessage', 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<Void> getEntityTagAsync(String resourceGroupName, String serviceName, TemplateName templateName) {
        return getEntityTagWithServiceResponseAsync(resourceGroupName, serviceName, templateName).map(new Func1<ServiceResponseWithHeaders<Void, EmailTemplateGetEntityTagHeadersInner>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, EmailTemplateGetEntityTagHeadersInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the entity state (Etag) version of the email template specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier. Possible values include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper', 'quotaLimitApproachingDeveloperNotificationMessage', 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault', 'inviteUserNotificationMessage', 'newCommentNotificationMessage', 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage', 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault', 'passwordResetByAdminNotificationMessage', 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<ServiceResponseWithHeaders<Void, EmailTemplateGetEntityTagHeadersInner>> getEntityTagWithServiceResponseAsync(String resourceGroupName, String serviceName, TemplateName templateName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (templateName == null) {
            throw new IllegalArgumentException("Parameter templateName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getEntityTag(resourceGroupName, serviceName, templateName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<Void>, Observable<ServiceResponseWithHeaders<Void, EmailTemplateGetEntityTagHeadersInner>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Void, EmailTemplateGetEntityTagHeadersInner>> call(Response<Void> response) {
                    try {
                        ServiceResponseWithHeaders<Void, EmailTemplateGetEntityTagHeadersInner> clientResponse = getEntityTagDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<Void, EmailTemplateGetEntityTagHeadersInner> getEntityTagDelegate(Response<Void> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildEmptyWithHeaders(response, EmailTemplateGetEntityTagHeadersInner.class);
    }

    /**
     * Gets the details of the email template specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier. Possible values include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper', 'quotaLimitApproachingDeveloperNotificationMessage', 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault', 'inviteUserNotificationMessage', 'newCommentNotificationMessage', 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage', 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault', 'passwordResetByAdminNotificationMessage', 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EmailTemplateContractInner object if successful.
     */
    public EmailTemplateContractInner get(String resourceGroupName, String serviceName, TemplateName templateName) {
        return getWithServiceResponseAsync(resourceGroupName, serviceName, templateName).toBlocking().single().body();
    }

    /**
     * Gets the details of the email template specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier. Possible values include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper', 'quotaLimitApproachingDeveloperNotificationMessage', 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault', 'inviteUserNotificationMessage', 'newCommentNotificationMessage', 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage', 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault', 'passwordResetByAdminNotificationMessage', 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EmailTemplateContractInner> getAsync(String resourceGroupName, String serviceName, TemplateName templateName, final ServiceCallback<EmailTemplateContractInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(getWithServiceResponseAsync(resourceGroupName, serviceName, templateName), serviceCallback);
    }

    /**
     * Gets the details of the email template specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier. Possible values include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper', 'quotaLimitApproachingDeveloperNotificationMessage', 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault', 'inviteUserNotificationMessage', 'newCommentNotificationMessage', 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage', 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault', 'passwordResetByAdminNotificationMessage', 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EmailTemplateContractInner object
     */
    public Observable<EmailTemplateContractInner> getAsync(String resourceGroupName, String serviceName, TemplateName templateName) {
        return getWithServiceResponseAsync(resourceGroupName, serviceName, templateName).map(new Func1<ServiceResponseWithHeaders<EmailTemplateContractInner, EmailTemplateGetHeadersInner>, EmailTemplateContractInner>() {
            @Override
            public EmailTemplateContractInner call(ServiceResponseWithHeaders<EmailTemplateContractInner, EmailTemplateGetHeadersInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the details of the email template specified by its identifier.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier. Possible values include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper', 'quotaLimitApproachingDeveloperNotificationMessage', 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault', 'inviteUserNotificationMessage', 'newCommentNotificationMessage', 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage', 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault', 'passwordResetByAdminNotificationMessage', 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EmailTemplateContractInner object
     */
    public Observable<ServiceResponseWithHeaders<EmailTemplateContractInner, EmailTemplateGetHeadersInner>> getWithServiceResponseAsync(String resourceGroupName, String serviceName, TemplateName templateName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (templateName == null) {
            throw new IllegalArgumentException("Parameter templateName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(resourceGroupName, serviceName, templateName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<EmailTemplateContractInner, EmailTemplateGetHeadersInner>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<EmailTemplateContractInner, EmailTemplateGetHeadersInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<EmailTemplateContractInner, EmailTemplateGetHeadersInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<EmailTemplateContractInner, EmailTemplateGetHeadersInner> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<EmailTemplateContractInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<EmailTemplateContractInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .buildWithHeaders(response, EmailTemplateGetHeadersInner.class);
    }

    /**
     * Updates an Email Template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier. Possible values include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper', 'quotaLimitApproachingDeveloperNotificationMessage', 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault', 'inviteUserNotificationMessage', 'newCommentNotificationMessage', 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage', 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault', 'passwordResetByAdminNotificationMessage', 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     * @param parameters Email Template update parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EmailTemplateContractInner object if successful.
     */
    public EmailTemplateContractInner createOrUpdate(String resourceGroupName, String serviceName, TemplateName templateName, EmailTemplateUpdateParametersInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, templateName, parameters).toBlocking().single().body();
    }

    /**
     * Updates an Email Template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier. Possible values include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper', 'quotaLimitApproachingDeveloperNotificationMessage', 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault', 'inviteUserNotificationMessage', 'newCommentNotificationMessage', 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage', 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault', 'passwordResetByAdminNotificationMessage', 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     * @param parameters Email Template update parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EmailTemplateContractInner> createOrUpdateAsync(String resourceGroupName, String serviceName, TemplateName templateName, EmailTemplateUpdateParametersInner parameters, final ServiceCallback<EmailTemplateContractInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, templateName, parameters), serviceCallback);
    }

    /**
     * Updates an Email Template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier. Possible values include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper', 'quotaLimitApproachingDeveloperNotificationMessage', 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault', 'inviteUserNotificationMessage', 'newCommentNotificationMessage', 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage', 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault', 'passwordResetByAdminNotificationMessage', 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     * @param parameters Email Template update parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EmailTemplateContractInner object
     */
    public Observable<EmailTemplateContractInner> createOrUpdateAsync(String resourceGroupName, String serviceName, TemplateName templateName, EmailTemplateUpdateParametersInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, templateName, parameters).map(new Func1<ServiceResponse<EmailTemplateContractInner>, EmailTemplateContractInner>() {
            @Override
            public EmailTemplateContractInner call(ServiceResponse<EmailTemplateContractInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates an Email Template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier. Possible values include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper', 'quotaLimitApproachingDeveloperNotificationMessage', 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault', 'inviteUserNotificationMessage', 'newCommentNotificationMessage', 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage', 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault', 'passwordResetByAdminNotificationMessage', 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     * @param parameters Email Template update parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EmailTemplateContractInner object
     */
    public Observable<ServiceResponse<EmailTemplateContractInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String serviceName, TemplateName templateName, EmailTemplateUpdateParametersInner parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (templateName == null) {
            throw new IllegalArgumentException("Parameter templateName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String ifMatch = null;
        return service.createOrUpdate(resourceGroupName, serviceName, templateName, this.client.subscriptionId(), parameters, ifMatch, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EmailTemplateContractInner>>>() {
                @Override
                public Observable<ServiceResponse<EmailTemplateContractInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EmailTemplateContractInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Updates an Email Template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier. Possible values include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper', 'quotaLimitApproachingDeveloperNotificationMessage', 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault', 'inviteUserNotificationMessage', 'newCommentNotificationMessage', 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage', 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault', 'passwordResetByAdminNotificationMessage', 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     * @param parameters Email Template update parameters.
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EmailTemplateContractInner object if successful.
     */
    public EmailTemplateContractInner createOrUpdate(String resourceGroupName, String serviceName, TemplateName templateName, EmailTemplateUpdateParametersInner parameters, String ifMatch) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, templateName, parameters, ifMatch).toBlocking().single().body();
    }

    /**
     * Updates an Email Template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier. Possible values include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper', 'quotaLimitApproachingDeveloperNotificationMessage', 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault', 'inviteUserNotificationMessage', 'newCommentNotificationMessage', 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage', 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault', 'passwordResetByAdminNotificationMessage', 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     * @param parameters Email Template update parameters.
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EmailTemplateContractInner> createOrUpdateAsync(String resourceGroupName, String serviceName, TemplateName templateName, EmailTemplateUpdateParametersInner parameters, String ifMatch, final ServiceCallback<EmailTemplateContractInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, templateName, parameters, ifMatch), serviceCallback);
    }

    /**
     * Updates an Email Template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier. Possible values include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper', 'quotaLimitApproachingDeveloperNotificationMessage', 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault', 'inviteUserNotificationMessage', 'newCommentNotificationMessage', 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage', 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault', 'passwordResetByAdminNotificationMessage', 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     * @param parameters Email Template update parameters.
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EmailTemplateContractInner object
     */
    public Observable<EmailTemplateContractInner> createOrUpdateAsync(String resourceGroupName, String serviceName, TemplateName templateName, EmailTemplateUpdateParametersInner parameters, String ifMatch) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, serviceName, templateName, parameters, ifMatch).map(new Func1<ServiceResponse<EmailTemplateContractInner>, EmailTemplateContractInner>() {
            @Override
            public EmailTemplateContractInner call(ServiceResponse<EmailTemplateContractInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates an Email Template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier. Possible values include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper', 'quotaLimitApproachingDeveloperNotificationMessage', 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault', 'inviteUserNotificationMessage', 'newCommentNotificationMessage', 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage', 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault', 'passwordResetByAdminNotificationMessage', 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     * @param parameters Email Template update parameters.
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EmailTemplateContractInner object
     */
    public Observable<ServiceResponse<EmailTemplateContractInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String serviceName, TemplateName templateName, EmailTemplateUpdateParametersInner parameters, String ifMatch) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (templateName == null) {
            throw new IllegalArgumentException("Parameter templateName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.createOrUpdate(resourceGroupName, serviceName, templateName, this.client.subscriptionId(), parameters, ifMatch, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EmailTemplateContractInner>>>() {
                @Override
                public Observable<ServiceResponse<EmailTemplateContractInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EmailTemplateContractInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<EmailTemplateContractInner> createOrUpdateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<EmailTemplateContractInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<EmailTemplateContractInner>() { }.getType())
                .register(201, new TypeToken<EmailTemplateContractInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Updates the specific Email Template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier. Possible values include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper', 'quotaLimitApproachingDeveloperNotificationMessage', 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault', 'inviteUserNotificationMessage', 'newCommentNotificationMessage', 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage', 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault', 'passwordResetByAdminNotificationMessage', 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     * @param parameters Update parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void update(String resourceGroupName, String serviceName, TemplateName templateName, EmailTemplateUpdateParametersInner parameters) {
        updateWithServiceResponseAsync(resourceGroupName, serviceName, templateName, parameters).toBlocking().single().body();
    }

    /**
     * Updates the specific Email Template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier. Possible values include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper', 'quotaLimitApproachingDeveloperNotificationMessage', 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault', 'inviteUserNotificationMessage', 'newCommentNotificationMessage', 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage', 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault', 'passwordResetByAdminNotificationMessage', 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     * @param parameters Update parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> updateAsync(String resourceGroupName, String serviceName, TemplateName templateName, EmailTemplateUpdateParametersInner parameters, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, serviceName, templateName, parameters), serviceCallback);
    }

    /**
     * Updates the specific Email Template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier. Possible values include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper', 'quotaLimitApproachingDeveloperNotificationMessage', 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault', 'inviteUserNotificationMessage', 'newCommentNotificationMessage', 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage', 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault', 'passwordResetByAdminNotificationMessage', 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     * @param parameters Update parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> updateAsync(String resourceGroupName, String serviceName, TemplateName templateName, EmailTemplateUpdateParametersInner parameters) {
        return updateWithServiceResponseAsync(resourceGroupName, serviceName, templateName, parameters).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the specific Email Template.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier. Possible values include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper', 'quotaLimitApproachingDeveloperNotificationMessage', 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault', 'inviteUserNotificationMessage', 'newCommentNotificationMessage', 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage', 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault', 'passwordResetByAdminNotificationMessage', 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     * @param parameters Update parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> updateWithServiceResponseAsync(String resourceGroupName, String serviceName, TemplateName templateName, EmailTemplateUpdateParametersInner parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (templateName == null) {
            throw new IllegalArgumentException("Parameter templateName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.update(resourceGroupName, serviceName, templateName, this.client.subscriptionId(), parameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> updateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Reset the Email Template to default template provided by the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier. Possible values include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper', 'quotaLimitApproachingDeveloperNotificationMessage', 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault', 'inviteUserNotificationMessage', 'newCommentNotificationMessage', 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage', 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault', 'passwordResetByAdminNotificationMessage', 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String serviceName, TemplateName templateName, String ifMatch) {
        deleteWithServiceResponseAsync(resourceGroupName, serviceName, templateName, ifMatch).toBlocking().single().body();
    }

    /**
     * Reset the Email Template to default template provided by the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier. Possible values include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper', 'quotaLimitApproachingDeveloperNotificationMessage', 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault', 'inviteUserNotificationMessage', 'newCommentNotificationMessage', 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage', 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault', 'passwordResetByAdminNotificationMessage', 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String serviceName, TemplateName templateName, String ifMatch, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, serviceName, templateName, ifMatch), serviceCallback);
    }

    /**
     * Reset the Email Template to default template provided by the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier. Possible values include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper', 'quotaLimitApproachingDeveloperNotificationMessage', 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault', 'inviteUserNotificationMessage', 'newCommentNotificationMessage', 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage', 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault', 'passwordResetByAdminNotificationMessage', 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String serviceName, TemplateName templateName, String ifMatch) {
        return deleteWithServiceResponseAsync(resourceGroupName, serviceName, templateName, ifMatch).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Reset the Email Template to default template provided by the API Management service instance.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceName The name of the API Management service.
     * @param templateName Email Template Name Identifier. Possible values include: 'applicationApprovedNotificationMessage', 'accountClosedDeveloper', 'quotaLimitApproachingDeveloperNotificationMessage', 'newDeveloperNotificationMessage', 'emailChangeIdentityDefault', 'inviteUserNotificationMessage', 'newCommentNotificationMessage', 'confirmSignUpIdentityDefault', 'newIssueNotificationMessage', 'purchaseDeveloperNotificationMessage', 'passwordResetIdentityDefault', 'passwordResetByAdminNotificationMessage', 'rejectDeveloperNotificationMessage', 'requestDeveloperNotificationMessage'
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String serviceName, TemplateName templateName, String ifMatch) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serviceName == null) {
            throw new IllegalArgumentException("Parameter serviceName is required and cannot be null.");
        }
        if (templateName == null) {
            throw new IllegalArgumentException("Parameter templateName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (ifMatch == null) {
            throw new IllegalArgumentException("Parameter ifMatch is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(resourceGroupName, serviceName, templateName, this.client.subscriptionId(), ifMatch, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Lists a collection of properties defined within a service instance.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;EmailTemplateContractInner&gt; object if successful.
     */
    public PagedList<EmailTemplateContractInner> listByServiceNext(final String nextPageLink) {
        ServiceResponse<Page<EmailTemplateContractInner>> response = listByServiceNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<EmailTemplateContractInner>(response.body()) {
            @Override
            public Page<EmailTemplateContractInner> nextPage(String nextPageLink) {
                return listByServiceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists a collection of properties defined within a service instance.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EmailTemplateContractInner>> listByServiceNextAsync(final String nextPageLink, final ServiceFuture<List<EmailTemplateContractInner>> serviceFuture, final ListOperationCallback<EmailTemplateContractInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByServiceNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<EmailTemplateContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EmailTemplateContractInner>>> call(String nextPageLink) {
                    return listByServiceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists a collection of properties defined within a service instance.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EmailTemplateContractInner&gt; object
     */
    public Observable<Page<EmailTemplateContractInner>> listByServiceNextAsync(final String nextPageLink) {
        return listByServiceNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<EmailTemplateContractInner>>, Page<EmailTemplateContractInner>>() {
                @Override
                public Page<EmailTemplateContractInner> call(ServiceResponse<Page<EmailTemplateContractInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists a collection of properties defined within a service instance.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EmailTemplateContractInner&gt; object
     */
    public Observable<ServiceResponse<Page<EmailTemplateContractInner>>> listByServiceNextWithServiceResponseAsync(final String nextPageLink) {
        return listByServiceNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<EmailTemplateContractInner>>, Observable<ServiceResponse<Page<EmailTemplateContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EmailTemplateContractInner>>> call(ServiceResponse<Page<EmailTemplateContractInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByServiceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists a collection of properties defined within a service instance.
     *
    ServiceResponse<PageImpl<EmailTemplateContractInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;EmailTemplateContractInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<EmailTemplateContractInner>>> listByServiceNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByServiceNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<EmailTemplateContractInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EmailTemplateContractInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<EmailTemplateContractInner>> result = listByServiceNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<EmailTemplateContractInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<EmailTemplateContractInner>> listByServiceNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<EmailTemplateContractInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<EmailTemplateContractInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
