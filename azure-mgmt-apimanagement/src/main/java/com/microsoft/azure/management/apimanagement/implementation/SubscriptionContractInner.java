/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.apimanagement.implementation;

import com.microsoft.azure.management.apimanagement.SubscriptionState;
import org.joda.time.DateTime;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.Resource;

/**
 * Subscription details.
 */
@JsonFlatten
public class SubscriptionContractInner extends Resource {
    /**
     * The user resource identifier of the subscription owner. The value is a
     * valid relative URL in the format of /users/{uid} where {uid} is a user
     * identifier.
     */
    @JsonProperty(value = "properties.userId", required = true)
    private String userId;

    /**
     * The product resource identifier of the subscribed product. The value is
     * a valid relative URL in the format of /products/{productId} where
     * {productId} is a product identifier.
     */
    @JsonProperty(value = "properties.productId", required = true)
    private String productId;

    /**
     * The name of the subscription, or null if the subscription has no name.
     */
    @JsonProperty(value = "properties.displayName")
    private String displayName;

    /**
     * Subscription state. Possible states are * active – the subscription is
     * active, * suspended – the subscription is blocked, and the subscriber
     * cannot call any APIs of the product, * submitted – the subscription
     * request has been made by the developer, but has not yet been approved or
     * rejected, * rejected – the subscription request has been denied by an
     * administrator, * cancelled – the subscription has been cancelled by the
     * developer or administrator, * expired – the subscription reached its
     * expiration date and was deactivated. Possible values include:
     * 'suspended', 'active', 'expired', 'submitted', 'rejected', 'cancelled'.
     */
    @JsonProperty(value = "properties.state", required = true)
    private SubscriptionState state;

    /**
     * Subscription creation date. The date conforms to the following format:
     * `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     */
    @JsonProperty(value = "properties.createdDate", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime createdDate;

    /**
     * Subscription activation date. The setting is for audit purposes only and
     * the subscription is not automatically activated. The subscription
     * lifecycle can be managed by using the `state` property. The date
     * conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by
     * the ISO 8601 standard.
     */
    @JsonProperty(value = "properties.startDate")
    private DateTime startDate;

    /**
     * Subscription expiration date. The setting is for audit purposes only and
     * the subscription is not automatically expired. The subscription
     * lifecycle can be managed by using the `state` property. The date
     * conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by
     * the ISO 8601 standard.
     */
    @JsonProperty(value = "properties.expirationDate")
    private DateTime expirationDate;

    /**
     * Date when subscription was cancelled or expired. The setting is for
     * audit purposes only and the subscription is not automatically cancelled.
     * The subscription lifecycle can be managed by using the `state` property.
     * The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as
     * specified by the ISO 8601 standard.
     */
    @JsonProperty(value = "properties.endDate")
    private DateTime endDate;

    /**
     * Upcoming subscription expiration notification date. The date conforms to
     * the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO
     * 8601 standard.
     */
    @JsonProperty(value = "properties.notificationDate")
    private DateTime notificationDate;

    /**
     * Subscription primary key.
     */
    @JsonProperty(value = "properties.primaryKey", required = true)
    private String primaryKey;

    /**
     * Subscription secondary key.
     */
    @JsonProperty(value = "properties.secondaryKey", required = true)
    private String secondaryKey;

    /**
     * Optional subscription comment added by an administrator.
     */
    @JsonProperty(value = "properties.stateComment")
    private String stateComment;

    /**
     * Get the userId value.
     *
     * @return the userId value
     */
    public String userId() {
        return this.userId;
    }

    /**
     * Set the userId value.
     *
     * @param userId the userId value to set
     * @return the SubscriptionContractInner object itself.
     */
    public SubscriptionContractInner withUserId(String userId) {
        this.userId = userId;
        return this;
    }

    /**
     * Get the productId value.
     *
     * @return the productId value
     */
    public String productId() {
        return this.productId;
    }

    /**
     * Set the productId value.
     *
     * @param productId the productId value to set
     * @return the SubscriptionContractInner object itself.
     */
    public SubscriptionContractInner withProductId(String productId) {
        this.productId = productId;
        return this;
    }

    /**
     * Get the displayName value.
     *
     * @return the displayName value
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName value.
     *
     * @param displayName the displayName value to set
     * @return the SubscriptionContractInner object itself.
     */
    public SubscriptionContractInner withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the state value.
     *
     * @return the state value
     */
    public SubscriptionState state() {
        return this.state;
    }

    /**
     * Set the state value.
     *
     * @param state the state value to set
     * @return the SubscriptionContractInner object itself.
     */
    public SubscriptionContractInner withState(SubscriptionState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the createdDate value.
     *
     * @return the createdDate value
     */
    public DateTime createdDate() {
        return this.createdDate;
    }

    /**
     * Get the startDate value.
     *
     * @return the startDate value
     */
    public DateTime startDate() {
        return this.startDate;
    }

    /**
     * Set the startDate value.
     *
     * @param startDate the startDate value to set
     * @return the SubscriptionContractInner object itself.
     */
    public SubscriptionContractInner withStartDate(DateTime startDate) {
        this.startDate = startDate;
        return this;
    }

    /**
     * Get the expirationDate value.
     *
     * @return the expirationDate value
     */
    public DateTime expirationDate() {
        return this.expirationDate;
    }

    /**
     * Set the expirationDate value.
     *
     * @param expirationDate the expirationDate value to set
     * @return the SubscriptionContractInner object itself.
     */
    public SubscriptionContractInner withExpirationDate(DateTime expirationDate) {
        this.expirationDate = expirationDate;
        return this;
    }

    /**
     * Get the endDate value.
     *
     * @return the endDate value
     */
    public DateTime endDate() {
        return this.endDate;
    }

    /**
     * Set the endDate value.
     *
     * @param endDate the endDate value to set
     * @return the SubscriptionContractInner object itself.
     */
    public SubscriptionContractInner withEndDate(DateTime endDate) {
        this.endDate = endDate;
        return this;
    }

    /**
     * Get the notificationDate value.
     *
     * @return the notificationDate value
     */
    public DateTime notificationDate() {
        return this.notificationDate;
    }

    /**
     * Set the notificationDate value.
     *
     * @param notificationDate the notificationDate value to set
     * @return the SubscriptionContractInner object itself.
     */
    public SubscriptionContractInner withNotificationDate(DateTime notificationDate) {
        this.notificationDate = notificationDate;
        return this;
    }

    /**
     * Get the primaryKey value.
     *
     * @return the primaryKey value
     */
    public String primaryKey() {
        return this.primaryKey;
    }

    /**
     * Set the primaryKey value.
     *
     * @param primaryKey the primaryKey value to set
     * @return the SubscriptionContractInner object itself.
     */
    public SubscriptionContractInner withPrimaryKey(String primaryKey) {
        this.primaryKey = primaryKey;
        return this;
    }

    /**
     * Get the secondaryKey value.
     *
     * @return the secondaryKey value
     */
    public String secondaryKey() {
        return this.secondaryKey;
    }

    /**
     * Set the secondaryKey value.
     *
     * @param secondaryKey the secondaryKey value to set
     * @return the SubscriptionContractInner object itself.
     */
    public SubscriptionContractInner withSecondaryKey(String secondaryKey) {
        this.secondaryKey = secondaryKey;
        return this;
    }

    /**
     * Get the stateComment value.
     *
     * @return the stateComment value
     */
    public String stateComment() {
        return this.stateComment;
    }

    /**
     * Set the stateComment value.
     *
     * @param stateComment the stateComment value to set
     * @return the SubscriptionContractInner object itself.
     */
    public SubscriptionContractInner withStateComment(String stateComment) {
        this.stateComment = stateComment;
        return this;
    }

}
