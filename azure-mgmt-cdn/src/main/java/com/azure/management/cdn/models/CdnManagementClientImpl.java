// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.cdn.models;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.management.AzureServiceClient;
import com.azure.management.cdn.CheckNameAvailabilityInput;
import com.azure.management.cdn.ErrorResponseException;
import com.azure.management.cdn.ValidateProbeInput;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the CdnManagementClientImpl type.
 */
public final class CdnManagementClientImpl extends AzureServiceClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private CdnManagementClientService service;

    /**
     * Azure Subscription ID.
     */
    private String subscriptionId;

    /**
     * Gets Azure Subscription ID.
     * 
     * @return the subscriptionId value.
     */
    public String getSubscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Sets Azure Subscription ID.
     * 
     * @param subscriptionId the subscriptionId value.
     * @return the service client itself.
     */
    public CdnManagementClientImpl setSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }

    /**
     * server parameter.
     */
    private String host;

    /**
     * Gets server parameter.
     * 
     * @return the host value.
     */
    public String getHost() {
        return this.host;
    }

    /**
     * Sets server parameter.
     * 
     * @param host the host value.
     * @return the service client itself.
     */
    public CdnManagementClientImpl setHost(String host) {
        this.host = host;
        return this;
    }

    /**
     * Api Version.
     */
    private String apiVersion;

    /**
     * Gets Api Version.
     * 
     * @return the apiVersion value.
     */
    public String getApiVersion() {
        return this.apiVersion;
    }

    /**
     * Sets Api Version.
     * 
     * @param apiVersion the apiVersion value.
     * @return the service client itself.
     */
    public CdnManagementClientImpl setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The ProfilesInner object to access its operations.
     */
    private final ProfilesInner profiles;

    /**
     * Gets the ProfilesInner object to access its operations.
     * 
     * @return the ProfilesInner object.
     */
    public ProfilesInner profiles() {
        return this.profiles;
    }

    /**
     * The EndpointsInner object to access its operations.
     */
    private final EndpointsInner endpoints;

    /**
     * Gets the EndpointsInner object to access its operations.
     * 
     * @return the EndpointsInner object.
     */
    public EndpointsInner endpoints() {
        return this.endpoints;
    }

    /**
     * The OriginsInner object to access its operations.
     */
    private final OriginsInner origins;

    /**
     * Gets the OriginsInner object to access its operations.
     * 
     * @return the OriginsInner object.
     */
    public OriginsInner origins() {
        return this.origins;
    }

    /**
     * The CustomDomainsInner object to access its operations.
     */
    private final CustomDomainsInner customDomains;

    /**
     * Gets the CustomDomainsInner object to access its operations.
     * 
     * @return the CustomDomainsInner object.
     */
    public CustomDomainsInner customDomains() {
        return this.customDomains;
    }

    /**
     * The ResourceUsagesInner object to access its operations.
     */
    private final ResourceUsagesInner resourceUsages;

    /**
     * Gets the ResourceUsagesInner object to access its operations.
     * 
     * @return the ResourceUsagesInner object.
     */
    public ResourceUsagesInner resourceUsages() {
        return this.resourceUsages;
    }

    /**
     * The OperationsInner object to access its operations.
     */
    private final OperationsInner operations;

    /**
     * Gets the OperationsInner object to access its operations.
     * 
     * @return the OperationsInner object.
     */
    public OperationsInner operations() {
        return this.operations;
    }

    /**
     * The EdgeNodesInner object to access its operations.
     */
    private final EdgeNodesInner edgeNodes;

    /**
     * Gets the EdgeNodesInner object to access its operations.
     * 
     * @return the EdgeNodesInner object.
     */
    public EdgeNodesInner edgeNodes() {
        return this.edgeNodes;
    }

    /**
     * Initializes an instance of CdnManagementClient client.
     */
    public CdnManagementClientImpl() {
        this(new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy()).build(), AzureEnvironment.AZURE);
    }

    /**
     * Initializes an instance of CdnManagementClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     */
    public CdnManagementClientImpl(HttpPipeline httpPipeline) {
        this(httpPipeline, AzureEnvironment.AZURE);
    }

    /**
     * Initializes an instance of CdnManagementClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param environment The Azure environment.
     */
    public CdnManagementClientImpl(HttpPipeline httpPipeline, AzureEnvironment environment) {
        super(httpPipeline, environment);
        this.httpPipeline = httpPipeline;
        this.profiles = new ProfilesInner(this);
        this.endpoints = new EndpointsInner(this);
        this.origins = new OriginsInner(this);
        this.customDomains = new CustomDomainsInner(this);
        this.resourceUsages = new ResourceUsagesInner(this);
        this.operations = new OperationsInner(this);
        this.edgeNodes = new EdgeNodesInner(this);
        this.service = RestProxy.create(CdnManagementClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for CdnManagementClient to be
     * used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "CdnManagementClient")
    private interface CdnManagementClientService {
        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Post("/providers/Microsoft.Cdn/checkNameAvailability")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<CheckNameAvailabilityOutputInner>> checkNameAvailability(@HostParam("$host") String host, @QueryParam("api-version") String apiVersion, @BodyParam("application/json") CheckNameAvailabilityInput checkNameAvailabilityInput);

        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.Cdn/checkNameAvailability")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<CheckNameAvailabilityOutputInner>> checkNameAvailabilityWithSubscription(@HostParam("$host") String host, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @BodyParam("application/json") CheckNameAvailabilityInput checkNameAvailabilityInput);

        @Headers({ "Accept: application/json", "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.Cdn/validateProbe")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Mono<SimpleResponse<ValidateProbeOutputInner>> validateProbe(@HostParam("$host") String host, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @BodyParam("application/json") ValidateProbeInput validateProbeInput);
    }

    /**
     * Check the availability of a resource name. This is needed for resources where name is globally unique, such as a CDN endpoint.
     * 
     * @param name The resource name to validate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return output of check name availability API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<CheckNameAvailabilityOutputInner>> checkNameAvailabilityWithResponseAsync(String name) {
        CheckNameAvailabilityInput checkNameAvailabilityInput = new CheckNameAvailabilityInput();
        checkNameAvailabilityInput.withName(name);
        return service.checkNameAvailability(this.getHost(), this.getApiVersion(), checkNameAvailabilityInput);
    }

    /**
     * Check the availability of a resource name. This is needed for resources where name is globally unique, such as a CDN endpoint.
     * 
     * @param name The resource name to validate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return output of check name availability API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CheckNameAvailabilityOutputInner> checkNameAvailabilityAsync(String name) {
        return checkNameAvailabilityWithResponseAsync(name)
            .flatMap((SimpleResponse<CheckNameAvailabilityOutputInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Check the availability of a resource name. This is needed for resources where name is globally unique, such as a CDN endpoint.
     * 
     * @param name The resource name to validate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return output of check name availability API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CheckNameAvailabilityOutputInner checkNameAvailability(String name) {
        return checkNameAvailabilityAsync(name).block();
    }

    /**
     * Check the availability of a resource name. This is needed for resources where name is globally unique, such as a CDN endpoint.
     * 
     * @param name The resource name to validate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return output of check name availability API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<CheckNameAvailabilityOutputInner>> checkNameAvailabilityWithSubscriptionWithResponseAsync(String name) {
        CheckNameAvailabilityInput checkNameAvailabilityInput = new CheckNameAvailabilityInput();
        checkNameAvailabilityInput.withName(name);
        return service.checkNameAvailabilityWithSubscription(this.getHost(), this.getSubscriptionId(), this.getApiVersion(), checkNameAvailabilityInput);
    }

    /**
     * Check the availability of a resource name. This is needed for resources where name is globally unique, such as a CDN endpoint.
     * 
     * @param name The resource name to validate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return output of check name availability API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CheckNameAvailabilityOutputInner> checkNameAvailabilityWithSubscriptionAsync(String name) {
        return checkNameAvailabilityWithSubscriptionWithResponseAsync(name)
            .flatMap((SimpleResponse<CheckNameAvailabilityOutputInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Check the availability of a resource name. This is needed for resources where name is globally unique, such as a CDN endpoint.
     * 
     * @param name The resource name to validate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return output of check name availability API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CheckNameAvailabilityOutputInner checkNameAvailabilityWithSubscription(String name) {
        return checkNameAvailabilityWithSubscriptionAsync(name).block();
    }

    /**
     * Check if the probe path is a valid path and the file can be accessed. Probe path is the path to a file hosted on the origin server to help accelerate the delivery of dynamic content via the CDN endpoint. This path is relative to the origin path specified in the endpoint configuration.
     * 
     * @param probeURL The probe URL to validate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return output of the validate probe API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ValidateProbeOutputInner>> validateProbeWithResponseAsync(String probeURL) {
        ValidateProbeInput validateProbeInput = new ValidateProbeInput();
        validateProbeInput.withProbeURL(probeURL);
        return service.validateProbe(this.getHost(), this.getSubscriptionId(), this.getApiVersion(), validateProbeInput);
    }

    /**
     * Check if the probe path is a valid path and the file can be accessed. Probe path is the path to a file hosted on the origin server to help accelerate the delivery of dynamic content via the CDN endpoint. This path is relative to the origin path specified in the endpoint configuration.
     * 
     * @param probeURL The probe URL to validate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return output of the validate probe API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ValidateProbeOutputInner> validateProbeAsync(String probeURL) {
        return validateProbeWithResponseAsync(probeURL)
            .flatMap((SimpleResponse<ValidateProbeOutputInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Check if the probe path is a valid path and the file can be accessed. Probe path is the path to a file hosted on the origin server to help accelerate the delivery of dynamic content via the CDN endpoint. This path is relative to the origin path specified in the endpoint configuration.
     * 
     * @param probeURL The probe URL to validate.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return output of the validate probe API.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ValidateProbeOutputInner validateProbe(String probeURL) {
        return validateProbeAsync(probeURL).block();
    }
}
