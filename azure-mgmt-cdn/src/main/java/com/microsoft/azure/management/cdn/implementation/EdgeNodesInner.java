/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.cdn.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.cdn.ErrorResponseException;
import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in EdgeNodes.
 */
public final class EdgeNodesInner {
    /** The Retrofit service to perform REST calls. */
    private EdgeNodesService service;
    /** The service client containing this operation class. */
    private CdnManagementClientImpl client;

    /**
     * Initializes an instance of EdgeNodesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public EdgeNodesInner(Retrofit retrofit, CdnManagementClientImpl client) {
        this.service = retrofit.create(EdgeNodesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for EdgeNodes to be
     * used by Retrofit to perform actually REST calls.
     */
    interface EdgeNodesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.cdn.EdgeNodes list" })
        @GET("providers/Microsoft.Cdn/edgenodes")
        Observable<Response<ResponseBody>> list(@Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Lists all the edge nodes of a CDN service.
     *
     * @return the EdgenodeResultInner object if successful.
     */
    public EdgenodeResultInner list() {
        return listWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Lists all the edge nodes of a CDN service.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<EdgenodeResultInner> listAsync(final ServiceCallback<EdgenodeResultInner> serviceCallback) {
        return ServiceCall.fromResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Lists all the edge nodes of a CDN service.
     *
     * @return the observable to the EdgenodeResultInner object
     */
    public Observable<EdgenodeResultInner> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponse<EdgenodeResultInner>, EdgenodeResultInner>() {
            @Override
            public EdgenodeResultInner call(ServiceResponse<EdgenodeResultInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Lists all the edge nodes of a CDN service.
     *
     * @return the observable to the EdgenodeResultInner object
     */
    public Observable<ServiceResponse<EdgenodeResultInner>> listWithServiceResponseAsync() {
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EdgenodeResultInner>>>() {
                @Override
                public Observable<ServiceResponse<EdgenodeResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EdgenodeResultInner> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<EdgenodeResultInner> listDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<EdgenodeResultInner, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<EdgenodeResultInner>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
