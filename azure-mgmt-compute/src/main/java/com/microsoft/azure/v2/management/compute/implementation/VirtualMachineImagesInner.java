/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.v2.management.compute.implementation;

import com.microsoft.azure.v2.AzureProxy;
import com.microsoft.azure.v2.CloudException;
import com.microsoft.rest.v2.BodyResponse;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.HeaderParam;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.PathParam;
import com.microsoft.rest.v2.annotations.QueryParam;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import io.reactivex.Maybe;
import io.reactivex.Single;
import io.reactivex.annotations.NonNull;
import java.util.List;

/**
 * An instance of this class provides access to all the operations defined in
 * VirtualMachineImages.
 */
public final class VirtualMachineImagesInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private VirtualMachineImagesService service;

    /**
     * The service client containing this operation class.
     */
    private ComputeManagementClientImpl client;

    /**
     * Initializes an instance of VirtualMachineImagesInner.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public VirtualMachineImagesInner(ComputeManagementClientImpl client) {
        this.service = AzureProxy.create(VirtualMachineImagesService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for VirtualMachineImages to be
     * used by the proxy service to perform REST calls.
     */
    @Host("https://management.azure.com")
    private interface VirtualMachineImagesService {
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers/{offer}/skus/{skus}/versions/{version}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<VirtualMachineImageInner>> get(@PathParam("location") String location, @PathParam("publisherName") String publisherName, @PathParam("offer") String offer, @PathParam("skus") String skus, @PathParam("version") String version, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers/{offer}/skus/{skus}/versions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<List<VirtualMachineImageResourceInner>>> list(@PathParam("location") String location, @PathParam("publisherName") String publisherName, @PathParam("offer") String offer, @PathParam("skus") String skus, @PathParam("subscriptionId") String subscriptionId, @QueryParam("$filter") String filter, @QueryParam("$top") Integer top, @QueryParam("$orderby") String orderby, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<List<VirtualMachineImageResourceInner>>> listOffers(@PathParam("location") String location, @PathParam("publisherName") String publisherName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<List<VirtualMachineImageResourceInner>>> listPublishers(@PathParam("location") String location, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmimage/offers/{offer}/skus")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<List<VirtualMachineImageResourceInner>>> listSkus(@PathParam("location") String location, @PathParam("publisherName") String publisherName, @PathParam("offer") String offer, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);
    }

    /**
     * Gets a virtual machine image.
     *
     * @param location The name of a supported Azure region.
     * @param publisherName A valid image publisher.
     * @param offer A valid image publisher offer.
     * @param skus A valid image SKU.
     * @param version A valid image SKU version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the VirtualMachineImageInner object if successful.
     */
    public VirtualMachineImageInner get(@NonNull String location, @NonNull String publisherName, @NonNull String offer, @NonNull String skus, @NonNull String version) {
        return getAsync(location, publisherName, offer, skus, version).blockingGet();
    }

    /**
     * Gets a virtual machine image.
     *
     * @param location The name of a supported Azure region.
     * @param publisherName A valid image publisher.
     * @param offer A valid image publisher offer.
     * @param skus A valid image SKU.
     * @param version A valid image SKU version.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<VirtualMachineImageInner> getAsync(@NonNull String location, @NonNull String publisherName, @NonNull String offer, @NonNull String skus, @NonNull String version, ServiceCallback<VirtualMachineImageInner> serviceCallback) {
        return ServiceFuture.fromBody(getAsync(location, publisherName, offer, skus, version), serviceCallback);
    }

    /**
     * Gets a virtual machine image.
     *
     * @param location The name of a supported Azure region.
     * @param publisherName A valid image publisher.
     * @param offer A valid image publisher offer.
     * @param skus A valid image SKU.
     * @param version A valid image SKU version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<VirtualMachineImageInner>> getWithRestResponseAsync(@NonNull String location, @NonNull String publisherName, @NonNull String offer, @NonNull String skus, @NonNull String version) {
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (publisherName == null) {
            throw new IllegalArgumentException("Parameter publisherName is required and cannot be null.");
        }
        if (offer == null) {
            throw new IllegalArgumentException("Parameter offer is required and cannot be null.");
        }
        if (skus == null) {
            throw new IllegalArgumentException("Parameter skus is required and cannot be null.");
        }
        if (version == null) {
            throw new IllegalArgumentException("Parameter version is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2018-06-01";
        return service.get(location, publisherName, offer, skus, version, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage());
    }

    /**
     * Gets a virtual machine image.
     *
     * @param location The name of a supported Azure region.
     * @param publisherName A valid image publisher.
     * @param offer A valid image publisher offer.
     * @param skus A valid image SKU.
     * @param version A valid image SKU version.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<VirtualMachineImageInner> getAsync(@NonNull String location, @NonNull String publisherName, @NonNull String offer, @NonNull String skus, @NonNull String version) {
        return getWithRestResponseAsync(location, publisherName, offer, skus, version)
            .flatMapMaybe((BodyResponse<VirtualMachineImageInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Gets a list of all virtual machine image versions for the specified location, publisher, offer, and SKU.
     *
     * @param location The name of a supported Azure region.
     * @param publisherName A valid image publisher.
     * @param offer A valid image publisher offer.
     * @param skus A valid image SKU.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;VirtualMachineImageResourceInner&gt; object if successful.
     */
    public List<VirtualMachineImageResourceInner> list(@NonNull String location, @NonNull String publisherName, @NonNull String offer, @NonNull String skus) {
        return listAsync(location, publisherName, offer, skus).blockingGet();
    }

    /**
     * Gets a list of all virtual machine image versions for the specified location, publisher, offer, and SKU.
     *
     * @param location The name of a supported Azure region.
     * @param publisherName A valid image publisher.
     * @param offer A valid image publisher offer.
     * @param skus A valid image SKU.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<List<VirtualMachineImageResourceInner>> listAsync(@NonNull String location, @NonNull String publisherName, @NonNull String offer, @NonNull String skus, ServiceCallback<List<VirtualMachineImageResourceInner>> serviceCallback) {
        return ServiceFuture.fromBody(listAsync(location, publisherName, offer, skus), serviceCallback);
    }

    /**
     * Gets a list of all virtual machine image versions for the specified location, publisher, offer, and SKU.
     *
     * @param location The name of a supported Azure region.
     * @param publisherName A valid image publisher.
     * @param offer A valid image publisher offer.
     * @param skus A valid image SKU.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<List<VirtualMachineImageResourceInner>>> listWithRestResponseAsync(@NonNull String location, @NonNull String publisherName, @NonNull String offer, @NonNull String skus) {
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (publisherName == null) {
            throw new IllegalArgumentException("Parameter publisherName is required and cannot be null.");
        }
        if (offer == null) {
            throw new IllegalArgumentException("Parameter offer is required and cannot be null.");
        }
        if (skus == null) {
            throw new IllegalArgumentException("Parameter skus is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2018-06-01";
        final String filter = null;
        final Integer top = null;
        final String orderby = null;
        return service.list(location, publisherName, offer, skus, this.client.subscriptionId(), filter, top, orderby, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Gets a list of all virtual machine image versions for the specified location, publisher, offer, and SKU.
     *
     * @param location The name of a supported Azure region.
     * @param publisherName A valid image publisher.
     * @param offer A valid image publisher offer.
     * @param skus A valid image SKU.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<List<VirtualMachineImageResourceInner>> listAsync(@NonNull String location, @NonNull String publisherName, @NonNull String offer, @NonNull String skus) {
        return listWithRestResponseAsync(location, publisherName, offer, skus)
            .flatMapMaybe((BodyResponse<List<VirtualMachineImageResourceInner>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Gets a list of all virtual machine image versions for the specified location, publisher, offer, and SKU.
     *
     * @param location The name of a supported Azure region.
     * @param publisherName A valid image publisher.
     * @param offer A valid image publisher offer.
     * @param skus A valid image SKU.
     * @param filter The filter to apply on the operation.
     * @param top the Integer value.
     * @param orderby the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;VirtualMachineImageResourceInner&gt; object if successful.
     */
    public List<VirtualMachineImageResourceInner> list(@NonNull String location, @NonNull String publisherName, @NonNull String offer, @NonNull String skus, String filter, Integer top, String orderby) {
        return listAsync(location, publisherName, offer, skus, filter, top, orderby).blockingGet();
    }

    /**
     * Gets a list of all virtual machine image versions for the specified location, publisher, offer, and SKU.
     *
     * @param location The name of a supported Azure region.
     * @param publisherName A valid image publisher.
     * @param offer A valid image publisher offer.
     * @param skus A valid image SKU.
     * @param filter The filter to apply on the operation.
     * @param top the Integer value.
     * @param orderby the String value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<List<VirtualMachineImageResourceInner>> listAsync(@NonNull String location, @NonNull String publisherName, @NonNull String offer, @NonNull String skus, String filter, Integer top, String orderby, ServiceCallback<List<VirtualMachineImageResourceInner>> serviceCallback) {
        return ServiceFuture.fromBody(listAsync(location, publisherName, offer, skus, filter, top, orderby), serviceCallback);
    }

    /**
     * Gets a list of all virtual machine image versions for the specified location, publisher, offer, and SKU.
     *
     * @param location The name of a supported Azure region.
     * @param publisherName A valid image publisher.
     * @param offer A valid image publisher offer.
     * @param skus A valid image SKU.
     * @param filter The filter to apply on the operation.
     * @param top the Integer value.
     * @param orderby the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<List<VirtualMachineImageResourceInner>>> listWithRestResponseAsync(@NonNull String location, @NonNull String publisherName, @NonNull String offer, @NonNull String skus, String filter, Integer top, String orderby) {
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (publisherName == null) {
            throw new IllegalArgumentException("Parameter publisherName is required and cannot be null.");
        }
        if (offer == null) {
            throw new IllegalArgumentException("Parameter offer is required and cannot be null.");
        }
        if (skus == null) {
            throw new IllegalArgumentException("Parameter skus is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2018-06-01";
        return service.list(location, publisherName, offer, skus, this.client.subscriptionId(), filter, top, orderby, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Gets a list of all virtual machine image versions for the specified location, publisher, offer, and SKU.
     *
     * @param location The name of a supported Azure region.
     * @param publisherName A valid image publisher.
     * @param offer A valid image publisher offer.
     * @param skus A valid image SKU.
     * @param filter The filter to apply on the operation.
     * @param top the Integer value.
     * @param orderby the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<List<VirtualMachineImageResourceInner>> listAsync(@NonNull String location, @NonNull String publisherName, @NonNull String offer, @NonNull String skus, String filter, Integer top, String orderby) {
        return listWithRestResponseAsync(location, publisherName, offer, skus, filter, top, orderby)
            .flatMapMaybe((BodyResponse<List<VirtualMachineImageResourceInner>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Gets a list of virtual machine image offers for the specified location and publisher.
     *
     * @param location The name of a supported Azure region.
     * @param publisherName A valid image publisher.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;VirtualMachineImageResourceInner&gt; object if successful.
     */
    public List<VirtualMachineImageResourceInner> listOffers(@NonNull String location, @NonNull String publisherName) {
        return listOffersAsync(location, publisherName).blockingGet();
    }

    /**
     * Gets a list of virtual machine image offers for the specified location and publisher.
     *
     * @param location The name of a supported Azure region.
     * @param publisherName A valid image publisher.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<List<VirtualMachineImageResourceInner>> listOffersAsync(@NonNull String location, @NonNull String publisherName, ServiceCallback<List<VirtualMachineImageResourceInner>> serviceCallback) {
        return ServiceFuture.fromBody(listOffersAsync(location, publisherName), serviceCallback);
    }

    /**
     * Gets a list of virtual machine image offers for the specified location and publisher.
     *
     * @param location The name of a supported Azure region.
     * @param publisherName A valid image publisher.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<List<VirtualMachineImageResourceInner>>> listOffersWithRestResponseAsync(@NonNull String location, @NonNull String publisherName) {
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (publisherName == null) {
            throw new IllegalArgumentException("Parameter publisherName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2018-06-01";
        return service.listOffers(location, publisherName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage());
    }

    /**
     * Gets a list of virtual machine image offers for the specified location and publisher.
     *
     * @param location The name of a supported Azure region.
     * @param publisherName A valid image publisher.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<List<VirtualMachineImageResourceInner>> listOffersAsync(@NonNull String location, @NonNull String publisherName) {
        return listOffersWithRestResponseAsync(location, publisherName)
            .flatMapMaybe((BodyResponse<List<VirtualMachineImageResourceInner>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Gets a list of virtual machine image publishers for the specified Azure location.
     *
     * @param location The name of a supported Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;VirtualMachineImageResourceInner&gt; object if successful.
     */
    public List<VirtualMachineImageResourceInner> listPublishers(@NonNull String location) {
        return listPublishersAsync(location).blockingGet();
    }

    /**
     * Gets a list of virtual machine image publishers for the specified Azure location.
     *
     * @param location The name of a supported Azure region.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<List<VirtualMachineImageResourceInner>> listPublishersAsync(@NonNull String location, ServiceCallback<List<VirtualMachineImageResourceInner>> serviceCallback) {
        return ServiceFuture.fromBody(listPublishersAsync(location), serviceCallback);
    }

    /**
     * Gets a list of virtual machine image publishers for the specified Azure location.
     *
     * @param location The name of a supported Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<List<VirtualMachineImageResourceInner>>> listPublishersWithRestResponseAsync(@NonNull String location) {
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2018-06-01";
        return service.listPublishers(location, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage());
    }

    /**
     * Gets a list of virtual machine image publishers for the specified Azure location.
     *
     * @param location The name of a supported Azure region.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<List<VirtualMachineImageResourceInner>> listPublishersAsync(@NonNull String location) {
        return listPublishersWithRestResponseAsync(location)
            .flatMapMaybe((BodyResponse<List<VirtualMachineImageResourceInner>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Gets a list of virtual machine image SKUs for the specified location, publisher, and offer.
     *
     * @param location The name of a supported Azure region.
     * @param publisherName A valid image publisher.
     * @param offer A valid image publisher offer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;VirtualMachineImageResourceInner&gt; object if successful.
     */
    public List<VirtualMachineImageResourceInner> listSkus(@NonNull String location, @NonNull String publisherName, @NonNull String offer) {
        return listSkusAsync(location, publisherName, offer).blockingGet();
    }

    /**
     * Gets a list of virtual machine image SKUs for the specified location, publisher, and offer.
     *
     * @param location The name of a supported Azure region.
     * @param publisherName A valid image publisher.
     * @param offer A valid image publisher offer.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<List<VirtualMachineImageResourceInner>> listSkusAsync(@NonNull String location, @NonNull String publisherName, @NonNull String offer, ServiceCallback<List<VirtualMachineImageResourceInner>> serviceCallback) {
        return ServiceFuture.fromBody(listSkusAsync(location, publisherName, offer), serviceCallback);
    }

    /**
     * Gets a list of virtual machine image SKUs for the specified location, publisher, and offer.
     *
     * @param location The name of a supported Azure region.
     * @param publisherName A valid image publisher.
     * @param offer A valid image publisher offer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<List<VirtualMachineImageResourceInner>>> listSkusWithRestResponseAsync(@NonNull String location, @NonNull String publisherName, @NonNull String offer) {
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (publisherName == null) {
            throw new IllegalArgumentException("Parameter publisherName is required and cannot be null.");
        }
        if (offer == null) {
            throw new IllegalArgumentException("Parameter offer is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2018-06-01";
        return service.listSkus(location, publisherName, offer, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage());
    }

    /**
     * Gets a list of virtual machine image SKUs for the specified location, publisher, and offer.
     *
     * @param location The name of a supported Azure region.
     * @param publisherName A valid image publisher.
     * @param offer A valid image publisher offer.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<List<VirtualMachineImageResourceInner>> listSkusAsync(@NonNull String location, @NonNull String publisherName, @NonNull String offer) {
        return listSkusWithRestResponseAsync(location, publisherName, offer)
            .flatMapMaybe((BodyResponse<List<VirtualMachineImageResourceInner>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }
}
