/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.v2.management.compute.implementation;

import com.microsoft.azure.v2.AzureProxy;
import com.microsoft.azure.v2.CloudException;
import com.microsoft.azure.v2.Page;
import com.microsoft.azure.v2.PagedList;
import com.microsoft.rest.v2.BodyResponse;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.HeaderParam;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.PathParam;
import com.microsoft.rest.v2.annotations.QueryParam;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import io.reactivex.Maybe;
import io.reactivex.Observable;
import io.reactivex.Single;
import io.reactivex.annotations.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * VirtualMachineRunCommands.
 */
public final class VirtualMachineRunCommandsInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private VirtualMachineRunCommandsService service;

    /**
     * The service client containing this operation class.
     */
    private ComputeManagementClientImpl client;

    /**
     * Initializes an instance of VirtualMachineRunCommandsInner.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public VirtualMachineRunCommandsInner(ComputeManagementClientImpl client) {
        this.service = AzureProxy.create(VirtualMachineRunCommandsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for VirtualMachineRunCommands to
     * be used by the proxy service to perform REST calls.
     */
    @Host("https://management.azure.com")
    private interface VirtualMachineRunCommandsService {
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/runCommands")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PageImpl1<RunCommandDocumentBaseInner>>> list(@PathParam("location") String location, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/runCommands/{commandId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<RunCommandDocumentInner>> get(@PathParam("location") String location, @PathParam("commandId") String commandId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PageImpl1<RunCommandDocumentBaseInner>>> listNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);
    }

    /**
     * Lists all available run commands for a subscription in a location.
     *
     * @param location The location upon which run commands is queried.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;RunCommandDocumentBaseInner&gt; object if successful.
     */
    public PagedList<RunCommandDocumentBaseInner> list(@NonNull String location) {
        Page<RunCommandDocumentBaseInner> response = listSinglePageAsync(location).blockingGet();
        return new PagedList<RunCommandDocumentBaseInner>(response) {
            @Override
            public Page<RunCommandDocumentBaseInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Lists all available run commands for a subscription in a location.
     *
     * @param location The location upon which run commands is queried.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;RunCommandDocumentBaseInner&gt; object.
     */
    public Observable<Page<RunCommandDocumentBaseInner>> listAsync(@NonNull String location) {
        return listSinglePageAsync(location)
            .toObservable()
            .concatMap((Page<RunCommandDocumentBaseInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listNextAsync(nextPageLink));
            });
    }

    /**
     * Lists all available run commands for a subscription in a location.
     *
     * @param location The location upon which run commands is queried.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;RunCommandDocumentBaseInner&gt;&gt; object if successful.
     */
    public Single<Page<RunCommandDocumentBaseInner>> listSinglePageAsync(@NonNull String location) {
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2018-06-01";
        return service.list(location, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl1<RunCommandDocumentBaseInner>> res) -> res.body());
    }

    /**
     * Gets specific run command for a subscription in a location.
     *
     * @param location The location upon which run commands is queried.
     * @param commandId The command id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the RunCommandDocumentInner object if successful.
     */
    public RunCommandDocumentInner get(@NonNull String location, @NonNull String commandId) {
        return getAsync(location, commandId).blockingGet();
    }

    /**
     * Gets specific run command for a subscription in a location.
     *
     * @param location The location upon which run commands is queried.
     * @param commandId The command id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<RunCommandDocumentInner> getAsync(@NonNull String location, @NonNull String commandId, ServiceCallback<RunCommandDocumentInner> serviceCallback) {
        return ServiceFuture.fromBody(getAsync(location, commandId), serviceCallback);
    }

    /**
     * Gets specific run command for a subscription in a location.
     *
     * @param location The location upon which run commands is queried.
     * @param commandId The command id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<RunCommandDocumentInner>> getWithRestResponseAsync(@NonNull String location, @NonNull String commandId) {
        if (location == null) {
            throw new IllegalArgumentException("Parameter location is required and cannot be null.");
        }
        if (commandId == null) {
            throw new IllegalArgumentException("Parameter commandId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2018-06-01";
        return service.get(location, commandId, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage());
    }

    /**
     * Gets specific run command for a subscription in a location.
     *
     * @param location The location upon which run commands is queried.
     * @param commandId The command id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<RunCommandDocumentInner> getAsync(@NonNull String location, @NonNull String commandId) {
        return getWithRestResponseAsync(location, commandId)
            .flatMapMaybe((BodyResponse<RunCommandDocumentInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Lists all available run commands for a subscription in a location.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;RunCommandDocumentBaseInner&gt; object if successful.
     */
    public PagedList<RunCommandDocumentBaseInner> listNext(@NonNull String nextPageLink) {
        Page<RunCommandDocumentBaseInner> response = listNextSinglePageAsync(nextPageLink).blockingGet();
        return new PagedList<RunCommandDocumentBaseInner>(response) {
            @Override
            public Page<RunCommandDocumentBaseInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Lists all available run commands for a subscription in a location.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;RunCommandDocumentBaseInner&gt; object.
     */
    public Observable<Page<RunCommandDocumentBaseInner>> listNextAsync(@NonNull String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .toObservable()
            .concatMap((Page<RunCommandDocumentBaseInner> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listNextAsync(nextPageLink1));
            });
    }

    /**
     * Lists all available run commands for a subscription in a location.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;RunCommandDocumentBaseInner&gt;&gt; object if successful.
     */
    public Single<Page<RunCommandDocumentBaseInner>> listNextSinglePageAsync(@NonNull String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl1<RunCommandDocumentBaseInner>> res) -> res.body());
    }
}
