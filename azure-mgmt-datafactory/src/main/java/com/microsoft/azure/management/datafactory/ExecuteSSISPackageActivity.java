/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datafactory;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.microsoft.rest.serializer.JsonFlatten;

/**
 * Execute SSIS package activity.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
@JsonTypeName("ExecuteSSISPackage")
@JsonFlatten
public class ExecuteSSISPackageActivity extends ExecutionActivity {
    /**
     * SSIS package location.
     */
    @JsonProperty(value = "typeProperties.packageLocation", required = true)
    private SSISPackageLocation packageLocation;

    /**
     * Specifies the runtime to execute SSIS package. Possible values include:
     * 'x64', 'x86'.
     */
    @JsonProperty(value = "typeProperties.runtime")
    private SSISExecutionRuntime runtime;

    /**
     * The logging level of SSIS package execution.
     */
    @JsonProperty(value = "typeProperties.loggingLevel")
    private String loggingLevel;

    /**
     * The environment path to execution the SSIS package.
     */
    @JsonProperty(value = "typeProperties.environmentPath")
    private String environmentPath;

    /**
     * The integration runtime reference.
     */
    @JsonProperty(value = "typeProperties.connectVia", required = true)
    private IntegrationRuntimeReference connectVia;

    /**
     * Get the packageLocation value.
     *
     * @return the packageLocation value
     */
    public SSISPackageLocation packageLocation() {
        return this.packageLocation;
    }

    /**
     * Set the packageLocation value.
     *
     * @param packageLocation the packageLocation value to set
     * @return the ExecuteSSISPackageActivity object itself.
     */
    public ExecuteSSISPackageActivity withPackageLocation(SSISPackageLocation packageLocation) {
        this.packageLocation = packageLocation;
        return this;
    }

    /**
     * Get the runtime value.
     *
     * @return the runtime value
     */
    public SSISExecutionRuntime runtime() {
        return this.runtime;
    }

    /**
     * Set the runtime value.
     *
     * @param runtime the runtime value to set
     * @return the ExecuteSSISPackageActivity object itself.
     */
    public ExecuteSSISPackageActivity withRuntime(SSISExecutionRuntime runtime) {
        this.runtime = runtime;
        return this;
    }

    /**
     * Get the loggingLevel value.
     *
     * @return the loggingLevel value
     */
    public String loggingLevel() {
        return this.loggingLevel;
    }

    /**
     * Set the loggingLevel value.
     *
     * @param loggingLevel the loggingLevel value to set
     * @return the ExecuteSSISPackageActivity object itself.
     */
    public ExecuteSSISPackageActivity withLoggingLevel(String loggingLevel) {
        this.loggingLevel = loggingLevel;
        return this;
    }

    /**
     * Get the environmentPath value.
     *
     * @return the environmentPath value
     */
    public String environmentPath() {
        return this.environmentPath;
    }

    /**
     * Set the environmentPath value.
     *
     * @param environmentPath the environmentPath value to set
     * @return the ExecuteSSISPackageActivity object itself.
     */
    public ExecuteSSISPackageActivity withEnvironmentPath(String environmentPath) {
        this.environmentPath = environmentPath;
        return this;
    }

    /**
     * Get the connectVia value.
     *
     * @return the connectVia value
     */
    public IntegrationRuntimeReference connectVia() {
        return this.connectVia;
    }

    /**
     * Set the connectVia value.
     *
     * @param connectVia the connectVia value to set
     * @return the ExecuteSSISPackageActivity object itself.
     */
    public ExecuteSSISPackageActivity withConnectVia(IntegrationRuntimeReference connectVia) {
        this.connectVia = connectVia;
        return this;
    }

}
