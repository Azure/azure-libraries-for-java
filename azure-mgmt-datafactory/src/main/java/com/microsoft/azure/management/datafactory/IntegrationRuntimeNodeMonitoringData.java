/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datafactory;

import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Monitoring data for integration runtime node.
 */
public class IntegrationRuntimeNodeMonitoringData {
    /**
     * Unmatched properties from the message are deserialized this collection.
     */
    @JsonProperty(value = "")
    private Map<String, Object> additionalProperties;

    /**
     * Name of the integration runtime node.
     */
    @JsonProperty(value = "nodeName", access = JsonProperty.Access.WRITE_ONLY)
    private String nodeName;

    /**
     * Available memory (MB) on the integration runtime node.
     */
    @JsonProperty(value = "availableMemoryInMB", access = JsonProperty.Access.WRITE_ONLY)
    private Integer availableMemoryInMB;

    /**
     * CPU percentage on the integration runtime node.
     */
    @JsonProperty(value = "cpuUtilization", access = JsonProperty.Access.WRITE_ONLY)
    private Double cpuUtilization;

    /**
     * Maximum concurrent jobs on the integration runtime node.
     */
    @JsonProperty(value = "concurrentJobsLimit", access = JsonProperty.Access.WRITE_ONLY)
    private Integer concurrentJobsLimit;

    /**
     * The number of jobs currently running on the integration runtime node.
     */
    @JsonProperty(value = "concurrentJobsRunning", access = JsonProperty.Access.WRITE_ONLY)
    private Integer concurrentJobsRunning;

    /**
     * The maximum concurrent jobs in this integration runtime.
     */
    @JsonProperty(value = "maxConcurrentJobs", access = JsonProperty.Access.WRITE_ONLY)
    private Integer maxConcurrentJobs;

    /**
     * Sent bytes on the integration runtime node.
     */
    @JsonProperty(value = "sentBytes", access = JsonProperty.Access.WRITE_ONLY)
    private Double sentBytes;

    /**
     * Received bytes on the integration runtime node.
     */
    @JsonProperty(value = "receivedBytes", access = JsonProperty.Access.WRITE_ONLY)
    private Double receivedBytes;

    /**
     * Get the additionalProperties value.
     *
     * @return the additionalProperties value
     */
    public Map<String, Object> additionalProperties() {
        return this.additionalProperties;
    }

    /**
     * Set the additionalProperties value.
     *
     * @param additionalProperties the additionalProperties value to set
     * @return the IntegrationRuntimeNodeMonitoringData object itself.
     */
    public IntegrationRuntimeNodeMonitoringData withAdditionalProperties(Map<String, Object> additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }

    /**
     * Get the nodeName value.
     *
     * @return the nodeName value
     */
    public String nodeName() {
        return this.nodeName;
    }

    /**
     * Get the availableMemoryInMB value.
     *
     * @return the availableMemoryInMB value
     */
    public Integer availableMemoryInMB() {
        return this.availableMemoryInMB;
    }

    /**
     * Get the cpuUtilization value.
     *
     * @return the cpuUtilization value
     */
    public Double cpuUtilization() {
        return this.cpuUtilization;
    }

    /**
     * Get the concurrentJobsLimit value.
     *
     * @return the concurrentJobsLimit value
     */
    public Integer concurrentJobsLimit() {
        return this.concurrentJobsLimit;
    }

    /**
     * Get the concurrentJobsRunning value.
     *
     * @return the concurrentJobsRunning value
     */
    public Integer concurrentJobsRunning() {
        return this.concurrentJobsRunning;
    }

    /**
     * Get the maxConcurrentJobs value.
     *
     * @return the maxConcurrentJobs value
     */
    public Integer maxConcurrentJobs() {
        return this.maxConcurrentJobs;
    }

    /**
     * Get the sentBytes value.
     *
     * @return the sentBytes value
     */
    public Double sentBytes() {
        return this.sentBytes;
    }

    /**
     * Get the receivedBytes value.
     *
     * @return the receivedBytes value
     */
    public Double receivedBytes() {
        return this.receivedBytes;
    }

}
