/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.dns.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceCall;
import com.microsoft.azure.AzureServiceResponseBuilder;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.dns.RecordType;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in RecordSets.
 */
public final class RecordSetsInner {
    /** The Retrofit service to perform REST calls. */
    private RecordSetsService service;
    /** The service client containing this operation class. */
    private DnsManagementClientImpl client;

    /**
     * Initializes an instance of RecordSetsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public RecordSetsInner(Retrofit retrofit, DnsManagementClientImpl client) {
        this.service = retrofit.create(RecordSetsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for RecordSets to be
     * used by Retrofit to perform actually REST calls.
     */
    interface RecordSetsService {
        @Headers("Content-Type: application/json; charset=utf-8")
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnszones/{zoneName}/{recordType}/{relativeRecordSetName}")
        Observable<Response<ResponseBody>> update(@Path("resourceGroupName") String resourceGroupName, @Path("zoneName") String zoneName, @Path(value = "relativeRecordSetName", encoded = true) String relativeRecordSetName, @Path("recordType") RecordType recordType, @Path("subscriptionId") String subscriptionId, @Body RecordSetInner parameters, @Header("If-Match") String ifMatch, @Header("If-None-Match") String ifNoneMatch, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnszones/{zoneName}/{recordType}/{relativeRecordSetName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("zoneName") String zoneName, @Path(value = "relativeRecordSetName", encoded = true) String relativeRecordSetName, @Path("recordType") RecordType recordType, @Path("subscriptionId") String subscriptionId, @Body RecordSetInner parameters, @Header("If-Match") String ifMatch, @Header("If-None-Match") String ifNoneMatch, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnszones/{zoneName}/{recordType}/{relativeRecordSetName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("zoneName") String zoneName, @Path(value = "relativeRecordSetName", encoded = true) String relativeRecordSetName, @Path("recordType") RecordType recordType, @Path("subscriptionId") String subscriptionId, @Header("If-Match") String ifMatch, @Header("If-None-Match") String ifNoneMatch, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnszones/{zoneName}/{recordType}/{relativeRecordSetName}")
        Observable<Response<ResponseBody>> get(@Path("resourceGroupName") String resourceGroupName, @Path("zoneName") String zoneName, @Path(value = "relativeRecordSetName", encoded = true) String relativeRecordSetName, @Path("recordType") RecordType recordType, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnszones/{zoneName}/{recordType}")
        Observable<Response<ResponseBody>> listByType(@Path("resourceGroupName") String resourceGroupName, @Path("zoneName") String zoneName, @Path("recordType") RecordType recordType, @Path("subscriptionId") String subscriptionId, @Query("$top") String top, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnszones/{zoneName}/recordsets")
        Observable<Response<ResponseBody>> listAllInResourceGroup(@Path("resourceGroupName") String resourceGroupName, @Path("zoneName") String zoneName, @Path("subscriptionId") String subscriptionId, @Query("$top") String top, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("{nextLink}")
        Observable<Response<ResponseBody>> listByTypeNext(@Path(value = "nextLink", encoded = true) String nextPageLink, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("{nextLink}")
        Observable<Response<ResponseBody>> listAllInResourceGroupNext(@Path(value = "nextLink", encoded = true) String nextPageLink, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Updates a RecordSet within a DNS zone.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param relativeRecordSetName The name of the RecordSet, relative to the name of the zone.
     * @param recordType The type of DNS record. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param parameters Parameters supplied to the Update operation.
     * @return the RecordSetInner object if successful.
     */
    public RecordSetInner update(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, RecordSetInner parameters) {
        return updateWithServiceResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters).toBlocking().single().getBody();
    }

    /**
     * Updates a RecordSet within a DNS zone.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param relativeRecordSetName The name of the RecordSet, relative to the name of the zone.
     * @param recordType The type of DNS record. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param parameters Parameters supplied to the Update operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<RecordSetInner> updateAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, RecordSetInner parameters, final ServiceCallback<RecordSetInner> serviceCallback) {
        return ServiceCall.create(updateWithServiceResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters), serviceCallback);
    }

    /**
     * Updates a RecordSet within a DNS zone.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param relativeRecordSetName The name of the RecordSet, relative to the name of the zone.
     * @param recordType The type of DNS record. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param parameters Parameters supplied to the Update operation.
     * @return the observable to the RecordSetInner object
     */
    public Observable<RecordSetInner> updateAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, RecordSetInner parameters) {
        return updateWithServiceResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters).map(new Func1<ServiceResponse<RecordSetInner>, RecordSetInner>() {
            @Override
            public RecordSetInner call(ServiceResponse<RecordSetInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Updates a RecordSet within a DNS zone.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param relativeRecordSetName The name of the RecordSet, relative to the name of the zone.
     * @param recordType The type of DNS record. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param parameters Parameters supplied to the Update operation.
     * @return the observable to the RecordSetInner object
     */
    public Observable<ServiceResponse<RecordSetInner>> updateWithServiceResponseAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, RecordSetInner parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (zoneName == null) {
            throw new IllegalArgumentException("Parameter zoneName is required and cannot be null.");
        }
        if (relativeRecordSetName == null) {
            throw new IllegalArgumentException("Parameter relativeRecordSetName is required and cannot be null.");
        }
        if (recordType == null) {
            throw new IllegalArgumentException("Parameter recordType is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return service.update(resourceGroupName, zoneName, relativeRecordSetName, recordType, this.client.subscriptionId(), parameters, ifMatch, ifNoneMatch, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RecordSetInner>>>() {
                @Override
                public Observable<ServiceResponse<RecordSetInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RecordSetInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Updates a RecordSet within a DNS zone.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param relativeRecordSetName The name of the RecordSet, relative to the name of the zone.
     * @param recordType The type of DNS record. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param parameters Parameters supplied to the Update operation.
     * @param ifMatch The etag of Zone.
     * @param ifNoneMatch Defines the If-None-Match condition. Set to '*' to force Create-If-Not-Exist. Other values will be ignored.
     * @return the RecordSetInner object if successful.
     */
    public RecordSetInner update(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, RecordSetInner parameters, String ifMatch, String ifNoneMatch) {
        return updateWithServiceResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, ifMatch, ifNoneMatch).toBlocking().single().getBody();
    }

    /**
     * Updates a RecordSet within a DNS zone.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param relativeRecordSetName The name of the RecordSet, relative to the name of the zone.
     * @param recordType The type of DNS record. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param parameters Parameters supplied to the Update operation.
     * @param ifMatch The etag of Zone.
     * @param ifNoneMatch Defines the If-None-Match condition. Set to '*' to force Create-If-Not-Exist. Other values will be ignored.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<RecordSetInner> updateAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, RecordSetInner parameters, String ifMatch, String ifNoneMatch, final ServiceCallback<RecordSetInner> serviceCallback) {
        return ServiceCall.create(updateWithServiceResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, ifMatch, ifNoneMatch), serviceCallback);
    }

    /**
     * Updates a RecordSet within a DNS zone.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param relativeRecordSetName The name of the RecordSet, relative to the name of the zone.
     * @param recordType The type of DNS record. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param parameters Parameters supplied to the Update operation.
     * @param ifMatch The etag of Zone.
     * @param ifNoneMatch Defines the If-None-Match condition. Set to '*' to force Create-If-Not-Exist. Other values will be ignored.
     * @return the observable to the RecordSetInner object
     */
    public Observable<RecordSetInner> updateAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, RecordSetInner parameters, String ifMatch, String ifNoneMatch) {
        return updateWithServiceResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, ifMatch, ifNoneMatch).map(new Func1<ServiceResponse<RecordSetInner>, RecordSetInner>() {
            @Override
            public RecordSetInner call(ServiceResponse<RecordSetInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Updates a RecordSet within a DNS zone.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param relativeRecordSetName The name of the RecordSet, relative to the name of the zone.
     * @param recordType The type of DNS record. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param parameters Parameters supplied to the Update operation.
     * @param ifMatch The etag of Zone.
     * @param ifNoneMatch Defines the If-None-Match condition. Set to '*' to force Create-If-Not-Exist. Other values will be ignored.
     * @return the observable to the RecordSetInner object
     */
    public Observable<ServiceResponse<RecordSetInner>> updateWithServiceResponseAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, RecordSetInner parameters, String ifMatch, String ifNoneMatch) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (zoneName == null) {
            throw new IllegalArgumentException("Parameter zoneName is required and cannot be null.");
        }
        if (relativeRecordSetName == null) {
            throw new IllegalArgumentException("Parameter relativeRecordSetName is required and cannot be null.");
        }
        if (recordType == null) {
            throw new IllegalArgumentException("Parameter recordType is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.update(resourceGroupName, zoneName, relativeRecordSetName, recordType, this.client.subscriptionId(), parameters, ifMatch, ifNoneMatch, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RecordSetInner>>>() {
                @Override
                public Observable<ServiceResponse<RecordSetInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RecordSetInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RecordSetInner> updateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<RecordSetInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<RecordSetInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates or Updates a RecordSet within a DNS zone.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param relativeRecordSetName The name of the RecordSet, relative to the name of the zone.
     * @param recordType The type of DNS record. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @return the RecordSetInner object if successful.
     */
    public RecordSetInner createOrUpdate(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, RecordSetInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters).toBlocking().single().getBody();
    }

    /**
     * Creates or Updates a RecordSet within a DNS zone.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param relativeRecordSetName The name of the RecordSet, relative to the name of the zone.
     * @param recordType The type of DNS record. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<RecordSetInner> createOrUpdateAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, RecordSetInner parameters, final ServiceCallback<RecordSetInner> serviceCallback) {
        return ServiceCall.create(createOrUpdateWithServiceResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters), serviceCallback);
    }

    /**
     * Creates or Updates a RecordSet within a DNS zone.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param relativeRecordSetName The name of the RecordSet, relative to the name of the zone.
     * @param recordType The type of DNS record. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @return the observable to the RecordSetInner object
     */
    public Observable<RecordSetInner> createOrUpdateAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, RecordSetInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters).map(new Func1<ServiceResponse<RecordSetInner>, RecordSetInner>() {
            @Override
            public RecordSetInner call(ServiceResponse<RecordSetInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Creates or Updates a RecordSet within a DNS zone.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param relativeRecordSetName The name of the RecordSet, relative to the name of the zone.
     * @param recordType The type of DNS record. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @return the observable to the RecordSetInner object
     */
    public Observable<ServiceResponse<RecordSetInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, RecordSetInner parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (zoneName == null) {
            throw new IllegalArgumentException("Parameter zoneName is required and cannot be null.");
        }
        if (relativeRecordSetName == null) {
            throw new IllegalArgumentException("Parameter relativeRecordSetName is required and cannot be null.");
        }
        if (recordType == null) {
            throw new IllegalArgumentException("Parameter recordType is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return service.createOrUpdate(resourceGroupName, zoneName, relativeRecordSetName, recordType, this.client.subscriptionId(), parameters, ifMatch, ifNoneMatch, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RecordSetInner>>>() {
                @Override
                public Observable<ServiceResponse<RecordSetInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RecordSetInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates or Updates a RecordSet within a DNS zone.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param relativeRecordSetName The name of the RecordSet, relative to the name of the zone.
     * @param recordType The type of DNS record. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch The etag of Recordset.
     * @param ifNoneMatch Defines the If-None-Match condition. Set to '*' to force Create-If-Not-Exist. Other values will be ignored.
     * @return the RecordSetInner object if successful.
     */
    public RecordSetInner createOrUpdate(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, RecordSetInner parameters, String ifMatch, String ifNoneMatch) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, ifMatch, ifNoneMatch).toBlocking().single().getBody();
    }

    /**
     * Creates or Updates a RecordSet within a DNS zone.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param relativeRecordSetName The name of the RecordSet, relative to the name of the zone.
     * @param recordType The type of DNS record. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch The etag of Recordset.
     * @param ifNoneMatch Defines the If-None-Match condition. Set to '*' to force Create-If-Not-Exist. Other values will be ignored.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<RecordSetInner> createOrUpdateAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, RecordSetInner parameters, String ifMatch, String ifNoneMatch, final ServiceCallback<RecordSetInner> serviceCallback) {
        return ServiceCall.create(createOrUpdateWithServiceResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, ifMatch, ifNoneMatch), serviceCallback);
    }

    /**
     * Creates or Updates a RecordSet within a DNS zone.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param relativeRecordSetName The name of the RecordSet, relative to the name of the zone.
     * @param recordType The type of DNS record. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch The etag of Recordset.
     * @param ifNoneMatch Defines the If-None-Match condition. Set to '*' to force Create-If-Not-Exist. Other values will be ignored.
     * @return the observable to the RecordSetInner object
     */
    public Observable<RecordSetInner> createOrUpdateAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, RecordSetInner parameters, String ifMatch, String ifNoneMatch) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, ifMatch, ifNoneMatch).map(new Func1<ServiceResponse<RecordSetInner>, RecordSetInner>() {
            @Override
            public RecordSetInner call(ServiceResponse<RecordSetInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Creates or Updates a RecordSet within a DNS zone.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param relativeRecordSetName The name of the RecordSet, relative to the name of the zone.
     * @param recordType The type of DNS record. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch The etag of Recordset.
     * @param ifNoneMatch Defines the If-None-Match condition. Set to '*' to force Create-If-Not-Exist. Other values will be ignored.
     * @return the observable to the RecordSetInner object
     */
    public Observable<ServiceResponse<RecordSetInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, RecordSetInner parameters, String ifMatch, String ifNoneMatch) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (zoneName == null) {
            throw new IllegalArgumentException("Parameter zoneName is required and cannot be null.");
        }
        if (relativeRecordSetName == null) {
            throw new IllegalArgumentException("Parameter relativeRecordSetName is required and cannot be null.");
        }
        if (recordType == null) {
            throw new IllegalArgumentException("Parameter recordType is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.createOrUpdate(resourceGroupName, zoneName, relativeRecordSetName, recordType, this.client.subscriptionId(), parameters, ifMatch, ifNoneMatch, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RecordSetInner>>>() {
                @Override
                public Observable<ServiceResponse<RecordSetInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RecordSetInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RecordSetInner> createOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<RecordSetInner, CloudException>(this.client.mapperAdapter())
                .register(201, new TypeToken<RecordSetInner>() { }.getType())
                .register(200, new TypeToken<RecordSetInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Removes a RecordSet from a DNS zone.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param relativeRecordSetName The name of the RecordSet, relative to the name of the zone.
     * @param recordType The type of DNS record. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     */
    public void delete(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType) {
        deleteWithServiceResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType).toBlocking().single().getBody();
    }

    /**
     * Removes a RecordSet from a DNS zone.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param relativeRecordSetName The name of the RecordSet, relative to the name of the zone.
     * @param recordType The type of DNS record. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> deleteAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(deleteWithServiceResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType), serviceCallback);
    }

    /**
     * Removes a RecordSet from a DNS zone.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param relativeRecordSetName The name of the RecordSet, relative to the name of the zone.
     * @param recordType The type of DNS record. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType) {
        return deleteWithServiceResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Removes a RecordSet from a DNS zone.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param relativeRecordSetName The name of the RecordSet, relative to the name of the zone.
     * @param recordType The type of DNS record. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (zoneName == null) {
            throw new IllegalArgumentException("Parameter zoneName is required and cannot be null.");
        }
        if (relativeRecordSetName == null) {
            throw new IllegalArgumentException("Parameter relativeRecordSetName is required and cannot be null.");
        }
        if (recordType == null) {
            throw new IllegalArgumentException("Parameter recordType is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return service.delete(resourceGroupName, zoneName, relativeRecordSetName, recordType, this.client.subscriptionId(), ifMatch, ifNoneMatch, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Removes a RecordSet from a DNS zone.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param relativeRecordSetName The name of the RecordSet, relative to the name of the zone.
     * @param recordType The type of DNS record. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param ifMatch Defines the If-Match condition. The delete operation will be performed only if the ETag of the zone on the server matches this value.
     * @param ifNoneMatch Defines the If-None-Match condition. The delete operation will be performed only if the ETag of the zone on the server does not match this value.
     */
    public void delete(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, String ifMatch, String ifNoneMatch) {
        deleteWithServiceResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, ifMatch, ifNoneMatch).toBlocking().single().getBody();
    }

    /**
     * Removes a RecordSet from a DNS zone.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param relativeRecordSetName The name of the RecordSet, relative to the name of the zone.
     * @param recordType The type of DNS record. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param ifMatch Defines the If-Match condition. The delete operation will be performed only if the ETag of the zone on the server matches this value.
     * @param ifNoneMatch Defines the If-None-Match condition. The delete operation will be performed only if the ETag of the zone on the server does not match this value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> deleteAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, String ifMatch, String ifNoneMatch, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(deleteWithServiceResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, ifMatch, ifNoneMatch), serviceCallback);
    }

    /**
     * Removes a RecordSet from a DNS zone.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param relativeRecordSetName The name of the RecordSet, relative to the name of the zone.
     * @param recordType The type of DNS record. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param ifMatch Defines the If-Match condition. The delete operation will be performed only if the ETag of the zone on the server matches this value.
     * @param ifNoneMatch Defines the If-None-Match condition. The delete operation will be performed only if the ETag of the zone on the server does not match this value.
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, String ifMatch, String ifNoneMatch) {
        return deleteWithServiceResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, ifMatch, ifNoneMatch).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Removes a RecordSet from a DNS zone.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param relativeRecordSetName The name of the RecordSet, relative to the name of the zone.
     * @param recordType The type of DNS record. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param ifMatch Defines the If-Match condition. The delete operation will be performed only if the ETag of the zone on the server matches this value.
     * @param ifNoneMatch Defines the If-None-Match condition. The delete operation will be performed only if the ETag of the zone on the server does not match this value.
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, String ifMatch, String ifNoneMatch) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (zoneName == null) {
            throw new IllegalArgumentException("Parameter zoneName is required and cannot be null.");
        }
        if (relativeRecordSetName == null) {
            throw new IllegalArgumentException("Parameter relativeRecordSetName is required and cannot be null.");
        }
        if (recordType == null) {
            throw new IllegalArgumentException("Parameter recordType is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(resourceGroupName, zoneName, relativeRecordSetName, recordType, this.client.subscriptionId(), ifMatch, ifNoneMatch, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<Void, CloudException>(this.client.mapperAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .register(200, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets a RecordSet.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param relativeRecordSetName The name of the RecordSet, relative to the name of the zone.
     * @param recordType The type of DNS record. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @return the RecordSetInner object if successful.
     */
    public RecordSetInner get(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType) {
        return getWithServiceResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType).toBlocking().single().getBody();
    }

    /**
     * Gets a RecordSet.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param relativeRecordSetName The name of the RecordSet, relative to the name of the zone.
     * @param recordType The type of DNS record. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<RecordSetInner> getAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType, final ServiceCallback<RecordSetInner> serviceCallback) {
        return ServiceCall.create(getWithServiceResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType), serviceCallback);
    }

    /**
     * Gets a RecordSet.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param relativeRecordSetName The name of the RecordSet, relative to the name of the zone.
     * @param recordType The type of DNS record. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @return the observable to the RecordSetInner object
     */
    public Observable<RecordSetInner> getAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType) {
        return getWithServiceResponseAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType).map(new Func1<ServiceResponse<RecordSetInner>, RecordSetInner>() {
            @Override
            public RecordSetInner call(ServiceResponse<RecordSetInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Gets a RecordSet.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param relativeRecordSetName The name of the RecordSet, relative to the name of the zone.
     * @param recordType The type of DNS record. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @return the observable to the RecordSetInner object
     */
    public Observable<ServiceResponse<RecordSetInner>> getWithServiceResponseAsync(String resourceGroupName, String zoneName, String relativeRecordSetName, RecordType recordType) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (zoneName == null) {
            throw new IllegalArgumentException("Parameter zoneName is required and cannot be null.");
        }
        if (relativeRecordSetName == null) {
            throw new IllegalArgumentException("Parameter relativeRecordSetName is required and cannot be null.");
        }
        if (recordType == null) {
            throw new IllegalArgumentException("Parameter recordType is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(resourceGroupName, zoneName, relativeRecordSetName, recordType, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<RecordSetInner>>>() {
                @Override
                public Observable<ServiceResponse<RecordSetInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<RecordSetInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<RecordSetInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<RecordSetInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<RecordSetInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists the RecordSets of a specified type in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group that contains the zone.
     * @param zoneName The name of the zone from which to enumerate RecordsSets.
     * @param recordType The type of record sets to enumerate. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @return the PagedList&lt;RecordSetInner&gt; object if successful.
     */
    public PagedList<RecordSetInner> listByType(final String resourceGroupName, final String zoneName, final RecordType recordType) {
        ServiceResponse<Page<RecordSetInner>> response = listByTypeSinglePageAsync(resourceGroupName, zoneName, recordType).toBlocking().single();
        return new PagedList<RecordSetInner>(response.getBody()) {
            @Override
            public Page<RecordSetInner> nextPage(String nextPageLink) {
                return listByTypeNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Lists the RecordSets of a specified type in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group that contains the zone.
     * @param zoneName The name of the zone from which to enumerate RecordsSets.
     * @param recordType The type of record sets to enumerate. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<RecordSetInner>> listByTypeAsync(final String resourceGroupName, final String zoneName, final RecordType recordType, final ListOperationCallback<RecordSetInner> serviceCallback) {
        return AzureServiceCall.create(
            listByTypeSinglePageAsync(resourceGroupName, zoneName, recordType),
            new Func1<String, Observable<ServiceResponse<Page<RecordSetInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecordSetInner>>> call(String nextPageLink) {
                    return listByTypeNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the RecordSets of a specified type in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group that contains the zone.
     * @param zoneName The name of the zone from which to enumerate RecordsSets.
     * @param recordType The type of record sets to enumerate. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @return the observable to the PagedList&lt;RecordSetInner&gt; object
     */
    public Observable<Page<RecordSetInner>> listByTypeAsync(final String resourceGroupName, final String zoneName, final RecordType recordType) {
        return listByTypeWithServiceResponseAsync(resourceGroupName, zoneName, recordType)
            .map(new Func1<ServiceResponse<Page<RecordSetInner>>, Page<RecordSetInner>>() {
                @Override
                public Page<RecordSetInner> call(ServiceResponse<Page<RecordSetInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Lists the RecordSets of a specified type in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group that contains the zone.
     * @param zoneName The name of the zone from which to enumerate RecordsSets.
     * @param recordType The type of record sets to enumerate. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @return the observable to the PagedList&lt;RecordSetInner&gt; object
     */
    public Observable<ServiceResponse<Page<RecordSetInner>>> listByTypeWithServiceResponseAsync(final String resourceGroupName, final String zoneName, final RecordType recordType) {
        return listByTypeSinglePageAsync(resourceGroupName, zoneName, recordType)
            .concatMap(new Func1<ServiceResponse<Page<RecordSetInner>>, Observable<ServiceResponse<Page<RecordSetInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecordSetInner>>> call(ServiceResponse<Page<RecordSetInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByTypeNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the RecordSets of a specified type in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group that contains the zone.
     * @param zoneName The name of the zone from which to enumerate RecordsSets.
     * @param recordType The type of record sets to enumerate. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @return the PagedList&lt;RecordSetInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RecordSetInner>>> listByTypeSinglePageAsync(final String resourceGroupName, final String zoneName, final RecordType recordType) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (zoneName == null) {
            throw new IllegalArgumentException("Parameter zoneName is required and cannot be null.");
        }
        if (recordType == null) {
            throw new IllegalArgumentException("Parameter recordType is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String top = null;
        return service.listByType(resourceGroupName, zoneName, recordType, this.client.subscriptionId(), top, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RecordSetInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecordSetInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RecordSetInner>> result = listByTypeDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RecordSetInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the RecordSets of a specified type in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group that contains the zone.
     * @param zoneName The name of the zone from which to enumerate RecordsSets.
     * @param recordType The type of record sets to enumerate. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param top Query parameters. If null is passed returns the default number of zones.
     * @return the PagedList&lt;RecordSetInner&gt; object if successful.
     */
    public PagedList<RecordSetInner> listByType(final String resourceGroupName, final String zoneName, final RecordType recordType, final String top) {
        ServiceResponse<Page<RecordSetInner>> response = listByTypeSinglePageAsync(resourceGroupName, zoneName, recordType, top).toBlocking().single();
        return new PagedList<RecordSetInner>(response.getBody()) {
            @Override
            public Page<RecordSetInner> nextPage(String nextPageLink) {
                return listByTypeNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Lists the RecordSets of a specified type in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group that contains the zone.
     * @param zoneName The name of the zone from which to enumerate RecordsSets.
     * @param recordType The type of record sets to enumerate. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param top Query parameters. If null is passed returns the default number of zones.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<RecordSetInner>> listByTypeAsync(final String resourceGroupName, final String zoneName, final RecordType recordType, final String top, final ListOperationCallback<RecordSetInner> serviceCallback) {
        return AzureServiceCall.create(
            listByTypeSinglePageAsync(resourceGroupName, zoneName, recordType, top),
            new Func1<String, Observable<ServiceResponse<Page<RecordSetInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecordSetInner>>> call(String nextPageLink) {
                    return listByTypeNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the RecordSets of a specified type in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group that contains the zone.
     * @param zoneName The name of the zone from which to enumerate RecordsSets.
     * @param recordType The type of record sets to enumerate. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param top Query parameters. If null is passed returns the default number of zones.
     * @return the observable to the PagedList&lt;RecordSetInner&gt; object
     */
    public Observable<Page<RecordSetInner>> listByTypeAsync(final String resourceGroupName, final String zoneName, final RecordType recordType, final String top) {
        return listByTypeWithServiceResponseAsync(resourceGroupName, zoneName, recordType, top)
            .map(new Func1<ServiceResponse<Page<RecordSetInner>>, Page<RecordSetInner>>() {
                @Override
                public Page<RecordSetInner> call(ServiceResponse<Page<RecordSetInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Lists the RecordSets of a specified type in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group that contains the zone.
     * @param zoneName The name of the zone from which to enumerate RecordsSets.
     * @param recordType The type of record sets to enumerate. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
     * @param top Query parameters. If null is passed returns the default number of zones.
     * @return the observable to the PagedList&lt;RecordSetInner&gt; object
     */
    public Observable<ServiceResponse<Page<RecordSetInner>>> listByTypeWithServiceResponseAsync(final String resourceGroupName, final String zoneName, final RecordType recordType, final String top) {
        return listByTypeSinglePageAsync(resourceGroupName, zoneName, recordType, top)
            .concatMap(new Func1<ServiceResponse<Page<RecordSetInner>>, Observable<ServiceResponse<Page<RecordSetInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecordSetInner>>> call(ServiceResponse<Page<RecordSetInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByTypeNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the RecordSets of a specified type in a DNS zone.
     *
    ServiceResponse<PageImpl<RecordSetInner>> * @param resourceGroupName The name of the resource group that contains the zone.
    ServiceResponse<PageImpl<RecordSetInner>> * @param zoneName The name of the zone from which to enumerate RecordsSets.
    ServiceResponse<PageImpl<RecordSetInner>> * @param recordType The type of record sets to enumerate. Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
    ServiceResponse<PageImpl<RecordSetInner>> * @param top Query parameters. If null is passed returns the default number of zones.
     * @return the PagedList&lt;RecordSetInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RecordSetInner>>> listByTypeSinglePageAsync(final String resourceGroupName, final String zoneName, final RecordType recordType, final String top) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (zoneName == null) {
            throw new IllegalArgumentException("Parameter zoneName is required and cannot be null.");
        }
        if (recordType == null) {
            throw new IllegalArgumentException("Parameter recordType is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByType(resourceGroupName, zoneName, recordType, this.client.subscriptionId(), top, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RecordSetInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecordSetInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RecordSetInner>> result = listByTypeDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RecordSetInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RecordSetInner>> listByTypeDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<RecordSetInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<RecordSetInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists all RecordSets in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group that contains the zone.
     * @param zoneName The name of the zone from which to enumerate RecordSets.
     * @return the PagedList&lt;RecordSetInner&gt; object if successful.
     */
    public PagedList<RecordSetInner> listAllInResourceGroup(final String resourceGroupName, final String zoneName) {
        ServiceResponse<Page<RecordSetInner>> response = listAllInResourceGroupSinglePageAsync(resourceGroupName, zoneName).toBlocking().single();
        return new PagedList<RecordSetInner>(response.getBody()) {
            @Override
            public Page<RecordSetInner> nextPage(String nextPageLink) {
                return listAllInResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Lists all RecordSets in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group that contains the zone.
     * @param zoneName The name of the zone from which to enumerate RecordSets.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<RecordSetInner>> listAllInResourceGroupAsync(final String resourceGroupName, final String zoneName, final ListOperationCallback<RecordSetInner> serviceCallback) {
        return AzureServiceCall.create(
            listAllInResourceGroupSinglePageAsync(resourceGroupName, zoneName),
            new Func1<String, Observable<ServiceResponse<Page<RecordSetInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecordSetInner>>> call(String nextPageLink) {
                    return listAllInResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all RecordSets in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group that contains the zone.
     * @param zoneName The name of the zone from which to enumerate RecordSets.
     * @return the observable to the PagedList&lt;RecordSetInner&gt; object
     */
    public Observable<Page<RecordSetInner>> listAllInResourceGroupAsync(final String resourceGroupName, final String zoneName) {
        return listAllInResourceGroupWithServiceResponseAsync(resourceGroupName, zoneName)
            .map(new Func1<ServiceResponse<Page<RecordSetInner>>, Page<RecordSetInner>>() {
                @Override
                public Page<RecordSetInner> call(ServiceResponse<Page<RecordSetInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Lists all RecordSets in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group that contains the zone.
     * @param zoneName The name of the zone from which to enumerate RecordSets.
     * @return the observable to the PagedList&lt;RecordSetInner&gt; object
     */
    public Observable<ServiceResponse<Page<RecordSetInner>>> listAllInResourceGroupWithServiceResponseAsync(final String resourceGroupName, final String zoneName) {
        return listAllInResourceGroupSinglePageAsync(resourceGroupName, zoneName)
            .concatMap(new Func1<ServiceResponse<Page<RecordSetInner>>, Observable<ServiceResponse<Page<RecordSetInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecordSetInner>>> call(ServiceResponse<Page<RecordSetInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listAllInResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all RecordSets in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group that contains the zone.
     * @param zoneName The name of the zone from which to enumerate RecordSets.
     * @return the PagedList&lt;RecordSetInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RecordSetInner>>> listAllInResourceGroupSinglePageAsync(final String resourceGroupName, final String zoneName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (zoneName == null) {
            throw new IllegalArgumentException("Parameter zoneName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String top = null;
        return service.listAllInResourceGroup(resourceGroupName, zoneName, this.client.subscriptionId(), top, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RecordSetInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecordSetInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RecordSetInner>> result = listAllInResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RecordSetInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists all RecordSets in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group that contains the zone.
     * @param zoneName The name of the zone from which to enumerate RecordSets.
     * @param top Query parameters. If null is passed returns the default number of zones.
     * @return the PagedList&lt;RecordSetInner&gt; object if successful.
     */
    public PagedList<RecordSetInner> listAllInResourceGroup(final String resourceGroupName, final String zoneName, final String top) {
        ServiceResponse<Page<RecordSetInner>> response = listAllInResourceGroupSinglePageAsync(resourceGroupName, zoneName, top).toBlocking().single();
        return new PagedList<RecordSetInner>(response.getBody()) {
            @Override
            public Page<RecordSetInner> nextPage(String nextPageLink) {
                return listAllInResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Lists all RecordSets in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group that contains the zone.
     * @param zoneName The name of the zone from which to enumerate RecordSets.
     * @param top Query parameters. If null is passed returns the default number of zones.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<RecordSetInner>> listAllInResourceGroupAsync(final String resourceGroupName, final String zoneName, final String top, final ListOperationCallback<RecordSetInner> serviceCallback) {
        return AzureServiceCall.create(
            listAllInResourceGroupSinglePageAsync(resourceGroupName, zoneName, top),
            new Func1<String, Observable<ServiceResponse<Page<RecordSetInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecordSetInner>>> call(String nextPageLink) {
                    return listAllInResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all RecordSets in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group that contains the zone.
     * @param zoneName The name of the zone from which to enumerate RecordSets.
     * @param top Query parameters. If null is passed returns the default number of zones.
     * @return the observable to the PagedList&lt;RecordSetInner&gt; object
     */
    public Observable<Page<RecordSetInner>> listAllInResourceGroupAsync(final String resourceGroupName, final String zoneName, final String top) {
        return listAllInResourceGroupWithServiceResponseAsync(resourceGroupName, zoneName, top)
            .map(new Func1<ServiceResponse<Page<RecordSetInner>>, Page<RecordSetInner>>() {
                @Override
                public Page<RecordSetInner> call(ServiceResponse<Page<RecordSetInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Lists all RecordSets in a DNS zone.
     *
     * @param resourceGroupName The name of the resource group that contains the zone.
     * @param zoneName The name of the zone from which to enumerate RecordSets.
     * @param top Query parameters. If null is passed returns the default number of zones.
     * @return the observable to the PagedList&lt;RecordSetInner&gt; object
     */
    public Observable<ServiceResponse<Page<RecordSetInner>>> listAllInResourceGroupWithServiceResponseAsync(final String resourceGroupName, final String zoneName, final String top) {
        return listAllInResourceGroupSinglePageAsync(resourceGroupName, zoneName, top)
            .concatMap(new Func1<ServiceResponse<Page<RecordSetInner>>, Observable<ServiceResponse<Page<RecordSetInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecordSetInner>>> call(ServiceResponse<Page<RecordSetInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listAllInResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all RecordSets in a DNS zone.
     *
    ServiceResponse<PageImpl<RecordSetInner>> * @param resourceGroupName The name of the resource group that contains the zone.
    ServiceResponse<PageImpl<RecordSetInner>> * @param zoneName The name of the zone from which to enumerate RecordSets.
    ServiceResponse<PageImpl<RecordSetInner>> * @param top Query parameters. If null is passed returns the default number of zones.
     * @return the PagedList&lt;RecordSetInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RecordSetInner>>> listAllInResourceGroupSinglePageAsync(final String resourceGroupName, final String zoneName, final String top) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (zoneName == null) {
            throw new IllegalArgumentException("Parameter zoneName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listAllInResourceGroup(resourceGroupName, zoneName, this.client.subscriptionId(), top, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RecordSetInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecordSetInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RecordSetInner>> result = listAllInResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RecordSetInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RecordSetInner>> listAllInResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<RecordSetInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<RecordSetInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists the RecordSets of a specified type in a DNS zone.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;RecordSetInner&gt; object if successful.
     */
    public PagedList<RecordSetInner> listByTypeNext(final String nextPageLink) {
        ServiceResponse<Page<RecordSetInner>> response = listByTypeNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<RecordSetInner>(response.getBody()) {
            @Override
            public Page<RecordSetInner> nextPage(String nextPageLink) {
                return listByTypeNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Lists the RecordSets of a specified type in a DNS zone.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<RecordSetInner>> listByTypeNextAsync(final String nextPageLink, final ServiceCall<List<RecordSetInner>> serviceCall, final ListOperationCallback<RecordSetInner> serviceCallback) {
        return AzureServiceCall.create(
            listByTypeNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<RecordSetInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecordSetInner>>> call(String nextPageLink) {
                    return listByTypeNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the RecordSets of a specified type in a DNS zone.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;RecordSetInner&gt; object
     */
    public Observable<Page<RecordSetInner>> listByTypeNextAsync(final String nextPageLink) {
        return listByTypeNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<RecordSetInner>>, Page<RecordSetInner>>() {
                @Override
                public Page<RecordSetInner> call(ServiceResponse<Page<RecordSetInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Lists the RecordSets of a specified type in a DNS zone.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;RecordSetInner&gt; object
     */
    public Observable<ServiceResponse<Page<RecordSetInner>>> listByTypeNextWithServiceResponseAsync(final String nextPageLink) {
        return listByTypeNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<RecordSetInner>>, Observable<ServiceResponse<Page<RecordSetInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecordSetInner>>> call(ServiceResponse<Page<RecordSetInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByTypeNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the RecordSets of a specified type in a DNS zone.
     *
    ServiceResponse<PageImpl<RecordSetInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;RecordSetInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RecordSetInner>>> listByTypeNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        return service.listByTypeNext(nextPageLink, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RecordSetInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecordSetInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RecordSetInner>> result = listByTypeNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RecordSetInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RecordSetInner>> listByTypeNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<RecordSetInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<RecordSetInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists all RecordSets in a DNS zone.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;RecordSetInner&gt; object if successful.
     */
    public PagedList<RecordSetInner> listAllInResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<RecordSetInner>> response = listAllInResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<RecordSetInner>(response.getBody()) {
            @Override
            public Page<RecordSetInner> nextPage(String nextPageLink) {
                return listAllInResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Lists all RecordSets in a DNS zone.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<RecordSetInner>> listAllInResourceGroupNextAsync(final String nextPageLink, final ServiceCall<List<RecordSetInner>> serviceCall, final ListOperationCallback<RecordSetInner> serviceCallback) {
        return AzureServiceCall.create(
            listAllInResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<RecordSetInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecordSetInner>>> call(String nextPageLink) {
                    return listAllInResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists all RecordSets in a DNS zone.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;RecordSetInner&gt; object
     */
    public Observable<Page<RecordSetInner>> listAllInResourceGroupNextAsync(final String nextPageLink) {
        return listAllInResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<RecordSetInner>>, Page<RecordSetInner>>() {
                @Override
                public Page<RecordSetInner> call(ServiceResponse<Page<RecordSetInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Lists all RecordSets in a DNS zone.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;RecordSetInner&gt; object
     */
    public Observable<ServiceResponse<Page<RecordSetInner>>> listAllInResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listAllInResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<RecordSetInner>>, Observable<ServiceResponse<Page<RecordSetInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecordSetInner>>> call(ServiceResponse<Page<RecordSetInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listAllInResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists all RecordSets in a DNS zone.
     *
    ServiceResponse<PageImpl<RecordSetInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;RecordSetInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<RecordSetInner>>> listAllInResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        return service.listAllInResourceGroupNext(nextPageLink, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<RecordSetInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<RecordSetInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<RecordSetInner>> result = listAllInResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<RecordSetInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<RecordSetInner>> listAllInResourceGroupNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<RecordSetInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<RecordSetInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
