/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.dns.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceCall;
import com.microsoft.azure.AzureServiceResponseBuilder;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Zones.
 */
public final class ZonesInner {
    /** The Retrofit service to perform REST calls. */
    private ZonesService service;
    /** The service client containing this operation class. */
    private DnsManagementClientImpl client;

    /**
     * Initializes an instance of ZonesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ZonesInner(Retrofit retrofit, DnsManagementClientImpl client) {
        this.service = retrofit.create(ZonesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Zones to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ZonesService {
        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnszones/{zoneName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("zoneName") String zoneName, @Path("subscriptionId") String subscriptionId, @Body ZoneInner parameters, @Header("If-Match") String ifMatch, @Header("If-None-Match") String ifNoneMatch, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnszones/{zoneName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("zoneName") String zoneName, @Path("subscriptionId") String subscriptionId, @Header("If-Match") String ifMatch, @Header("If-None-Match") String ifNoneMatch, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnszones/{zoneName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("resourceGroupName") String resourceGroupName, @Path("zoneName") String zoneName, @Path("subscriptionId") String subscriptionId, @Header("If-Match") String ifMatch, @Header("If-None-Match") String ifNoneMatch, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnszones/{zoneName}")
        Observable<Response<ResponseBody>> get(@Path("resourceGroupName") String resourceGroupName, @Path("zoneName") String zoneName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnszones")
        Observable<Response<ResponseBody>> listInResourceGroup(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("$top") String top, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Network/dnszones")
        Observable<Response<ResponseBody>> listInSubscription(@Path("subscriptionId") String subscriptionId, @Query("$top") String top, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("{nextLink}")
        Observable<Response<ResponseBody>> listInResourceGroupNext(@Path(value = "nextLink", encoded = true) String nextPageLink, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("{nextLink}")
        Observable<Response<ResponseBody>> listInSubscriptionNext(@Path(value = "nextLink", encoded = true) String nextPageLink, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Creates or Updates a DNS zone within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @return the ZoneInner object if successful.
     */
    public ZoneInner createOrUpdate(String resourceGroupName, String zoneName, ZoneInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, zoneName, parameters).toBlocking().single().getBody();
    }

    /**
     * Creates or Updates a DNS zone within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ZoneInner> createOrUpdateAsync(String resourceGroupName, String zoneName, ZoneInner parameters, final ServiceCallback<ZoneInner> serviceCallback) {
        return ServiceCall.create(createOrUpdateWithServiceResponseAsync(resourceGroupName, zoneName, parameters), serviceCallback);
    }

    /**
     * Creates or Updates a DNS zone within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @return the observable to the ZoneInner object
     */
    public Observable<ZoneInner> createOrUpdateAsync(String resourceGroupName, String zoneName, ZoneInner parameters) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, zoneName, parameters).map(new Func1<ServiceResponse<ZoneInner>, ZoneInner>() {
            @Override
            public ZoneInner call(ServiceResponse<ZoneInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Creates or Updates a DNS zone within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @return the observable to the ZoneInner object
     */
    public Observable<ServiceResponse<ZoneInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String zoneName, ZoneInner parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (zoneName == null) {
            throw new IllegalArgumentException("Parameter zoneName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return service.createOrUpdate(resourceGroupName, zoneName, this.client.subscriptionId(), parameters, ifMatch, ifNoneMatch, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ZoneInner>>>() {
                @Override
                public Observable<ServiceResponse<ZoneInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ZoneInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates or Updates a DNS zone within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch The etag of Zone.
     * @param ifNoneMatch Defines the If-None-Match condition. Set to '*' to force Create-If-Not-Exist. Other values will be ignored.
     * @return the ZoneInner object if successful.
     */
    public ZoneInner createOrUpdate(String resourceGroupName, String zoneName, ZoneInner parameters, String ifMatch, String ifNoneMatch) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, zoneName, parameters, ifMatch, ifNoneMatch).toBlocking().single().getBody();
    }

    /**
     * Creates or Updates a DNS zone within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch The etag of Zone.
     * @param ifNoneMatch Defines the If-None-Match condition. Set to '*' to force Create-If-Not-Exist. Other values will be ignored.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ZoneInner> createOrUpdateAsync(String resourceGroupName, String zoneName, ZoneInner parameters, String ifMatch, String ifNoneMatch, final ServiceCallback<ZoneInner> serviceCallback) {
        return ServiceCall.create(createOrUpdateWithServiceResponseAsync(resourceGroupName, zoneName, parameters, ifMatch, ifNoneMatch), serviceCallback);
    }

    /**
     * Creates or Updates a DNS zone within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch The etag of Zone.
     * @param ifNoneMatch Defines the If-None-Match condition. Set to '*' to force Create-If-Not-Exist. Other values will be ignored.
     * @return the observable to the ZoneInner object
     */
    public Observable<ZoneInner> createOrUpdateAsync(String resourceGroupName, String zoneName, ZoneInner parameters, String ifMatch, String ifNoneMatch) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, zoneName, parameters, ifMatch, ifNoneMatch).map(new Func1<ServiceResponse<ZoneInner>, ZoneInner>() {
            @Override
            public ZoneInner call(ServiceResponse<ZoneInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Creates or Updates a DNS zone within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param ifMatch The etag of Zone.
     * @param ifNoneMatch Defines the If-None-Match condition. Set to '*' to force Create-If-Not-Exist. Other values will be ignored.
     * @return the observable to the ZoneInner object
     */
    public Observable<ServiceResponse<ZoneInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String zoneName, ZoneInner parameters, String ifMatch, String ifNoneMatch) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (zoneName == null) {
            throw new IllegalArgumentException("Parameter zoneName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.createOrUpdate(resourceGroupName, zoneName, this.client.subscriptionId(), parameters, ifMatch, ifNoneMatch, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ZoneInner>>>() {
                @Override
                public Observable<ServiceResponse<ZoneInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ZoneInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ZoneInner> createOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<ZoneInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<ZoneInner>() { }.getType())
                .register(201, new TypeToken<ZoneInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Removes a DNS zone from a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @return the ZoneDeleteResultInner object  if successful.
     */
    public ZoneDeleteResultInner delete(String resourceGroupName, String zoneName) {
        return deleteWithServiceResponseAsync(resourceGroupName, zoneName).toBlocking().last().getBody();
    }

    /**
     * Removes a DNS zone from a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ZoneDeleteResultInner> deleteAsync(String resourceGroupName, String zoneName, final ServiceCallback<ZoneDeleteResultInner> serviceCallback) {
        return ServiceCall.create(deleteWithServiceResponseAsync(resourceGroupName, zoneName), serviceCallback);
    }

    /**
     * Removes a DNS zone from a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @return the observable for the request
     */
    public Observable<ZoneDeleteResultInner> deleteAsync(String resourceGroupName, String zoneName) {
        return deleteWithServiceResponseAsync(resourceGroupName, zoneName).map(new Func1<ServiceResponse<ZoneDeleteResultInner>, ZoneDeleteResultInner>() {
            @Override
            public ZoneDeleteResultInner call(ServiceResponse<ZoneDeleteResultInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Removes a DNS zone from a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ZoneDeleteResultInner>> deleteWithServiceResponseAsync(String resourceGroupName, String zoneName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (zoneName == null) {
            throw new IllegalArgumentException("Parameter zoneName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String ifMatch = null;
        final String ifNoneMatch = null;
        Observable<Response<ResponseBody>> observable = service.delete(resourceGroupName, zoneName, this.client.subscriptionId(), ifMatch, ifNoneMatch, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<ZoneDeleteResultInner>() { }.getType());
    }
    /**
     * Removes a DNS zone from a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param ifMatch Defines the If-Match condition. The delete operation will be performed only if the ETag of the zone on the server matches this value.
     * @param ifNoneMatch Defines the If-None-Match condition. The delete operation will be performed only if the ETag of the zone on the server does not match this value.
     * @return the ZoneDeleteResultInner object if successful.
     */
    public ZoneDeleteResultInner delete(String resourceGroupName, String zoneName, String ifMatch, String ifNoneMatch) {
        return deleteWithServiceResponseAsync(resourceGroupName, zoneName, ifMatch, ifNoneMatch).toBlocking().last().getBody();
    }

    /**
     * Removes a DNS zone from a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param ifMatch Defines the If-Match condition. The delete operation will be performed only if the ETag of the zone on the server matches this value.
     * @param ifNoneMatch Defines the If-None-Match condition. The delete operation will be performed only if the ETag of the zone on the server does not match this value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ZoneDeleteResultInner> deleteAsync(String resourceGroupName, String zoneName, String ifMatch, String ifNoneMatch, final ServiceCallback<ZoneDeleteResultInner> serviceCallback) {
        return ServiceCall.create(deleteWithServiceResponseAsync(resourceGroupName, zoneName, ifMatch, ifNoneMatch), serviceCallback);
    }

    /**
     * Removes a DNS zone from a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param ifMatch Defines the If-Match condition. The delete operation will be performed only if the ETag of the zone on the server matches this value.
     * @param ifNoneMatch Defines the If-None-Match condition. The delete operation will be performed only if the ETag of the zone on the server does not match this value.
     * @return the observable for the request
     */
    public Observable<ZoneDeleteResultInner> deleteAsync(String resourceGroupName, String zoneName, String ifMatch, String ifNoneMatch) {
        return deleteWithServiceResponseAsync(resourceGroupName, zoneName, ifMatch, ifNoneMatch).map(new Func1<ServiceResponse<ZoneDeleteResultInner>, ZoneDeleteResultInner>() {
            @Override
            public ZoneDeleteResultInner call(ServiceResponse<ZoneDeleteResultInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Removes a DNS zone from a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param ifMatch Defines the If-Match condition. The delete operation will be performed only if the ETag of the zone on the server matches this value.
     * @param ifNoneMatch Defines the If-None-Match condition. The delete operation will be performed only if the ETag of the zone on the server does not match this value.
     * @return the observable for the request
     */
    public Observable<ServiceResponse<ZoneDeleteResultInner>> deleteWithServiceResponseAsync(String resourceGroupName, String zoneName, String ifMatch, String ifNoneMatch) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (zoneName == null) {
            throw new IllegalArgumentException("Parameter zoneName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(resourceGroupName, zoneName, this.client.subscriptionId(), ifMatch, ifNoneMatch, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<ZoneDeleteResultInner>() { }.getType());
    }

    /**
     * Removes a DNS zone from a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @return the ZoneDeleteResultInner object if successful.
     */
    public ZoneDeleteResultInner beginDelete(String resourceGroupName, String zoneName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, zoneName).toBlocking().single().getBody();
    }

    /**
     * Removes a DNS zone from a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ZoneDeleteResultInner> beginDeleteAsync(String resourceGroupName, String zoneName, final ServiceCallback<ZoneDeleteResultInner> serviceCallback) {
        return ServiceCall.create(beginDeleteWithServiceResponseAsync(resourceGroupName, zoneName), serviceCallback);
    }

    /**
     * Removes a DNS zone from a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @return the observable to the ZoneDeleteResultInner object
     */
    public Observable<ZoneDeleteResultInner> beginDeleteAsync(String resourceGroupName, String zoneName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, zoneName).map(new Func1<ServiceResponse<ZoneDeleteResultInner>, ZoneDeleteResultInner>() {
            @Override
            public ZoneDeleteResultInner call(ServiceResponse<ZoneDeleteResultInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Removes a DNS zone from a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @return the observable to the ZoneDeleteResultInner object
     */
    public Observable<ServiceResponse<ZoneDeleteResultInner>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String zoneName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (zoneName == null) {
            throw new IllegalArgumentException("Parameter zoneName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String ifMatch = null;
        final String ifNoneMatch = null;
        return service.beginDelete(resourceGroupName, zoneName, this.client.subscriptionId(), ifMatch, ifNoneMatch, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ZoneDeleteResultInner>>>() {
                @Override
                public Observable<ServiceResponse<ZoneDeleteResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ZoneDeleteResultInner> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Removes a DNS zone from a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param ifMatch Defines the If-Match condition. The delete operation will be performed only if the ETag of the zone on the server matches this value.
     * @param ifNoneMatch Defines the If-None-Match condition. The delete operation will be performed only if the ETag of the zone on the server does not match this value.
     * @return the ZoneDeleteResultInner object if successful.
     */
    public ZoneDeleteResultInner beginDelete(String resourceGroupName, String zoneName, String ifMatch, String ifNoneMatch) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, zoneName, ifMatch, ifNoneMatch).toBlocking().single().getBody();
    }

    /**
     * Removes a DNS zone from a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param ifMatch Defines the If-Match condition. The delete operation will be performed only if the ETag of the zone on the server matches this value.
     * @param ifNoneMatch Defines the If-None-Match condition. The delete operation will be performed only if the ETag of the zone on the server does not match this value.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ZoneDeleteResultInner> beginDeleteAsync(String resourceGroupName, String zoneName, String ifMatch, String ifNoneMatch, final ServiceCallback<ZoneDeleteResultInner> serviceCallback) {
        return ServiceCall.create(beginDeleteWithServiceResponseAsync(resourceGroupName, zoneName, ifMatch, ifNoneMatch), serviceCallback);
    }

    /**
     * Removes a DNS zone from a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param ifMatch Defines the If-Match condition. The delete operation will be performed only if the ETag of the zone on the server matches this value.
     * @param ifNoneMatch Defines the If-None-Match condition. The delete operation will be performed only if the ETag of the zone on the server does not match this value.
     * @return the observable to the ZoneDeleteResultInner object
     */
    public Observable<ZoneDeleteResultInner> beginDeleteAsync(String resourceGroupName, String zoneName, String ifMatch, String ifNoneMatch) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, zoneName, ifMatch, ifNoneMatch).map(new Func1<ServiceResponse<ZoneDeleteResultInner>, ZoneDeleteResultInner>() {
            @Override
            public ZoneDeleteResultInner call(ServiceResponse<ZoneDeleteResultInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Removes a DNS zone from a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param ifMatch Defines the If-Match condition. The delete operation will be performed only if the ETag of the zone on the server matches this value.
     * @param ifNoneMatch Defines the If-None-Match condition. The delete operation will be performed only if the ETag of the zone on the server does not match this value.
     * @return the observable to the ZoneDeleteResultInner object
     */
    public Observable<ServiceResponse<ZoneDeleteResultInner>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String zoneName, String ifMatch, String ifNoneMatch) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (zoneName == null) {
            throw new IllegalArgumentException("Parameter zoneName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(resourceGroupName, zoneName, this.client.subscriptionId(), ifMatch, ifNoneMatch, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ZoneDeleteResultInner>>>() {
                @Override
                public Observable<ServiceResponse<ZoneDeleteResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ZoneDeleteResultInner> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ZoneDeleteResultInner> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<ZoneDeleteResultInner, CloudException>(this.client.mapperAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(200, new TypeToken<ZoneDeleteResultInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets a DNS zone.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @return the ZoneInner object if successful.
     */
    public ZoneInner get(String resourceGroupName, String zoneName) {
        return getWithServiceResponseAsync(resourceGroupName, zoneName).toBlocking().single().getBody();
    }

    /**
     * Gets a DNS zone.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<ZoneInner> getAsync(String resourceGroupName, String zoneName, final ServiceCallback<ZoneInner> serviceCallback) {
        return ServiceCall.create(getWithServiceResponseAsync(resourceGroupName, zoneName), serviceCallback);
    }

    /**
     * Gets a DNS zone.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @return the observable to the ZoneInner object
     */
    public Observable<ZoneInner> getAsync(String resourceGroupName, String zoneName) {
        return getWithServiceResponseAsync(resourceGroupName, zoneName).map(new Func1<ServiceResponse<ZoneInner>, ZoneInner>() {
            @Override
            public ZoneInner call(ServiceResponse<ZoneInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Gets a DNS zone.
     *
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the zone without a terminating dot.
     * @return the observable to the ZoneInner object
     */
    public Observable<ServiceResponse<ZoneInner>> getWithServiceResponseAsync(String resourceGroupName, String zoneName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (zoneName == null) {
            throw new IllegalArgumentException("Parameter zoneName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(resourceGroupName, zoneName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ZoneInner>>>() {
                @Override
                public Observable<ServiceResponse<ZoneInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ZoneInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ZoneInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<ZoneInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<ZoneInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists the DNS zones within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @return the PagedList&lt;ZoneInner&gt; object if successful.
     */
    public PagedList<ZoneInner> listInResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<ZoneInner>> response = listInResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<ZoneInner>(response.getBody()) {
            @Override
            public Page<ZoneInner> nextPage(String nextPageLink) {
                return listInResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Lists the DNS zones within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<ZoneInner>> listInResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<ZoneInner> serviceCallback) {
        return AzureServiceCall.create(
            listInResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<ZoneInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ZoneInner>>> call(String nextPageLink) {
                    return listInResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the DNS zones within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @return the observable to the PagedList&lt;ZoneInner&gt; object
     */
    public Observable<Page<ZoneInner>> listInResourceGroupAsync(final String resourceGroupName) {
        return listInResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<ZoneInner>>, Page<ZoneInner>>() {
                @Override
                public Page<ZoneInner> call(ServiceResponse<Page<ZoneInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Lists the DNS zones within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @return the observable to the PagedList&lt;ZoneInner&gt; object
     */
    public Observable<ServiceResponse<Page<ZoneInner>>> listInResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listInResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<ZoneInner>>, Observable<ServiceResponse<Page<ZoneInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ZoneInner>>> call(ServiceResponse<Page<ZoneInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listInResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the DNS zones within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @return the PagedList&lt;ZoneInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ZoneInner>>> listInResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String top = null;
        return service.listInResourceGroup(resourceGroupName, this.client.subscriptionId(), top, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ZoneInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ZoneInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ZoneInner>> result = listInResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ZoneInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the DNS zones within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param top Query parameters. If null is passed returns the default number of zones.
     * @return the PagedList&lt;ZoneInner&gt; object if successful.
     */
    public PagedList<ZoneInner> listInResourceGroup(final String resourceGroupName, final String top) {
        ServiceResponse<Page<ZoneInner>> response = listInResourceGroupSinglePageAsync(resourceGroupName, top).toBlocking().single();
        return new PagedList<ZoneInner>(response.getBody()) {
            @Override
            public Page<ZoneInner> nextPage(String nextPageLink) {
                return listInResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Lists the DNS zones within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param top Query parameters. If null is passed returns the default number of zones.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<ZoneInner>> listInResourceGroupAsync(final String resourceGroupName, final String top, final ListOperationCallback<ZoneInner> serviceCallback) {
        return AzureServiceCall.create(
            listInResourceGroupSinglePageAsync(resourceGroupName, top),
            new Func1<String, Observable<ServiceResponse<Page<ZoneInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ZoneInner>>> call(String nextPageLink) {
                    return listInResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the DNS zones within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param top Query parameters. If null is passed returns the default number of zones.
     * @return the observable to the PagedList&lt;ZoneInner&gt; object
     */
    public Observable<Page<ZoneInner>> listInResourceGroupAsync(final String resourceGroupName, final String top) {
        return listInResourceGroupWithServiceResponseAsync(resourceGroupName, top)
            .map(new Func1<ServiceResponse<Page<ZoneInner>>, Page<ZoneInner>>() {
                @Override
                public Page<ZoneInner> call(ServiceResponse<Page<ZoneInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Lists the DNS zones within a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param top Query parameters. If null is passed returns the default number of zones.
     * @return the observable to the PagedList&lt;ZoneInner&gt; object
     */
    public Observable<ServiceResponse<Page<ZoneInner>>> listInResourceGroupWithServiceResponseAsync(final String resourceGroupName, final String top) {
        return listInResourceGroupSinglePageAsync(resourceGroupName, top)
            .concatMap(new Func1<ServiceResponse<Page<ZoneInner>>, Observable<ServiceResponse<Page<ZoneInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ZoneInner>>> call(ServiceResponse<Page<ZoneInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listInResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the DNS zones within a resource group.
     *
    ServiceResponse<PageImpl<ZoneInner>> * @param resourceGroupName The name of the resource group.
    ServiceResponse<PageImpl<ZoneInner>> * @param top Query parameters. If null is passed returns the default number of zones.
     * @return the PagedList&lt;ZoneInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ZoneInner>>> listInResourceGroupSinglePageAsync(final String resourceGroupName, final String top) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listInResourceGroup(resourceGroupName, this.client.subscriptionId(), top, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ZoneInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ZoneInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ZoneInner>> result = listInResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ZoneInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ZoneInner>> listInResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<ZoneInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<ZoneInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists the DNS zones within a resource group.
     *
     * @return the PagedList&lt;ZoneInner&gt; object if successful.
     */
    public PagedList<ZoneInner> listInSubscription() {
        ServiceResponse<Page<ZoneInner>> response = listInSubscriptionSinglePageAsync().toBlocking().single();
        return new PagedList<ZoneInner>(response.getBody()) {
            @Override
            public Page<ZoneInner> nextPage(String nextPageLink) {
                return listInSubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Lists the DNS zones within a resource group.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<ZoneInner>> listInSubscriptionAsync(final ListOperationCallback<ZoneInner> serviceCallback) {
        return AzureServiceCall.create(
            listInSubscriptionSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<ZoneInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ZoneInner>>> call(String nextPageLink) {
                    return listInSubscriptionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the DNS zones within a resource group.
     *
     * @return the observable to the PagedList&lt;ZoneInner&gt; object
     */
    public Observable<Page<ZoneInner>> listInSubscriptionAsync() {
        return listInSubscriptionWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<ZoneInner>>, Page<ZoneInner>>() {
                @Override
                public Page<ZoneInner> call(ServiceResponse<Page<ZoneInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Lists the DNS zones within a resource group.
     *
     * @return the observable to the PagedList&lt;ZoneInner&gt; object
     */
    public Observable<ServiceResponse<Page<ZoneInner>>> listInSubscriptionWithServiceResponseAsync() {
        return listInSubscriptionSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<ZoneInner>>, Observable<ServiceResponse<Page<ZoneInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ZoneInner>>> call(ServiceResponse<Page<ZoneInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listInSubscriptionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the DNS zones within a resource group.
     *
     * @return the PagedList&lt;ZoneInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ZoneInner>>> listInSubscriptionSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String top = null;
        return service.listInSubscription(this.client.subscriptionId(), top, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ZoneInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ZoneInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ZoneInner>> result = listInSubscriptionDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ZoneInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Lists the DNS zones within a resource group.
     *
     * @param top Query parameters. If null is passed returns the default number of zones.
     * @return the PagedList&lt;ZoneInner&gt; object if successful.
     */
    public PagedList<ZoneInner> listInSubscription(final String top) {
        ServiceResponse<Page<ZoneInner>> response = listInSubscriptionSinglePageAsync(top).toBlocking().single();
        return new PagedList<ZoneInner>(response.getBody()) {
            @Override
            public Page<ZoneInner> nextPage(String nextPageLink) {
                return listInSubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Lists the DNS zones within a resource group.
     *
     * @param top Query parameters. If null is passed returns the default number of zones.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<ZoneInner>> listInSubscriptionAsync(final String top, final ListOperationCallback<ZoneInner> serviceCallback) {
        return AzureServiceCall.create(
            listInSubscriptionSinglePageAsync(top),
            new Func1<String, Observable<ServiceResponse<Page<ZoneInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ZoneInner>>> call(String nextPageLink) {
                    return listInSubscriptionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the DNS zones within a resource group.
     *
     * @param top Query parameters. If null is passed returns the default number of zones.
     * @return the observable to the PagedList&lt;ZoneInner&gt; object
     */
    public Observable<Page<ZoneInner>> listInSubscriptionAsync(final String top) {
        return listInSubscriptionWithServiceResponseAsync(top)
            .map(new Func1<ServiceResponse<Page<ZoneInner>>, Page<ZoneInner>>() {
                @Override
                public Page<ZoneInner> call(ServiceResponse<Page<ZoneInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Lists the DNS zones within a resource group.
     *
     * @param top Query parameters. If null is passed returns the default number of zones.
     * @return the observable to the PagedList&lt;ZoneInner&gt; object
     */
    public Observable<ServiceResponse<Page<ZoneInner>>> listInSubscriptionWithServiceResponseAsync(final String top) {
        return listInSubscriptionSinglePageAsync(top)
            .concatMap(new Func1<ServiceResponse<Page<ZoneInner>>, Observable<ServiceResponse<Page<ZoneInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ZoneInner>>> call(ServiceResponse<Page<ZoneInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listInSubscriptionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the DNS zones within a resource group.
     *
    ServiceResponse<PageImpl<ZoneInner>> * @param top Query parameters. If null is passed returns the default number of zones.
     * @return the PagedList&lt;ZoneInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ZoneInner>>> listInSubscriptionSinglePageAsync(final String top) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listInSubscription(this.client.subscriptionId(), top, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ZoneInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ZoneInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ZoneInner>> result = listInSubscriptionDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ZoneInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ZoneInner>> listInSubscriptionDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<ZoneInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<ZoneInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists the DNS zones within a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;ZoneInner&gt; object if successful.
     */
    public PagedList<ZoneInner> listInResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<ZoneInner>> response = listInResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ZoneInner>(response.getBody()) {
            @Override
            public Page<ZoneInner> nextPage(String nextPageLink) {
                return listInResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Lists the DNS zones within a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<ZoneInner>> listInResourceGroupNextAsync(final String nextPageLink, final ServiceCall<List<ZoneInner>> serviceCall, final ListOperationCallback<ZoneInner> serviceCallback) {
        return AzureServiceCall.create(
            listInResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ZoneInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ZoneInner>>> call(String nextPageLink) {
                    return listInResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the DNS zones within a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;ZoneInner&gt; object
     */
    public Observable<Page<ZoneInner>> listInResourceGroupNextAsync(final String nextPageLink) {
        return listInResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ZoneInner>>, Page<ZoneInner>>() {
                @Override
                public Page<ZoneInner> call(ServiceResponse<Page<ZoneInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Lists the DNS zones within a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;ZoneInner&gt; object
     */
    public Observable<ServiceResponse<Page<ZoneInner>>> listInResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listInResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ZoneInner>>, Observable<ServiceResponse<Page<ZoneInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ZoneInner>>> call(ServiceResponse<Page<ZoneInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listInResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the DNS zones within a resource group.
     *
    ServiceResponse<PageImpl<ZoneInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;ZoneInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ZoneInner>>> listInResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        return service.listInResourceGroupNext(nextPageLink, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ZoneInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ZoneInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ZoneInner>> result = listInResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ZoneInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ZoneInner>> listInResourceGroupNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<ZoneInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<ZoneInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Lists the DNS zones within a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;ZoneInner&gt; object if successful.
     */
    public PagedList<ZoneInner> listInSubscriptionNext(final String nextPageLink) {
        ServiceResponse<Page<ZoneInner>> response = listInSubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<ZoneInner>(response.getBody()) {
            @Override
            public Page<ZoneInner> nextPage(String nextPageLink) {
                return listInSubscriptionNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Lists the DNS zones within a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<ZoneInner>> listInSubscriptionNextAsync(final String nextPageLink, final ServiceCall<List<ZoneInner>> serviceCall, final ListOperationCallback<ZoneInner> serviceCallback) {
        return AzureServiceCall.create(
            listInSubscriptionNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<ZoneInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ZoneInner>>> call(String nextPageLink) {
                    return listInSubscriptionNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists the DNS zones within a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;ZoneInner&gt; object
     */
    public Observable<Page<ZoneInner>> listInSubscriptionNextAsync(final String nextPageLink) {
        return listInSubscriptionNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<ZoneInner>>, Page<ZoneInner>>() {
                @Override
                public Page<ZoneInner> call(ServiceResponse<Page<ZoneInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Lists the DNS zones within a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;ZoneInner&gt; object
     */
    public Observable<ServiceResponse<Page<ZoneInner>>> listInSubscriptionNextWithServiceResponseAsync(final String nextPageLink) {
        return listInSubscriptionNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<ZoneInner>>, Observable<ServiceResponse<Page<ZoneInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ZoneInner>>> call(ServiceResponse<Page<ZoneInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listInSubscriptionNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists the DNS zones within a resource group.
     *
    ServiceResponse<PageImpl<ZoneInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;ZoneInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<ZoneInner>>> listInSubscriptionNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        return service.listInSubscriptionNext(nextPageLink, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<ZoneInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<ZoneInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<ZoneInner>> result = listInSubscriptionNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<ZoneInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<ZoneInner>> listInSubscriptionNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<ZoneInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<ZoneInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
