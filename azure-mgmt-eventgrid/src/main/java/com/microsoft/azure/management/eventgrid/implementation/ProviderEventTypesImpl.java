/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * abc
 */

package com.microsoft.azure.management.eventgrid.implementation;

import com.microsoft.azure.management.resources.fluentcore.model.implementation.WrapperImpl;
import com.microsoft.azure.management.eventgrid.ProviderEventTypes;
import rx.functions.Func1;
import rx.Observable;
import java.util.List;
import com.microsoft.azure.management.eventgrid.EventType;

class ProviderEventTypesImpl extends WrapperImpl<TopicsInner> implements ProviderEventTypes {
    private final EventGridManager manager;

    ProviderEventTypesImpl(EventGridManager manager) {
        super(manager.inner().topics());
        this.manager = manager;
    }

    public EventGridManager manager() {
        return this.manager;
    }

    @Override
    public Observable<EventType> listEventTypesAsync(String resourceGroupName, String providerNamespace, String resourceTypeName, String resourceName) {
        TopicsInner client = this.inner();
        return client.listEventTypesAsync(resourceGroupName, providerNamespace, resourceTypeName, resourceName)
        .flatMap(new Func1<List<EventTypeInner>, Observable<EventTypeInner>>() {
            @Override
            public Observable<EventTypeInner> call(List<EventTypeInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<EventTypeInner, EventType>() {
            @Override
            public EventType call(EventTypeInner inner) {
                return new EventTypeImpl(inner, manager());
            }
        });
    }

}
