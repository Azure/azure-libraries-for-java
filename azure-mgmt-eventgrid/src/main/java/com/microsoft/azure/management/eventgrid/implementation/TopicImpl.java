/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.eventgrid.implementation;

import com.microsoft.azure.management.resources.fluentcore.arm.models.implementation.GroupableResourceImpl;
import com.microsoft.azure.management.eventgrid.Topic;
import rx.Observable;
import com.microsoft.azure.management.eventgrid.TopicProvisioningState;

class TopicImpl extends GroupableResourceImpl<Topic, TopicInner, TopicImpl, EventGridManager> implements Topic, Topic.Definition, Topic.Update {
    TopicImpl(String name, TopicInner inner, EventGridManager manager) {
        super(name, inner, manager);
    }

    @Override
    public Observable<Topic> createResourceAsync() {
        TopicsInner client = this.manager().inner().topics();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Topic> updateResourceAsync() {
        TopicsInner client = this.manager().inner().topics();
        return client.updateAsync(this.resourceGroupName(), this.name())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<TopicInner> getInnerAsync() {
        TopicsInner client = this.manager().inner().topics();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String endpoint() {
        return this.inner().endpoint();
    }

    @Override
    public TopicProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

}
