// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.graphrbac.models;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.management.graphrbac.AddOwnerParameters;
import com.azure.management.graphrbac.ApplicationCreateParameters;
import com.azure.management.graphrbac.ApplicationUpdateParameters;
import com.azure.management.graphrbac.DirectoryObject;
import com.azure.management.graphrbac.KeyCredential;
import com.azure.management.graphrbac.KeyCredentialsUpdateParameters;
import com.azure.management.graphrbac.PasswordCredential;
import com.azure.management.graphrbac.PasswordCredentialsUpdateParameters;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * Applications.
 */
public final class ApplicationsInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private ApplicationsService service;

    /**
     * The service client containing this operation class.
     */
    private GraphRbacManagementClientImpl client;

    /**
     * Initializes an instance of ApplicationsInner.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    public ApplicationsInner(GraphRbacManagementClientImpl client) {
        this.service = RestProxy.create(ApplicationsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * GraphRbacManagementClientApplications to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "GraphRbacManagementClientApplications")
    private interface ApplicationsService {
        @Post("/{tenantID}/applications")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<SimpleResponse<ApplicationInner>> create(@HostParam("$host") String host, @PathParam("tenantID") String tenantID, @BodyParam("application/json") ApplicationCreateParameters parameters, @QueryParam("api-version") String apiVersion);

        @Get("/{tenantID}/applications")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<SimpleResponse<ApplicationListResultInner>> list(@HostParam("$host") String host, @QueryParam("$filter") String filter, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion);

        @Delete("/{tenantID}/applications/{applicationObjectId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<Response<Void>> delete(@HostParam("$host") String host, @PathParam("applicationObjectId") String applicationObjectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion);

        @Get("/{tenantID}/applications/{applicationObjectId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<SimpleResponse<ApplicationInner>> get(@HostParam("$host") String host, @PathParam("applicationObjectId") String applicationObjectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion);

        @Patch("/{tenantID}/applications/{applicationObjectId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<Response<Void>> patch(@HostParam("$host") String host, @PathParam("applicationObjectId") String applicationObjectId, @PathParam("tenantID") String tenantID, @BodyParam("application/json") ApplicationUpdateParameters parameters, @QueryParam("api-version") String apiVersion);

        @Get("/{tenantID}/applications/{applicationObjectId}/owners")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<SimpleResponse<DirectoryObjectListResultInner>> listOwners(@HostParam("$host") String host, @PathParam("applicationObjectId") String applicationObjectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion);

        @Post("/{tenantID}/applications/{applicationObjectId}/$links/owners")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<Response<Void>> addOwner(@HostParam("$host") String host, @PathParam("applicationObjectId") String applicationObjectId, @PathParam("tenantID") String tenantID, @BodyParam("application/json") AddOwnerParameters parameters, @QueryParam("api-version") String apiVersion);

        @Delete("/{tenantID}/applications/{applicationObjectId}/$links/owners/{ownerObjectId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<Response<Void>> removeOwner(@HostParam("$host") String host, @PathParam("applicationObjectId") String applicationObjectId, @PathParam("ownerObjectId") String ownerObjectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion);

        @Get("/{tenantID}/applications/{applicationObjectId}/keyCredentials")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<SimpleResponse<KeyCredentialListResultInner>> listKeyCredentials(@HostParam("$host") String host, @PathParam("applicationObjectId") String applicationObjectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion);

        @Patch("/{tenantID}/applications/{applicationObjectId}/keyCredentials")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<Response<Void>> updateKeyCredentials(@HostParam("$host") String host, @PathParam("applicationObjectId") String applicationObjectId, @PathParam("tenantID") String tenantID, @BodyParam("application/json") KeyCredentialsUpdateParameters parameters, @QueryParam("api-version") String apiVersion);

        @Get("/{tenantID}/applications/{applicationObjectId}/passwordCredentials")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<SimpleResponse<PasswordCredentialListResultInner>> listPasswordCredentials(@HostParam("$host") String host, @PathParam("applicationObjectId") String applicationObjectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion);

        @Patch("/{tenantID}/applications/{applicationObjectId}/passwordCredentials")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<Response<Void>> updatePasswordCredentials(@HostParam("$host") String host, @PathParam("applicationObjectId") String applicationObjectId, @PathParam("tenantID") String tenantID, @BodyParam("application/json") PasswordCredentialsUpdateParameters parameters, @QueryParam("api-version") String apiVersion);

        @Get("/{tenantID}/servicePrincipalsByAppId/{applicationID}/objectId")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<SimpleResponse<ServicePrincipalObjectResultInner>> getServicePrincipalsIdByAppId(@HostParam("$host") String host, @PathParam("tenantID") String tenantID, @PathParam("applicationID") String applicationID, @QueryParam("api-version") String apiVersion);

        @Get("/{tenantID}/{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<SimpleResponse<ApplicationListResultInner>> listNext(@HostParam("$host") String host, @PathParam(value = "nextLink", encoded = true) String nextLink, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<SimpleResponse<DirectoryObjectListResultInner>> listOwnersNext(@PathParam(value = "nextLink", encoded = true) String nextLink);
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ApplicationInner>> createWithResponseAsync(ApplicationCreateParameters parameters) {
        return service.create(this.client.getHost(), this.client.getTenantID(), parameters, this.client.getApiVersion());
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ApplicationInner> createAsync(ApplicationCreateParameters parameters) {
        return createWithResponseAsync(parameters)
            .flatMap((SimpleResponse<ApplicationInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApplicationInner create(ApplicationCreateParameters parameters) {
        return createAsync(parameters).block();
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ApplicationInner>> listSinglePageAsync(String filter) {
        return service.list(this.client.getHost(), filter, this.client.getTenantID(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().getValue(),
            res.getValue().getOdatanextLink(),
            null));
    }

    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ApplicationInner> listAsync(String filter) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(filter),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * @param filter null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ApplicationInner> list(String filter) {
        return new PagedIterable<>(listAsync(filter));
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String applicationObjectId) {
        return service.delete(this.client.getHost(), applicationObjectId, this.client.getTenantID(), this.client.getApiVersion());
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(String applicationObjectId) {
        return deleteWithResponseAsync(applicationObjectId)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String applicationObjectId) {
        deleteAsync(applicationObjectId).block();
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ApplicationInner>> getWithResponseAsync(String applicationObjectId) {
        return service.get(this.client.getHost(), applicationObjectId, this.client.getTenantID(), this.client.getApiVersion());
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ApplicationInner> getAsync(String applicationObjectId) {
        return getWithResponseAsync(applicationObjectId)
            .flatMap((SimpleResponse<ApplicationInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public ApplicationInner get(String applicationObjectId) {
        return getAsync(applicationObjectId).block();
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> patchWithResponseAsync(String applicationObjectId, ApplicationUpdateParameters parameters) {
        return service.patch(this.client.getHost(), applicationObjectId, this.client.getTenantID(), parameters, this.client.getApiVersion());
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> patchAsync(String applicationObjectId, ApplicationUpdateParameters parameters) {
        return patchWithResponseAsync(applicationObjectId, parameters)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public void patch(String applicationObjectId, ApplicationUpdateParameters parameters) {
        patchAsync(applicationObjectId, parameters).block();
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DirectoryObject>> listOwnersSinglePageAsync(String applicationObjectId) {
        return service.listOwners(this.client.getHost(), applicationObjectId, this.client.getTenantID(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().getValue(),
            res.getValue().getOdatanextLink(),
            null));
    }

    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DirectoryObject> listOwnersAsync(String applicationObjectId) {
        return new PagedFlux<>(
            () -> listOwnersSinglePageAsync(applicationObjectId),
            nextLink -> listOwnersNextSinglePageAsync(nextLink));
    }

    /**
     * @param applicationObjectId null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DirectoryObject> listOwners(String applicationObjectId) {
        return new PagedIterable<>(listOwnersAsync(applicationObjectId));
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addOwnerWithResponseAsync(String applicationObjectId, AddOwnerParameters parameters) {
        return service.addOwner(this.client.getHost(), applicationObjectId, this.client.getTenantID(), parameters, this.client.getApiVersion());
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addOwnerAsync(String applicationObjectId, AddOwnerParameters parameters) {
        return addOwnerWithResponseAsync(applicationObjectId, parameters)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public void addOwner(String applicationObjectId, AddOwnerParameters parameters) {
        addOwnerAsync(applicationObjectId, parameters).block();
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeOwnerWithResponseAsync(String applicationObjectId, String ownerObjectId) {
        return service.removeOwner(this.client.getHost(), applicationObjectId, ownerObjectId, this.client.getTenantID(), this.client.getApiVersion());
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeOwnerAsync(String applicationObjectId, String ownerObjectId) {
        return removeOwnerWithResponseAsync(applicationObjectId, ownerObjectId)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public void removeOwner(String applicationObjectId, String ownerObjectId) {
        removeOwnerAsync(applicationObjectId, ownerObjectId).block();
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<KeyCredential>> listKeyCredentialsSinglePageAsync(String applicationObjectId) {
        return service.listKeyCredentials(this.client.getHost(), applicationObjectId, this.client.getTenantID(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().getValue(),
            null,
            null));
    }

    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<KeyCredential> listKeyCredentialsAsync(String applicationObjectId) {
        return new PagedFlux<>(
            () -> listKeyCredentialsSinglePageAsync(applicationObjectId));
    }

    /**
     * @param applicationObjectId null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<KeyCredential> listKeyCredentials(String applicationObjectId) {
        return new PagedIterable<>(listKeyCredentialsAsync(applicationObjectId));
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateKeyCredentialsWithResponseAsync(String applicationObjectId, KeyCredentialsUpdateParameters parameters) {
        return service.updateKeyCredentials(this.client.getHost(), applicationObjectId, this.client.getTenantID(), parameters, this.client.getApiVersion());
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateKeyCredentialsAsync(String applicationObjectId, KeyCredentialsUpdateParameters parameters) {
        return updateKeyCredentialsWithResponseAsync(applicationObjectId, parameters)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updateKeyCredentials(String applicationObjectId, KeyCredentialsUpdateParameters parameters) {
        updateKeyCredentialsAsync(applicationObjectId, parameters).block();
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<PasswordCredential>> listPasswordCredentialsSinglePageAsync(String applicationObjectId) {
        return service.listPasswordCredentials(this.client.getHost(), applicationObjectId, this.client.getTenantID(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().getValue(),
            null,
            null));
    }

    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<PasswordCredential> listPasswordCredentialsAsync(String applicationObjectId) {
        return new PagedFlux<>(
            () -> listPasswordCredentialsSinglePageAsync(applicationObjectId));
    }

    /**
     * @param applicationObjectId null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<PasswordCredential> listPasswordCredentials(String applicationObjectId) {
        return new PagedIterable<>(listPasswordCredentialsAsync(applicationObjectId));
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updatePasswordCredentialsWithResponseAsync(String applicationObjectId, PasswordCredentialsUpdateParameters parameters) {
        return service.updatePasswordCredentials(this.client.getHost(), applicationObjectId, this.client.getTenantID(), parameters, this.client.getApiVersion());
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updatePasswordCredentialsAsync(String applicationObjectId, PasswordCredentialsUpdateParameters parameters) {
        return updatePasswordCredentialsWithResponseAsync(applicationObjectId, parameters)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public void updatePasswordCredentials(String applicationObjectId, PasswordCredentialsUpdateParameters parameters) {
        updatePasswordCredentialsAsync(applicationObjectId, parameters).block();
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ServicePrincipalObjectResultInner>> getServicePrincipalsIdByAppIdWithResponseAsync(String applicationID) {
        return service.getServicePrincipalsIdByAppId(this.client.getHost(), this.client.getTenantID(), applicationID, this.client.getApiVersion());
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ServicePrincipalObjectResultInner> getServicePrincipalsIdByAppIdAsync(String applicationID) {
        return getServicePrincipalsIdByAppIdWithResponseAsync(applicationID)
            .flatMap((SimpleResponse<ServicePrincipalObjectResultInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public ServicePrincipalObjectResultInner getServicePrincipalsIdByAppId(String applicationID) {
        return getServicePrincipalsIdByAppIdAsync(applicationID).block();
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ApplicationInner>> listNextSinglePageAsync(String nextLink) {
        return service.listNext(this.client.getHost(), nextLink, this.client.getTenantID(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().getValue(),
            res.getValue().getOdatanextLink(),
            null));
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DirectoryObject>> listOwnersNextSinglePageAsync(String nextLink) {
        return service.listOwnersNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().getValue(),
            res.getValue().getOdatanextLink(),
            null));
    }
}
