// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.graphrbac.models;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.management.graphrbac.AddOwnerParameters;
import com.azure.management.graphrbac.CheckGroupMembershipParameters;
import com.azure.management.graphrbac.DirectoryObject;
import com.azure.management.graphrbac.GroupAddMemberParameters;
import com.azure.management.graphrbac.GroupCreateParameters;
import com.azure.management.graphrbac.GroupGetMemberGroupsParameters;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * Groups.
 */
public final class GroupsInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private GroupsService service;

    /**
     * The service client containing this operation class.
     */
    private GraphRbacManagementClientImpl client;

    /**
     * Initializes an instance of GroupsInner.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    public GroupsInner(GraphRbacManagementClientImpl client) {
        this.service = RestProxy.create(GroupsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * GraphRbacManagementClientGroups to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "GraphRbacManagementClientGroups")
    private interface GroupsService {
        @Post("/{tenantID}/isMemberOf")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<SimpleResponse<CheckGroupMembershipResultInner>> isMemberOf(@HostParam("$host") String host, @PathParam("tenantID") String tenantID, @BodyParam("application/json") CheckGroupMembershipParameters parameters, @QueryParam("api-version") String apiVersion);

        @Delete("/{tenantID}/groups/{groupObjectId}/$links/members/{memberObjectId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<Response<Void>> removeMember(@HostParam("$host") String host, @PathParam("groupObjectId") String groupObjectId, @PathParam("memberObjectId") String memberObjectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion);

        @Post("/{tenantID}/groups/{groupObjectId}/$links/members")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<Response<Void>> addMember(@HostParam("$host") String host, @PathParam("groupObjectId") String groupObjectId, @PathParam("tenantID") String tenantID, @BodyParam("application/json") GroupAddMemberParameters parameters, @QueryParam("api-version") String apiVersion);

        @Post("/{tenantID}/groups")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<SimpleResponse<ADGroupInner>> create(@HostParam("$host") String host, @PathParam("tenantID") String tenantID, @BodyParam("application/json") GroupCreateParameters parameters, @QueryParam("api-version") String apiVersion);

        @Get("/{tenantID}/groups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<SimpleResponse<GroupListResultInner>> list(@HostParam("$host") String host, @QueryParam("$filter") String filter, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion);

        @Get("/{tenantID}/groups/{objectId}/members")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<SimpleResponse<DirectoryObjectListResultInner>> getGroupMembers(@HostParam("$host") String host, @PathParam("objectId") String objectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion);

        @Get("/{tenantID}/groups/{objectId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<SimpleResponse<ADGroupInner>> get(@HostParam("$host") String host, @PathParam("objectId") String objectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion);

        @Delete("/{tenantID}/groups/{objectId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<Response<Void>> delete(@HostParam("$host") String host, @PathParam("objectId") String objectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion);

        @Post("/{tenantID}/groups/{objectId}/getMemberGroups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<SimpleResponse<GroupGetMemberGroupsResultInner>> getMemberGroups(@HostParam("$host") String host, @PathParam("objectId") String objectId, @PathParam("tenantID") String tenantID, @BodyParam("application/json") GroupGetMemberGroupsParameters parameters, @QueryParam("api-version") String apiVersion);

        @Get("/{tenantID}/groups/{objectId}/owners")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<SimpleResponse<DirectoryObjectListResultInner>> listOwners(@HostParam("$host") String host, @PathParam("objectId") String objectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion);

        @Post("/{tenantID}/groups/{objectId}/$links/owners")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<Response<Void>> addOwner(@HostParam("$host") String host, @PathParam("objectId") String objectId, @PathParam("tenantID") String tenantID, @BodyParam("application/json") AddOwnerParameters parameters, @QueryParam("api-version") String apiVersion);

        @Delete("/{tenantID}/groups/{objectId}/$links/owners/{ownerObjectId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<Response<Void>> removeOwner(@HostParam("$host") String host, @PathParam("objectId") String objectId, @PathParam("ownerObjectId") String ownerObjectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion);

        @Get("/{tenantID}/{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<SimpleResponse<GroupListResultInner>> listNext(@HostParam("$host") String host, @PathParam(value = "nextLink", encoded = true) String nextLink, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion);

        @Get("/{tenantID}/{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<SimpleResponse<DirectoryObjectListResultInner>> getGroupMembersNext(@HostParam("$host") String host, @PathParam(value = "nextLink", encoded = true) String nextLink, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Mono<SimpleResponse<DirectoryObjectListResultInner>> listOwnersNext(@PathParam(value = "nextLink", encoded = true) String nextLink);
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<CheckGroupMembershipResultInner>> isMemberOfWithResponseAsync(CheckGroupMembershipParameters parameters) {
        return service.isMemberOf(this.client.getHost(), this.client.getTenantID(), parameters, this.client.getApiVersion());
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CheckGroupMembershipResultInner> isMemberOfAsync(CheckGroupMembershipParameters parameters) {
        return isMemberOfWithResponseAsync(parameters)
            .flatMap((SimpleResponse<CheckGroupMembershipResultInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public CheckGroupMembershipResultInner isMemberOf(CheckGroupMembershipParameters parameters) {
        return isMemberOfAsync(parameters).block();
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeMemberWithResponseAsync(String groupObjectId, String memberObjectId) {
        return service.removeMember(this.client.getHost(), groupObjectId, memberObjectId, this.client.getTenantID(), this.client.getApiVersion());
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeMemberAsync(String groupObjectId, String memberObjectId) {
        return removeMemberWithResponseAsync(groupObjectId, memberObjectId)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public void removeMember(String groupObjectId, String memberObjectId) {
        removeMemberAsync(groupObjectId, memberObjectId).block();
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addMemberWithResponseAsync(String groupObjectId, GroupAddMemberParameters parameters) {
        return service.addMember(this.client.getHost(), groupObjectId, this.client.getTenantID(), parameters, this.client.getApiVersion());
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addMemberAsync(String groupObjectId, GroupAddMemberParameters parameters) {
        return addMemberWithResponseAsync(groupObjectId, parameters)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public void addMember(String groupObjectId, GroupAddMemberParameters parameters) {
        addMemberAsync(groupObjectId, parameters).block();
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ADGroupInner>> createWithResponseAsync(GroupCreateParameters parameters) {
        return service.create(this.client.getHost(), this.client.getTenantID(), parameters, this.client.getApiVersion());
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ADGroupInner> createAsync(GroupCreateParameters parameters) {
        return createWithResponseAsync(parameters)
            .flatMap((SimpleResponse<ADGroupInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public ADGroupInner create(GroupCreateParameters parameters) {
        return createAsync(parameters).block();
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ADGroupInner>> listSinglePageAsync(String filter) {
        return service.list(this.client.getHost(), filter, this.client.getTenantID(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().getValue(),
            res.getValue().getOdatanextLink(),
            null));
    }

    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ADGroupInner> listAsync(String filter) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(filter),
            nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * @param filter null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ADGroupInner> list(String filter) {
        return new PagedIterable<>(listAsync(filter));
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DirectoryObject>> getGroupMembersSinglePageAsync(String objectId) {
        return service.getGroupMembers(this.client.getHost(), objectId, this.client.getTenantID(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().getValue(),
            res.getValue().getOdatanextLink(),
            null));
    }

    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DirectoryObject> getGroupMembersAsync(String objectId) {
        return new PagedFlux<>(
            () -> getGroupMembersSinglePageAsync(objectId),
            nextLink -> getGroupMembersNextSinglePageAsync(nextLink));
    }

    /**
     * @param objectId null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DirectoryObject> getGroupMembers(String objectId) {
        return new PagedIterable<>(getGroupMembersAsync(objectId));
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ADGroupInner>> getWithResponseAsync(String objectId) {
        return service.get(this.client.getHost(), objectId, this.client.getTenantID(), this.client.getApiVersion());
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ADGroupInner> getAsync(String objectId) {
        return getWithResponseAsync(objectId)
            .flatMap((SimpleResponse<ADGroupInner> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public ADGroupInner get(String objectId) {
        return getAsync(objectId).block();
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponseAsync(String objectId) {
        return service.delete(this.client.getHost(), objectId, this.client.getTenantID(), this.client.getApiVersion());
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteAsync(String objectId) {
        return deleteWithResponseAsync(objectId)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String objectId) {
        deleteAsync(objectId).block();
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<String>> getMemberGroupsSinglePageAsync(String objectId, GroupGetMemberGroupsParameters parameters) {
        return service.getMemberGroups(this.client.getHost(), objectId, this.client.getTenantID(), parameters, this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().getValue(),
            null,
            null));
    }

    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<String> getMemberGroupsAsync(String objectId, GroupGetMemberGroupsParameters parameters) {
        return new PagedFlux<>(
            () -> getMemberGroupsSinglePageAsync(objectId, parameters));
    }

    /**
     * @param objectId null
     * @param parameters null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<String> getMemberGroups(String objectId, GroupGetMemberGroupsParameters parameters) {
        return new PagedIterable<>(getMemberGroupsAsync(objectId, parameters));
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DirectoryObject>> listOwnersSinglePageAsync(String objectId) {
        return service.listOwners(this.client.getHost(), objectId, this.client.getTenantID(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().getValue(),
            res.getValue().getOdatanextLink(),
            null));
    }

    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<DirectoryObject> listOwnersAsync(String objectId) {
        return new PagedFlux<>(
            () -> listOwnersSinglePageAsync(objectId),
            nextLink -> listOwnersNextSinglePageAsync(nextLink));
    }

    /**
     * @param objectId null
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DirectoryObject> listOwners(String objectId) {
        return new PagedIterable<>(listOwnersAsync(objectId));
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> addOwnerWithResponseAsync(String objectId, AddOwnerParameters parameters) {
        return service.addOwner(this.client.getHost(), objectId, this.client.getTenantID(), parameters, this.client.getApiVersion());
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> addOwnerAsync(String objectId, AddOwnerParameters parameters) {
        return addOwnerWithResponseAsync(objectId, parameters)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public void addOwner(String objectId, AddOwnerParameters parameters) {
        addOwnerAsync(objectId, parameters).block();
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> removeOwnerWithResponseAsync(String objectId, String ownerObjectId) {
        return service.removeOwner(this.client.getHost(), objectId, ownerObjectId, this.client.getTenantID(), this.client.getApiVersion());
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> removeOwnerAsync(String objectId, String ownerObjectId) {
        return removeOwnerWithResponseAsync(objectId, ownerObjectId)
            .flatMap((Response<Void> res) -> Mono.empty());
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public void removeOwner(String objectId, String ownerObjectId) {
        removeOwnerAsync(objectId, ownerObjectId).block();
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<ADGroupInner>> listNextSinglePageAsync(String nextLink) {
        return service.listNext(this.client.getHost(), nextLink, this.client.getTenantID(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().getValue(),
            res.getValue().getOdatanextLink(),
            null));
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DirectoryObject>> getGroupMembersNextSinglePageAsync(String nextLink) {
        return service.getGroupMembersNext(this.client.getHost(), nextLink, this.client.getTenantID(), this.client.getApiVersion()).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().getValue(),
            res.getValue().getOdatanextLink(),
            null));
    }

    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<DirectoryObject>> listOwnersNextSinglePageAsync(String nextLink) {
        return service.listOwnersNext(nextLink).map(res -> new PagedResponseBase<>(
            res.getRequest(),
            res.getStatusCode(),
            res.getHeaders(),
            res.getValue().getValue(),
            res.getValue().getOdatanextLink(),
            null));
    }
}
