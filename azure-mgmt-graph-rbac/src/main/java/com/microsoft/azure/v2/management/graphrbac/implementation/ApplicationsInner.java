/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.v2.management.graphrbac.implementation;

import com.microsoft.azure.v2.AzureProxy;
import com.microsoft.azure.v2.Page;
import com.microsoft.azure.v2.PagedList;
import com.microsoft.azure.v2.management.graphrbac.ApplicationAddOwnerParameters;
import com.microsoft.azure.v2.management.graphrbac.ApplicationCreateParameters;
import com.microsoft.azure.v2.management.graphrbac.ApplicationUpdateParameters;
import com.microsoft.azure.v2.management.graphrbac.GraphErrorException;
import com.microsoft.azure.v2.management.graphrbac.KeyCredentialsUpdateParameters;
import com.microsoft.azure.v2.management.graphrbac.PasswordCredentialsUpdateParameters;
import com.microsoft.rest.v2.BodyResponse;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.Validator;
import com.microsoft.rest.v2.VoidResponse;
import com.microsoft.rest.v2.annotations.BodyParam;
import com.microsoft.rest.v2.annotations.DELETE;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.HeaderParam;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.PATCH;
import com.microsoft.rest.v2.annotations.PathParam;
import com.microsoft.rest.v2.annotations.POST;
import com.microsoft.rest.v2.annotations.QueryParam;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import io.reactivex.Completable;
import io.reactivex.Maybe;
import io.reactivex.Observable;
import io.reactivex.Single;
import io.reactivex.annotations.NonNull;
import java.util.List;

/**
 * An instance of this class provides access to all the operations defined in
 * Applications.
 */
public final class ApplicationsInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private ApplicationsService service;

    /**
     * The service client containing this operation class.
     */
    private GraphRbacManagementClientImpl client;

    /**
     * Initializes an instance of ApplicationsInner.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public ApplicationsInner(GraphRbacManagementClientImpl client) {
        this.service = AzureProxy.create(ApplicationsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for Applications to be used by
     * the proxy service to perform REST calls.
     */
    @Host("https://graph.windows.net")
    private interface ApplicationsService {
        @POST("{tenantID}/applications")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<BodyResponse<ApplicationInner>> create(@PathParam("tenantID") String tenantID, @BodyParam("application/json; charset=utf-8") ApplicationCreateParameters parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{tenantID}/applications")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<BodyResponse<PageImpl<ApplicationInner>>> list(@PathParam("tenantID") String tenantID, @QueryParam("$filter") String filter, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @DELETE("{tenantID}/applications/{applicationObjectId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<VoidResponse> delete(@PathParam("applicationObjectId") String applicationObjectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{tenantID}/applications/{applicationObjectId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<BodyResponse<ApplicationInner>> get(@PathParam("applicationObjectId") String applicationObjectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @PATCH("{tenantID}/applications/{applicationObjectId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<VoidResponse> patch(@PathParam("applicationObjectId") String applicationObjectId, @PathParam("tenantID") String tenantID, @BodyParam("application/json; charset=utf-8") ApplicationUpdateParameters parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{tenantID}/applications/{applicationObjectId}/owners")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<BodyResponse<List<DirectoryObjectInner>>> listOwners(@PathParam("applicationObjectId") String applicationObjectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @POST("{tenantID}/applications/{applicationObjectId}/$links/owners")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<VoidResponse> addOwner(@PathParam("applicationObjectId") String applicationObjectId, @PathParam("tenantID") String tenantID, @BodyParam("application/json; charset=utf-8") ApplicationAddOwnerParameters parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{tenantID}/applications/{applicationObjectId}/keyCredentials")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<BodyResponse<List<KeyCredentialInner>>> listKeyCredentials(@PathParam("applicationObjectId") String applicationObjectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @PATCH("{tenantID}/applications/{applicationObjectId}/keyCredentials")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<VoidResponse> updateKeyCredentials(@PathParam("applicationObjectId") String applicationObjectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @BodyParam("application/json; charset=utf-8") KeyCredentialsUpdateParameters parameters);

        @GET("{tenantID}/applications/{applicationObjectId}/passwordCredentials")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<BodyResponse<List<PasswordCredentialInner>>> listPasswordCredentials(@PathParam("applicationObjectId") String applicationObjectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @PATCH("{tenantID}/applications/{applicationObjectId}/passwordCredentials")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<VoidResponse> updatePasswordCredentials(@PathParam("applicationObjectId") String applicationObjectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @BodyParam("application/json; charset=utf-8") PasswordCredentialsUpdateParameters parameters);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<BodyResponse<PageImpl<ApplicationInner>>> listNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);
    }

    /**
     * Create a new application.
     *
     * @param parameters The parameters for creating an application.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ApplicationInner object if successful.
     */
    public ApplicationInner create(@NonNull ApplicationCreateParameters parameters) {
        return createAsync(parameters).blockingGet();
    }

    /**
     * Create a new application.
     *
     * @param parameters The parameters for creating an application.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<ApplicationInner> createAsync(@NonNull ApplicationCreateParameters parameters, ServiceCallback<ApplicationInner> serviceCallback) {
        return ServiceFuture.fromBody(createAsync(parameters), serviceCallback);
    }

    /**
     * Create a new application.
     *
     * @param parameters The parameters for creating an application.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<ApplicationInner>> createWithRestResponseAsync(@NonNull ApplicationCreateParameters parameters) {
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.create(this.client.tenantID(), parameters, this.client.apiVersion(), this.client.acceptLanguage());
    }

    /**
     * Create a new application.
     *
     * @param parameters The parameters for creating an application.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<ApplicationInner> createAsync(@NonNull ApplicationCreateParameters parameters) {
        return createWithRestResponseAsync(parameters)
            .flatMapMaybe((BodyResponse<ApplicationInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Lists applications by filter parameters.
     *
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ApplicationInner&gt; object if successful.
     */
    public PagedList<ApplicationInner> list() {
        Page<ApplicationInner> response = listSinglePageAsync().blockingGet();
        return new PagedList<ApplicationInner>(response) {
            @Override
            public Page<ApplicationInner> nextPage(String nextLink) {
                return listNextSinglePageAsync(nextLink).blockingGet();
            }
        };
    }

    /**
     * Lists applications by filter parameters.
     *
     * @return the observable to the PagedList&lt;ApplicationInner&gt; object.
     */
    public Observable<Page<ApplicationInner>> listAsync() {
        return listSinglePageAsync()
            .toObservable()
            .concatMap((Page<ApplicationInner> page) -> {
                String nextLink = page.nextPageLink();
                if (nextLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listNextAsync(nextLink));
            });
    }

    /**
     * Lists applications by filter parameters.
     *
     * @return the Single&lt;Page&lt;ApplicationInner&gt;&gt; object if successful.
     */
    public Single<Page<ApplicationInner>> listSinglePageAsync() {
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        return service.list(this.client.tenantID(), filter, this.client.apiVersion(), this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<ApplicationInner>> res) -> res.body());
    }

    /**
     * Lists applications by filter parameters.
     *
     * @param filter The filters to apply to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ApplicationInner&gt; object if successful.
     */
    public PagedList<ApplicationInner> list(String filter) {
        Page<ApplicationInner> response = listSinglePageAsync(filter).blockingGet();
        return new PagedList<ApplicationInner>(response) {
            @Override
            public Page<ApplicationInner> nextPage(String nextLink) {
                return listNextSinglePageAsync(nextLink).blockingGet();
            }
        };
    }

    /**
     * Lists applications by filter parameters.
     *
     * @param filter The filters to apply to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;ApplicationInner&gt; object.
     */
    public Observable<Page<ApplicationInner>> listAsync(String filter) {
        return listSinglePageAsync(filter)
            .toObservable()
            .concatMap((Page<ApplicationInner> page) -> {
                String nextLink = page.nextPageLink();
                if (nextLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listNextAsync(nextLink));
            });
    }

    /**
     * Lists applications by filter parameters.
     *
     * @param filter The filters to apply to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;ApplicationInner&gt;&gt; object if successful.
     */
    public Single<Page<ApplicationInner>> listSinglePageAsync(String filter) {
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.tenantID(), filter, this.client.apiVersion(), this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<ApplicationInner>> res) -> res.body());
    }

    /**
     * Delete an application.
     *
     * @param applicationObjectId Application object ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void delete(@NonNull String applicationObjectId) {
        deleteAsync(applicationObjectId).blockingAwait();
    }

    /**
     * Delete an application.
     *
     * @param applicationObjectId Application object ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> deleteAsync(@NonNull String applicationObjectId, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(deleteAsync(applicationObjectId), serviceCallback);
    }

    /**
     * Delete an application.
     *
     * @param applicationObjectId Application object ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> deleteWithRestResponseAsync(@NonNull String applicationObjectId) {
        if (applicationObjectId == null) {
            throw new IllegalArgumentException("Parameter applicationObjectId is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(applicationObjectId, this.client.tenantID(), this.client.apiVersion(), this.client.acceptLanguage());
    }

    /**
     * Delete an application.
     *
     * @param applicationObjectId Application object ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable deleteAsync(@NonNull String applicationObjectId) {
        return deleteWithRestResponseAsync(applicationObjectId)
            .toCompletable();
    }

    /**
     * Get an application by object ID.
     *
     * @param applicationObjectId Application object ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ApplicationInner object if successful.
     */
    public ApplicationInner get(@NonNull String applicationObjectId) {
        return getAsync(applicationObjectId).blockingGet();
    }

    /**
     * Get an application by object ID.
     *
     * @param applicationObjectId Application object ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<ApplicationInner> getAsync(@NonNull String applicationObjectId, ServiceCallback<ApplicationInner> serviceCallback) {
        return ServiceFuture.fromBody(getAsync(applicationObjectId), serviceCallback);
    }

    /**
     * Get an application by object ID.
     *
     * @param applicationObjectId Application object ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<ApplicationInner>> getWithRestResponseAsync(@NonNull String applicationObjectId) {
        if (applicationObjectId == null) {
            throw new IllegalArgumentException("Parameter applicationObjectId is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(applicationObjectId, this.client.tenantID(), this.client.apiVersion(), this.client.acceptLanguage());
    }

    /**
     * Get an application by object ID.
     *
     * @param applicationObjectId Application object ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<ApplicationInner> getAsync(@NonNull String applicationObjectId) {
        return getWithRestResponseAsync(applicationObjectId)
            .flatMapMaybe((BodyResponse<ApplicationInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Update an existing application.
     *
     * @param applicationObjectId Application object ID.
     * @param parameters Parameters to update an existing application.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void patch(@NonNull String applicationObjectId, @NonNull ApplicationUpdateParameters parameters) {
        patchAsync(applicationObjectId, parameters).blockingAwait();
    }

    /**
     * Update an existing application.
     *
     * @param applicationObjectId Application object ID.
     * @param parameters Parameters to update an existing application.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> patchAsync(@NonNull String applicationObjectId, @NonNull ApplicationUpdateParameters parameters, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(patchAsync(applicationObjectId, parameters), serviceCallback);
    }

    /**
     * Update an existing application.
     *
     * @param applicationObjectId Application object ID.
     * @param parameters Parameters to update an existing application.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> patchWithRestResponseAsync(@NonNull String applicationObjectId, @NonNull ApplicationUpdateParameters parameters) {
        if (applicationObjectId == null) {
            throw new IllegalArgumentException("Parameter applicationObjectId is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.patch(applicationObjectId, this.client.tenantID(), parameters, this.client.apiVersion(), this.client.acceptLanguage());
    }

    /**
     * Update an existing application.
     *
     * @param applicationObjectId Application object ID.
     * @param parameters Parameters to update an existing application.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable patchAsync(@NonNull String applicationObjectId, @NonNull ApplicationUpdateParameters parameters) {
        return patchWithRestResponseAsync(applicationObjectId, parameters)
            .toCompletable();
    }

    /**
     * Directory objects that are owners of the application.
     * The owners are a set of non-admin users who are allowed to modify this object.
     *
     * @param applicationObjectId The object ID of the application for which to get owners.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;DirectoryObjectInner&gt; object if successful.
     */
    public List<DirectoryObjectInner> listOwners(@NonNull String applicationObjectId) {
        return listOwnersAsync(applicationObjectId).blockingGet();
    }

    /**
     * Directory objects that are owners of the application.
     * The owners are a set of non-admin users who are allowed to modify this object.
     *
     * @param applicationObjectId The object ID of the application for which to get owners.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<List<DirectoryObjectInner>> listOwnersAsync(@NonNull String applicationObjectId, ServiceCallback<List<DirectoryObjectInner>> serviceCallback) {
        return ServiceFuture.fromBody(listOwnersAsync(applicationObjectId), serviceCallback);
    }

    /**
     * Directory objects that are owners of the application.
     * The owners are a set of non-admin users who are allowed to modify this object.
     *
     * @param applicationObjectId The object ID of the application for which to get owners.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<List<DirectoryObjectInner>>> listOwnersWithRestResponseAsync(@NonNull String applicationObjectId) {
        if (applicationObjectId == null) {
            throw new IllegalArgumentException("Parameter applicationObjectId is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listOwners(applicationObjectId, this.client.tenantID(), this.client.apiVersion(), this.client.acceptLanguage());
    }

    /**
     * Directory objects that are owners of the application.
     * The owners are a set of non-admin users who are allowed to modify this object.
     *
     * @param applicationObjectId The object ID of the application for which to get owners.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<List<DirectoryObjectInner>> listOwnersAsync(@NonNull String applicationObjectId) {
        return listOwnersWithRestResponseAsync(applicationObjectId)
            .flatMapMaybe((BodyResponse<List<DirectoryObjectInner>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Add an owner to an application.
     *
     * @param applicationObjectId The object ID of the application to which to add the owner.
     * @param parameters The URL of the owner object, such as https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void addOwner(@NonNull String applicationObjectId, @NonNull ApplicationAddOwnerParameters parameters) {
        addOwnerAsync(applicationObjectId, parameters).blockingAwait();
    }

    /**
     * Add an owner to an application.
     *
     * @param applicationObjectId The object ID of the application to which to add the owner.
     * @param parameters The URL of the owner object, such as https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> addOwnerAsync(@NonNull String applicationObjectId, @NonNull ApplicationAddOwnerParameters parameters, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(addOwnerAsync(applicationObjectId, parameters), serviceCallback);
    }

    /**
     * Add an owner to an application.
     *
     * @param applicationObjectId The object ID of the application to which to add the owner.
     * @param parameters The URL of the owner object, such as https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> addOwnerWithRestResponseAsync(@NonNull String applicationObjectId, @NonNull ApplicationAddOwnerParameters parameters) {
        if (applicationObjectId == null) {
            throw new IllegalArgumentException("Parameter applicationObjectId is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.addOwner(applicationObjectId, this.client.tenantID(), parameters, this.client.apiVersion(), this.client.acceptLanguage());
    }

    /**
     * Add an owner to an application.
     *
     * @param applicationObjectId The object ID of the application to which to add the owner.
     * @param parameters The URL of the owner object, such as https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable addOwnerAsync(@NonNull String applicationObjectId, @NonNull ApplicationAddOwnerParameters parameters) {
        return addOwnerWithRestResponseAsync(applicationObjectId, parameters)
            .toCompletable();
    }

    /**
     * Get the keyCredentials associated with an application.
     *
     * @param applicationObjectId Application object ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;KeyCredentialInner&gt; object if successful.
     */
    public List<KeyCredentialInner> listKeyCredentials(@NonNull String applicationObjectId) {
        return listKeyCredentialsAsync(applicationObjectId).blockingGet();
    }

    /**
     * Get the keyCredentials associated with an application.
     *
     * @param applicationObjectId Application object ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<List<KeyCredentialInner>> listKeyCredentialsAsync(@NonNull String applicationObjectId, ServiceCallback<List<KeyCredentialInner>> serviceCallback) {
        return ServiceFuture.fromBody(listKeyCredentialsAsync(applicationObjectId), serviceCallback);
    }

    /**
     * Get the keyCredentials associated with an application.
     *
     * @param applicationObjectId Application object ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<List<KeyCredentialInner>>> listKeyCredentialsWithRestResponseAsync(@NonNull String applicationObjectId) {
        if (applicationObjectId == null) {
            throw new IllegalArgumentException("Parameter applicationObjectId is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listKeyCredentials(applicationObjectId, this.client.tenantID(), this.client.apiVersion(), this.client.acceptLanguage());
    }

    /**
     * Get the keyCredentials associated with an application.
     *
     * @param applicationObjectId Application object ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<List<KeyCredentialInner>> listKeyCredentialsAsync(@NonNull String applicationObjectId) {
        return listKeyCredentialsWithRestResponseAsync(applicationObjectId)
            .flatMapMaybe((BodyResponse<List<KeyCredentialInner>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Update the keyCredentials associated with an application.
     *
     * @param applicationObjectId Application object ID.
     * @param value A collection of KeyCredentials.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void updateKeyCredentials(@NonNull String applicationObjectId, @NonNull List<KeyCredentialInner> value) {
        updateKeyCredentialsAsync(applicationObjectId, value).blockingAwait();
    }

    /**
     * Update the keyCredentials associated with an application.
     *
     * @param applicationObjectId Application object ID.
     * @param value A collection of KeyCredentials.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> updateKeyCredentialsAsync(@NonNull String applicationObjectId, @NonNull List<KeyCredentialInner> value, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(updateKeyCredentialsAsync(applicationObjectId, value), serviceCallback);
    }

    /**
     * Update the keyCredentials associated with an application.
     *
     * @param applicationObjectId Application object ID.
     * @param value A collection of KeyCredentials.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> updateKeyCredentialsWithRestResponseAsync(@NonNull String applicationObjectId, @NonNull List<KeyCredentialInner> value) {
        if (applicationObjectId == null) {
            throw new IllegalArgumentException("Parameter applicationObjectId is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (value == null) {
            throw new IllegalArgumentException("Parameter value is required and cannot be null.");
        }
        Validator.validate(value);
        KeyCredentialsUpdateParameters parameters = new KeyCredentialsUpdateParameters();
        parameters.withValue(value);
        return service.updateKeyCredentials(applicationObjectId, this.client.tenantID(), this.client.apiVersion(), this.client.acceptLanguage(), parameters);
    }

    /**
     * Update the keyCredentials associated with an application.
     *
     * @param applicationObjectId Application object ID.
     * @param value A collection of KeyCredentials.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable updateKeyCredentialsAsync(@NonNull String applicationObjectId, @NonNull List<KeyCredentialInner> value) {
        return updateKeyCredentialsWithRestResponseAsync(applicationObjectId, value)
            .toCompletable();
    }

    /**
     * Get the passwordCredentials associated with an application.
     *
     * @param applicationObjectId Application object ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;PasswordCredentialInner&gt; object if successful.
     */
    public List<PasswordCredentialInner> listPasswordCredentials(@NonNull String applicationObjectId) {
        return listPasswordCredentialsAsync(applicationObjectId).blockingGet();
    }

    /**
     * Get the passwordCredentials associated with an application.
     *
     * @param applicationObjectId Application object ID.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<List<PasswordCredentialInner>> listPasswordCredentialsAsync(@NonNull String applicationObjectId, ServiceCallback<List<PasswordCredentialInner>> serviceCallback) {
        return ServiceFuture.fromBody(listPasswordCredentialsAsync(applicationObjectId), serviceCallback);
    }

    /**
     * Get the passwordCredentials associated with an application.
     *
     * @param applicationObjectId Application object ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<List<PasswordCredentialInner>>> listPasswordCredentialsWithRestResponseAsync(@NonNull String applicationObjectId) {
        if (applicationObjectId == null) {
            throw new IllegalArgumentException("Parameter applicationObjectId is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listPasswordCredentials(applicationObjectId, this.client.tenantID(), this.client.apiVersion(), this.client.acceptLanguage());
    }

    /**
     * Get the passwordCredentials associated with an application.
     *
     * @param applicationObjectId Application object ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<List<PasswordCredentialInner>> listPasswordCredentialsAsync(@NonNull String applicationObjectId) {
        return listPasswordCredentialsWithRestResponseAsync(applicationObjectId)
            .flatMapMaybe((BodyResponse<List<PasswordCredentialInner>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Update passwordCredentials associated with an application.
     *
     * @param applicationObjectId Application object ID.
     * @param value A collection of PasswordCredentials.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void updatePasswordCredentials(@NonNull String applicationObjectId, @NonNull List<PasswordCredentialInner> value) {
        updatePasswordCredentialsAsync(applicationObjectId, value).blockingAwait();
    }

    /**
     * Update passwordCredentials associated with an application.
     *
     * @param applicationObjectId Application object ID.
     * @param value A collection of PasswordCredentials.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> updatePasswordCredentialsAsync(@NonNull String applicationObjectId, @NonNull List<PasswordCredentialInner> value, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(updatePasswordCredentialsAsync(applicationObjectId, value), serviceCallback);
    }

    /**
     * Update passwordCredentials associated with an application.
     *
     * @param applicationObjectId Application object ID.
     * @param value A collection of PasswordCredentials.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> updatePasswordCredentialsWithRestResponseAsync(@NonNull String applicationObjectId, @NonNull List<PasswordCredentialInner> value) {
        if (applicationObjectId == null) {
            throw new IllegalArgumentException("Parameter applicationObjectId is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (value == null) {
            throw new IllegalArgumentException("Parameter value is required and cannot be null.");
        }
        Validator.validate(value);
        PasswordCredentialsUpdateParameters parameters = new PasswordCredentialsUpdateParameters();
        parameters.withValue(value);
        return service.updatePasswordCredentials(applicationObjectId, this.client.tenantID(), this.client.apiVersion(), this.client.acceptLanguage(), parameters);
    }

    /**
     * Update passwordCredentials associated with an application.
     *
     * @param applicationObjectId Application object ID.
     * @param value A collection of PasswordCredentials.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable updatePasswordCredentialsAsync(@NonNull String applicationObjectId, @NonNull List<PasswordCredentialInner> value) {
        return updatePasswordCredentialsWithRestResponseAsync(applicationObjectId, value)
            .toCompletable();
    }

    /**
     * Gets a list of applications from the current tenant.
     *
     * @param nextLink Next link for the list operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ApplicationInner&gt; object if successful.
     */
    public PagedList<ApplicationInner> listNext(@NonNull String nextLink) {
        Page<ApplicationInner> response = listNextSinglePageAsync(nextLink).blockingGet();
        return new PagedList<ApplicationInner>(response) {
            @Override
            public Page<ApplicationInner> nextPage(String nextLink) {
                return listNextSinglePageAsync(nextLink).blockingGet();
            }
        };
    }

    /**
     * Gets a list of applications from the current tenant.
     *
     * @param nextLink Next link for the list operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;ApplicationInner&gt; object.
     */
    public Observable<Page<ApplicationInner>> listNextAsync(@NonNull String nextLink) {
        return listNextSinglePageAsync(nextLink)
            .toObservable()
            .concatMap((Page<ApplicationInner> page) -> {
                String nextLink1 = page.nextPageLink();
                if (nextLink1 == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listNextAsync(nextLink1));
            });
    }

    /**
     * Gets a list of applications from the current tenant.
     *
     * @param nextLink Next link for the list operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;ApplicationInner&gt;&gt; object if successful.
     */
    public Single<Page<ApplicationInner>> listNextSinglePageAsync(@NonNull String nextLink) {
        if (nextLink == null) {
            throw new IllegalArgumentException("Parameter nextLink is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        String nextUrl = String.format("%s/%s", this.client.tenantID(), nextLink);
        return service.listNext(nextUrl, this.client.apiVersion(), this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<ApplicationInner>> res) -> res.body());
    }
}
