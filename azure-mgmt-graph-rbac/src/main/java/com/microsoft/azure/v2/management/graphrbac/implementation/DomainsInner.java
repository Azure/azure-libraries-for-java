/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.v2.management.graphrbac.implementation;

import com.microsoft.azure.v2.AzureProxy;
import com.microsoft.azure.v2.CloudException;
import com.microsoft.azure.v2.Page;
import com.microsoft.azure.v2.PagedList;
import com.microsoft.rest.v2.BodyResponse;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.HeaderParam;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.PathParam;
import com.microsoft.rest.v2.annotations.QueryParam;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import io.reactivex.Maybe;
import io.reactivex.Observable;
import io.reactivex.Single;
import io.reactivex.annotations.NonNull;
import java.util.List;

/**
 * An instance of this class provides access to all the operations defined in
 * Domains.
 */
public final class DomainsInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private DomainsService service;

    /**
     * The service client containing this operation class.
     */
    private GraphRbacManagementClientImpl client;

    /**
     * Initializes an instance of DomainsInner.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public DomainsInner(GraphRbacManagementClientImpl client) {
        this.service = AzureProxy.create(DomainsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for Domains to be used by the
     * proxy service to perform REST calls.
     */
    @Host("https://graph.windows.net")
    private interface DomainsService {
        @GET("{tenantID}/domains")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PageImpl<DomainInner>>> list(@PathParam("tenantID") String tenantID, @QueryParam("$filter") String filter, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{tenantID}/domains/{domainName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<DomainInner>> get(@PathParam("domainName") String domainName, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);
    }

    /**
     * Lists domains by filter parameters.
     *
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;DomainInner&gt; object if successful.
     */
    public PagedList<DomainInner> list() {
        Page<DomainInner> response = listSinglePageAsync().blockingGet();
        return new PagedList<DomainInner>(response) {
            @Override
            public Page<DomainInner> nextPage(String nextLink) {
                return null;
            }
        };
    }

    /**
     * Lists domains by filter parameters.
     *
     * @return the observable to the PagedList&lt;DomainInner&gt; object.
     */
    public Observable<Page<DomainInner>> listAsync() {
        return listSinglePageAsync()
                .toObservable();
    }

    /**
     * Lists domains by filter parameters.
     *
     * @return the Single&lt;Page&lt;DomainInner&gt;&gt; object if successful.
     */
    public Single<Page<DomainInner>> listSinglePageAsync() {
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        return service.list(this.client.tenantID(), filter, this.client.apiVersion(), this.client.acceptLanguage())
                .map((BodyResponse<PageImpl<DomainInner>> res) -> res.body());
    }

    /**
     * Lists domains by filter parameters.
     *
     * @param filter The filters to apply to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;DomainInner&gt; object if successful.
     */
    public PagedList<DomainInner> list(String filter) {
        Page<DomainInner> response = listSinglePageAsync(filter).blockingGet();
        return new PagedList<DomainInner>(response) {
            @Override
            public Page<DomainInner> nextPage(String nextLink) {
                return null;
            }
        };
    }

    /**
     * Lists domains by filter parameters.
     *
     * @param filter The filters to apply to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;DomainInner&gt; object.
     */
    public Observable<Page<DomainInner>> listAsync(String filter) {
        return listSinglePageAsync(filter)
                .toObservable();
    }

    /**
     * Lists domains by filter parameters.
     *
     * @param filter The filters to apply to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;DomainInner&gt;&gt; object if successful.
     */
    public Single<Page<DomainInner>> listSinglePageAsync(String filter) {
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.tenantID(), filter, this.client.apiVersion(), this.client.acceptLanguage())
                .map((BodyResponse<PageImpl<DomainInner>> res) -> res.body());
    }

    /**
     * Gets a specific domain in the current tenant.
     *
     * @param domainName name of the domain.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DomainInner object if successful.
     */
    public DomainInner get(@NonNull String domainName) {
        return getAsync(domainName).blockingGet();
    }

    /**
     * Gets a specific domain in the current tenant.
     *
     * @param domainName name of the domain.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<DomainInner> getAsync(@NonNull String domainName, ServiceCallback<DomainInner> serviceCallback) {
        return ServiceFuture.fromBody(getAsync(domainName), serviceCallback);
    }

    /**
     * Gets a specific domain in the current tenant.
     *
     * @param domainName name of the domain.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<DomainInner>> getWithRestResponseAsync(@NonNull String domainName) {
        if (domainName == null) {
            throw new IllegalArgumentException("Parameter domainName is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(domainName, this.client.tenantID(), this.client.apiVersion(), this.client.acceptLanguage());
    }

    /**
     * Gets a specific domain in the current tenant.
     *
     * @param domainName name of the domain.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<DomainInner> getAsync(@NonNull String domainName) {
        return getWithRestResponseAsync(domainName)
            .flatMapMaybe((BodyResponse<DomainInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }
}
