/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.v2.management.graphrbac.implementation;

import com.microsoft.azure.v2.AzureProxy;
import com.microsoft.azure.v2.Page;
import com.microsoft.azure.v2.PagedList;
import com.microsoft.azure.v2.management.graphrbac.CheckGroupMembershipParameters;
import com.microsoft.azure.v2.management.graphrbac.GraphErrorException;
import com.microsoft.azure.v2.management.graphrbac.GroupAddMemberParameters;
import com.microsoft.azure.v2.management.graphrbac.GroupCreateParameters;
import com.microsoft.azure.v2.management.graphrbac.GroupGetMemberGroupsParameters;
import com.microsoft.rest.v2.BodyResponse;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.Validator;
import com.microsoft.rest.v2.VoidResponse;
import com.microsoft.rest.v2.annotations.BodyParam;
import com.microsoft.rest.v2.annotations.DELETE;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.HeaderParam;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.PathParam;
import com.microsoft.rest.v2.annotations.POST;
import com.microsoft.rest.v2.annotations.QueryParam;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import io.reactivex.Completable;
import io.reactivex.Maybe;
import io.reactivex.Observable;
import io.reactivex.Single;
import io.reactivex.annotations.NonNull;
import java.util.List;

/**
 * An instance of this class provides access to all the operations defined in
 * Groups.
 */
public final class GroupsInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private GroupsService service;

    /**
     * The service client containing this operation class.
     */
    private GraphRbacManagementClientImpl client;

    /**
     * Initializes an instance of GroupsInner.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public GroupsInner(GraphRbacManagementClientImpl client) {
        this.service = AzureProxy.create(GroupsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for Groups to be used by the
     * proxy service to perform REST calls.
     */
    @Host("https://graph.windows.net")
    private interface GroupsService {
        @POST("{tenantID}/isMemberOf")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<BodyResponse<CheckGroupMembershipResultInner>> isMemberOf(@PathParam("tenantID") String tenantID, @BodyParam("application/json; charset=utf-8") CheckGroupMembershipParameters parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @DELETE("{tenantID}/groups/{groupObjectId}/$links/members/{memberObjectId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<VoidResponse> removeMember(@PathParam("groupObjectId") String groupObjectId, @PathParam("memberObjectId") String memberObjectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @POST("{tenantID}/groups/{groupObjectId}/$links/members")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<VoidResponse> addMember(@PathParam("groupObjectId") String groupObjectId, @PathParam("tenantID") String tenantID, @BodyParam("application/json; charset=utf-8") GroupAddMemberParameters parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @POST("{tenantID}/groups")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<BodyResponse<ADGroupInner>> create(@PathParam("tenantID") String tenantID, @BodyParam("application/json; charset=utf-8") GroupCreateParameters parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{tenantID}/groups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<BodyResponse<PageImpl<ADGroupInner>>> list(@PathParam("tenantID") String tenantID, @QueryParam("$filter") String filter, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{tenantID}/groups/{objectId}/members")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<BodyResponse<PageImpl<AADObjectInner>>> getGroupMembers(@PathParam("objectId") String objectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{tenantID}/groups/{objectId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<BodyResponse<ADGroupInner>> get(@PathParam("objectId") String objectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @DELETE("{tenantID}/groups/{objectId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<VoidResponse> delete(@PathParam("objectId") String objectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @POST("{tenantID}/groups/{objectId}/getMemberGroups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<BodyResponse<List<String>>> getMemberGroups(@PathParam("objectId") String objectId, @PathParam("tenantID") String tenantID, @BodyParam("application/json; charset=utf-8") GroupGetMemberGroupsParameters parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<BodyResponse<PageImpl<ADGroupInner>>> listNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<BodyResponse<PageImpl<AADObjectInner>>> getGroupMembersNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);
    }

    /**
     * Checks whether the specified user, group, contact, or service principal is a direct or transitive member of the specified group.
     *
     * @param parameters The check group membership parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the CheckGroupMembershipResultInner object if successful.
     */
    public CheckGroupMembershipResultInner isMemberOf(@NonNull CheckGroupMembershipParameters parameters) {
        return isMemberOfAsync(parameters).blockingGet();
    }

    /**
     * Checks whether the specified user, group, contact, or service principal is a direct or transitive member of the specified group.
     *
     * @param parameters The check group membership parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<CheckGroupMembershipResultInner> isMemberOfAsync(@NonNull CheckGroupMembershipParameters parameters, ServiceCallback<CheckGroupMembershipResultInner> serviceCallback) {
        return ServiceFuture.fromBody(isMemberOfAsync(parameters), serviceCallback);
    }

    /**
     * Checks whether the specified user, group, contact, or service principal is a direct or transitive member of the specified group.
     *
     * @param parameters The check group membership parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<CheckGroupMembershipResultInner>> isMemberOfWithRestResponseAsync(@NonNull CheckGroupMembershipParameters parameters) {
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.isMemberOf(this.client.tenantID(), parameters, this.client.apiVersion(), this.client.acceptLanguage());
    }

    /**
     * Checks whether the specified user, group, contact, or service principal is a direct or transitive member of the specified group.
     *
     * @param parameters The check group membership parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<CheckGroupMembershipResultInner> isMemberOfAsync(@NonNull CheckGroupMembershipParameters parameters) {
        return isMemberOfWithRestResponseAsync(parameters)
            .flatMapMaybe((BodyResponse<CheckGroupMembershipResultInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Remove a member from a group.
     *
     * @param groupObjectId The object ID of the group from which to remove the member.
     * @param memberObjectId Member object id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void removeMember(@NonNull String groupObjectId, @NonNull String memberObjectId) {
        removeMemberAsync(groupObjectId, memberObjectId).blockingAwait();
    }

    /**
     * Remove a member from a group.
     *
     * @param groupObjectId The object ID of the group from which to remove the member.
     * @param memberObjectId Member object id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> removeMemberAsync(@NonNull String groupObjectId, @NonNull String memberObjectId, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(removeMemberAsync(groupObjectId, memberObjectId), serviceCallback);
    }

    /**
     * Remove a member from a group.
     *
     * @param groupObjectId The object ID of the group from which to remove the member.
     * @param memberObjectId Member object id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> removeMemberWithRestResponseAsync(@NonNull String groupObjectId, @NonNull String memberObjectId) {
        if (groupObjectId == null) {
            throw new IllegalArgumentException("Parameter groupObjectId is required and cannot be null.");
        }
        if (memberObjectId == null) {
            throw new IllegalArgumentException("Parameter memberObjectId is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.removeMember(groupObjectId, memberObjectId, this.client.tenantID(), this.client.apiVersion(), this.client.acceptLanguage());
    }

    /**
     * Remove a member from a group.
     *
     * @param groupObjectId The object ID of the group from which to remove the member.
     * @param memberObjectId Member object id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable removeMemberAsync(@NonNull String groupObjectId, @NonNull String memberObjectId) {
        return removeMemberWithRestResponseAsync(groupObjectId, memberObjectId)
            .toCompletable();
    }

    /**
     * Add a member to a group.
     *
     * @param groupObjectId The object ID of the group to which to add the member.
     * @param parameters The URL of the member object, such as https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void addMember(@NonNull String groupObjectId, @NonNull GroupAddMemberParameters parameters) {
        addMemberAsync(groupObjectId, parameters).blockingAwait();
    }

    /**
     * Add a member to a group.
     *
     * @param groupObjectId The object ID of the group to which to add the member.
     * @param parameters The URL of the member object, such as https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> addMemberAsync(@NonNull String groupObjectId, @NonNull GroupAddMemberParameters parameters, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(addMemberAsync(groupObjectId, parameters), serviceCallback);
    }

    /**
     * Add a member to a group.
     *
     * @param groupObjectId The object ID of the group to which to add the member.
     * @param parameters The URL of the member object, such as https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> addMemberWithRestResponseAsync(@NonNull String groupObjectId, @NonNull GroupAddMemberParameters parameters) {
        if (groupObjectId == null) {
            throw new IllegalArgumentException("Parameter groupObjectId is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.addMember(groupObjectId, this.client.tenantID(), parameters, this.client.apiVersion(), this.client.acceptLanguage());
    }

    /**
     * Add a member to a group.
     *
     * @param groupObjectId The object ID of the group to which to add the member.
     * @param parameters The URL of the member object, such as https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable addMemberAsync(@NonNull String groupObjectId, @NonNull GroupAddMemberParameters parameters) {
        return addMemberWithRestResponseAsync(groupObjectId, parameters)
            .toCompletable();
    }

    /**
     * Create a group in the directory.
     *
     * @param parameters The parameters for the group to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ADGroupInner object if successful.
     */
    public ADGroupInner create(@NonNull GroupCreateParameters parameters) {
        return createAsync(parameters).blockingGet();
    }

    /**
     * Create a group in the directory.
     *
     * @param parameters The parameters for the group to create.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<ADGroupInner> createAsync(@NonNull GroupCreateParameters parameters, ServiceCallback<ADGroupInner> serviceCallback) {
        return ServiceFuture.fromBody(createAsync(parameters), serviceCallback);
    }

    /**
     * Create a group in the directory.
     *
     * @param parameters The parameters for the group to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<ADGroupInner>> createWithRestResponseAsync(@NonNull GroupCreateParameters parameters) {
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.create(this.client.tenantID(), parameters, this.client.apiVersion(), this.client.acceptLanguage());
    }

    /**
     * Create a group in the directory.
     *
     * @param parameters The parameters for the group to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<ADGroupInner> createAsync(@NonNull GroupCreateParameters parameters) {
        return createWithRestResponseAsync(parameters)
            .flatMapMaybe((BodyResponse<ADGroupInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Gets list of groups for the current tenant.
     *
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ADGroupInner&gt; object if successful.
     */
    public PagedList<ADGroupInner> list() {
        Page<ADGroupInner> response = listSinglePageAsync().blockingGet();
        return new PagedList<ADGroupInner>(response) {
            @Override
            public Page<ADGroupInner> nextPage(String nextLink) {
                return listNextSinglePageAsync(nextLink).blockingGet();
            }
        };
    }

    /**
     * Gets list of groups for the current tenant.
     *
     * @return the observable to the PagedList&lt;ADGroupInner&gt; object.
     */
    public Observable<Page<ADGroupInner>> listAsync() {
        return listSinglePageAsync()
            .toObservable()
            .concatMap((Page<ADGroupInner> page) -> {
                String nextLink = page.nextPageLink();
                if (nextLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listNextAsync(nextLink));
            });
    }

    /**
     * Gets list of groups for the current tenant.
     *
     * @return the Single&lt;Page&lt;ADGroupInner&gt;&gt; object if successful.
     */
    public Single<Page<ADGroupInner>> listSinglePageAsync() {
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        return service.list(this.client.tenantID(), filter, this.client.apiVersion(), this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<ADGroupInner>> res) -> res.body());
    }

    /**
     * Gets list of groups for the current tenant.
     *
     * @param filter The filter to apply to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ADGroupInner&gt; object if successful.
     */
    public PagedList<ADGroupInner> list(String filter) {
        Page<ADGroupInner> response = listSinglePageAsync(filter).blockingGet();
        return new PagedList<ADGroupInner>(response) {
            @Override
            public Page<ADGroupInner> nextPage(String nextLink) {
                return listNextSinglePageAsync(nextLink).blockingGet();
            }
        };
    }

    /**
     * Gets list of groups for the current tenant.
     *
     * @param filter The filter to apply to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;ADGroupInner&gt; object.
     */
    public Observable<Page<ADGroupInner>> listAsync(String filter) {
        return listSinglePageAsync(filter)
            .toObservable()
            .concatMap((Page<ADGroupInner> page) -> {
                String nextLink = page.nextPageLink();
                if (nextLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listNextAsync(nextLink));
            });
    }

    /**
     * Gets list of groups for the current tenant.
     *
     * @param filter The filter to apply to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;ADGroupInner&gt;&gt; object if successful.
     */
    public Single<Page<ADGroupInner>> listSinglePageAsync(String filter) {
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.tenantID(), filter, this.client.apiVersion(), this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<ADGroupInner>> res) -> res.body());
    }

    /**
     * Gets the members of a group.
     *
     * @param objectId The object ID of the group whose members should be retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;AADObjectInner&gt; object if successful.
     */
    public PagedList<AADObjectInner> getGroupMembers(@NonNull String objectId) {
        Page<AADObjectInner> response = getGroupMembersSinglePageAsync(objectId).blockingGet();
        return new PagedList<AADObjectInner>(response) {
            @Override
            public Page<AADObjectInner> nextPage(String nextLink) {
                return getGroupMembersNextSinglePageAsync(nextLink).blockingGet();
            }
        };
    }

    /**
     * Gets the members of a group.
     *
     * @param objectId The object ID of the group whose members should be retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;AADObjectInner&gt; object.
     */
    public Observable<Page<AADObjectInner>> getGroupMembersAsync(@NonNull String objectId) {
        return getGroupMembersSinglePageAsync(objectId)
            .toObservable()
            .concatMap((Page<AADObjectInner> page) -> {
                String nextLink = page.nextPageLink();
                if (nextLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(getGroupMembersNextAsync(nextLink));
            });
    }

    /**
     * Gets the members of a group.
     *
     * @param objectId The object ID of the group whose members should be retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;AADObjectInner&gt;&gt; object if successful.
     */
    public Single<Page<AADObjectInner>> getGroupMembersSinglePageAsync(@NonNull String objectId) {
        if (objectId == null) {
            throw new IllegalArgumentException("Parameter objectId is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getGroupMembers(objectId, this.client.tenantID(), this.client.apiVersion(), this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<AADObjectInner>> res) -> res.body());
    }

    /**
     * Gets group information from the directory.
     *
     * @param objectId The object ID of the user for which to get group information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ADGroupInner object if successful.
     */
    public ADGroupInner get(@NonNull String objectId) {
        return getAsync(objectId).blockingGet();
    }

    /**
     * Gets group information from the directory.
     *
     * @param objectId The object ID of the user for which to get group information.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<ADGroupInner> getAsync(@NonNull String objectId, ServiceCallback<ADGroupInner> serviceCallback) {
        return ServiceFuture.fromBody(getAsync(objectId), serviceCallback);
    }

    /**
     * Gets group information from the directory.
     *
     * @param objectId The object ID of the user for which to get group information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<ADGroupInner>> getWithRestResponseAsync(@NonNull String objectId) {
        if (objectId == null) {
            throw new IllegalArgumentException("Parameter objectId is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(objectId, this.client.tenantID(), this.client.apiVersion(), this.client.acceptLanguage());
    }

    /**
     * Gets group information from the directory.
     *
     * @param objectId The object ID of the user for which to get group information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<ADGroupInner> getAsync(@NonNull String objectId) {
        return getWithRestResponseAsync(objectId)
            .flatMapMaybe((BodyResponse<ADGroupInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Delete a group from the directory.
     *
     * @param objectId The object ID of the group to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void delete(@NonNull String objectId) {
        deleteAsync(objectId).blockingAwait();
    }

    /**
     * Delete a group from the directory.
     *
     * @param objectId The object ID of the group to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> deleteAsync(@NonNull String objectId, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(deleteAsync(objectId), serviceCallback);
    }

    /**
     * Delete a group from the directory.
     *
     * @param objectId The object ID of the group to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> deleteWithRestResponseAsync(@NonNull String objectId) {
        if (objectId == null) {
            throw new IllegalArgumentException("Parameter objectId is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(objectId, this.client.tenantID(), this.client.apiVersion(), this.client.acceptLanguage());
    }

    /**
     * Delete a group from the directory.
     *
     * @param objectId The object ID of the group to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable deleteAsync(@NonNull String objectId) {
        return deleteWithRestResponseAsync(objectId)
            .toCompletable();
    }

    /**
     * Gets a collection of object IDs of groups of which the specified group is a member.
     *
     * @param objectId The object ID of the group for which to get group membership.
     * @param parameters Group filtering parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;String&gt; object if successful.
     */
    public List<String> getMemberGroups(@NonNull String objectId, @NonNull GroupGetMemberGroupsParameters parameters) {
        return getMemberGroupsAsync(objectId, parameters).blockingGet();
    }

    /**
     * Gets a collection of object IDs of groups of which the specified group is a member.
     *
     * @param objectId The object ID of the group for which to get group membership.
     * @param parameters Group filtering parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<List<String>> getMemberGroupsAsync(@NonNull String objectId, @NonNull GroupGetMemberGroupsParameters parameters, ServiceCallback<List<String>> serviceCallback) {
        return ServiceFuture.fromBody(getMemberGroupsAsync(objectId, parameters), serviceCallback);
    }

    /**
     * Gets a collection of object IDs of groups of which the specified group is a member.
     *
     * @param objectId The object ID of the group for which to get group membership.
     * @param parameters Group filtering parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<List<String>>> getMemberGroupsWithRestResponseAsync(@NonNull String objectId, @NonNull GroupGetMemberGroupsParameters parameters) {
        if (objectId == null) {
            throw new IllegalArgumentException("Parameter objectId is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.getMemberGroups(objectId, this.client.tenantID(), parameters, this.client.apiVersion(), this.client.acceptLanguage());
    }

    /**
     * Gets a collection of object IDs of groups of which the specified group is a member.
     *
     * @param objectId The object ID of the group for which to get group membership.
     * @param parameters Group filtering parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<List<String>> getMemberGroupsAsync(@NonNull String objectId, @NonNull GroupGetMemberGroupsParameters parameters) {
        return getMemberGroupsWithRestResponseAsync(objectId, parameters)
            .flatMapMaybe((BodyResponse<List<String>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Gets a list of groups for the current tenant.
     *
     * @param nextLink Next link for the list operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ADGroupInner&gt; object if successful.
     */
    public PagedList<ADGroupInner> listNext(@NonNull String nextLink) {
        Page<ADGroupInner> response = listNextSinglePageAsync(nextLink).blockingGet();
        return new PagedList<ADGroupInner>(response) {
            @Override
            public Page<ADGroupInner> nextPage(String nextLink) {
                return listNextSinglePageAsync(nextLink).blockingGet();
            }
        };
    }

    /**
     * Gets a list of groups for the current tenant.
     *
     * @param nextLink Next link for the list operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;ADGroupInner&gt; object.
     */
    public Observable<Page<ADGroupInner>> listNextAsync(@NonNull String nextLink) {
        return listNextSinglePageAsync(nextLink)
            .toObservable()
            .concatMap((Page<ADGroupInner> page) -> {
                String nextLink1 = page.nextPageLink();
                if (nextLink1 == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listNextAsync(nextLink1));
            });
    }

    /**
     * Gets a list of groups for the current tenant.
     *
     * @param nextLink Next link for the list operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;ADGroupInner&gt;&gt; object if successful.
     */
    public Single<Page<ADGroupInner>> listNextSinglePageAsync(@NonNull String nextLink) {
        if (nextLink == null) {
            throw new IllegalArgumentException("Parameter nextLink is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        String nextUrl = String.format("%s/%s", this.client.tenantID(), nextLink);
        return service.listNext(nextUrl, this.client.apiVersion(), this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<ADGroupInner>> res) -> res.body());
    }

    /**
     * Gets the members of a group.
     *
     * @param nextLink Next link for the list operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;AADObjectInner&gt; object if successful.
     */
    public PagedList<AADObjectInner> getGroupMembersNext(@NonNull String nextLink) {
        Page<AADObjectInner> response = getGroupMembersNextSinglePageAsync(nextLink).blockingGet();
        return new PagedList<AADObjectInner>(response) {
            @Override
            public Page<AADObjectInner> nextPage(String nextLink) {
                return getGroupMembersNextSinglePageAsync(nextLink).blockingGet();
            }
        };
    }

    /**
     * Gets the members of a group.
     *
     * @param nextLink Next link for the list operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;AADObjectInner&gt; object.
     */
    public Observable<Page<AADObjectInner>> getGroupMembersNextAsync(@NonNull String nextLink) {
        return getGroupMembersNextSinglePageAsync(nextLink)
            .toObservable()
            .concatMap((Page<AADObjectInner> page) -> {
                String nextLink1 = page.nextPageLink();
                if (nextLink1 == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(getGroupMembersNextAsync(nextLink1));
            });
    }

    /**
     * Gets the members of a group.
     *
     * @param nextLink Next link for the list operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;AADObjectInner&gt;&gt; object if successful.
     */
    public Single<Page<AADObjectInner>> getGroupMembersNextSinglePageAsync(@NonNull String nextLink) {
        if (nextLink == null) {
            throw new IllegalArgumentException("Parameter nextLink is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        String nextUrl = String.format("%s/%s", this.client.tenantID(), nextLink);
        return service.getGroupMembersNext(nextUrl, this.client.apiVersion(), this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<AADObjectInner>> res) -> res.body());
    }
}
