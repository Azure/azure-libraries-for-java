/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.v2.management.graphrbac.implementation;

import com.microsoft.azure.v2.AzureProxy;
import com.microsoft.azure.v2.CloudException;
import com.microsoft.azure.v2.Page;
import com.microsoft.azure.v2.PagedList;
import com.microsoft.azure.v2.management.graphrbac.RoleAssignmentCreateParameters;
import com.microsoft.azure.v2.management.resources.fluentcore.collection.InnerSupportsDelete;
import com.microsoft.azure.v2.management.resources.fluentcore.collection.InnerSupportsListing;
import com.microsoft.rest.v2.BodyResponse;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.Validator;
import com.microsoft.rest.v2.annotations.BodyParam;
import com.microsoft.rest.v2.annotations.DELETE;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.HeaderParam;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.PathParam;
import com.microsoft.rest.v2.annotations.PUT;
import com.microsoft.rest.v2.annotations.QueryParam;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import io.reactivex.Maybe;
import io.reactivex.Observable;
import io.reactivex.Single;
import io.reactivex.annotations.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * RoleAssignments.
 */
public final class RoleAssignmentsInner implements InnerSupportsDelete<RoleAssignmentInner>, InnerSupportsListing<RoleAssignmentInner> {
    /**
     * The proxy service used to perform REST calls.
     */
    private RoleAssignmentsService service;

    /**
     * The service client containing this operation class.
     */
    private AuthorizationManagementClientImpl client;

    /**
     * Initializes an instance of RoleAssignmentsInner.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public RoleAssignmentsInner(AuthorizationManagementClientImpl client) {
        this.service = AzureProxy.create(RoleAssignmentsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for RoleAssignments to be used
     * by the proxy service to perform REST calls.
     */
    @Host("https://management.azure.com")
    private interface RoleAssignmentsService {
        @GET("subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/roleAssignments")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PageImpl<RoleAssignmentInner>>> listForResource(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("resourceProviderNamespace") String resourceProviderNamespace, @PathParam(value = "parentResourcePath", encoded = true) String parentResourcePath, @PathParam(value = "resourceType", encoded = true) String resourceType, @PathParam("resourceName") String resourceName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("$filter") String filter, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/roleAssignments")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PageImpl<RoleAssignmentInner>>> listByResourceGroup(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("$filter") String filter, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @DELETE("{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<RoleAssignmentInner>> delete(@PathParam(value = "scope", encoded = true) String scope, @PathParam("roleAssignmentName") String roleAssignmentName, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @PUT("{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<RoleAssignmentInner>> create(@PathParam(value = "scope", encoded = true) String scope, @PathParam("roleAssignmentName") String roleAssignmentName, @BodyParam("application/json; charset=utf-8") RoleAssignmentCreateParameters parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<RoleAssignmentInner>> get(@PathParam(value = "scope", encoded = true) String scope, @PathParam("roleAssignmentName") String roleAssignmentName, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @DELETE("{roleId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<RoleAssignmentInner>> deleteById(@PathParam(value = "roleId", encoded = true) String roleId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @PUT("{roleId}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<RoleAssignmentInner>> createById(@PathParam(value = "roleId", encoded = true) String roleId, @BodyParam("application/json; charset=utf-8") RoleAssignmentCreateParameters parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{roleId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<RoleAssignmentInner>> getById(@PathParam(value = "roleId", encoded = true) String roleId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Authorization/roleAssignments")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PageImpl<RoleAssignmentInner>>> list(@PathParam("subscriptionId") String subscriptionId, @QueryParam("$filter") String filter, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{scope}/providers/Microsoft.Authorization/roleAssignments")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PageImpl<RoleAssignmentInner>>> listForScope(@PathParam(value = "scope", encoded = true) String scope, @QueryParam("$filter") String filter, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PageImpl<RoleAssignmentInner>>> listForResourceNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PageImpl<RoleAssignmentInner>>> listForResourceGroupNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PageImpl<RoleAssignmentInner>>> listNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PageImpl<RoleAssignmentInner>>> listForScopeNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);
    }

    /**
     * Gets role assignments for a resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourcePath The parent resource identity.
     * @param resourceType The resource type of the resource.
     * @param resourceName The name of the resource to get role assignments for.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;RoleAssignmentInner&gt; object if successful.
     */
    public PagedList<RoleAssignmentInner> listForResource(@NonNull String resourceGroupName, @NonNull String resourceProviderNamespace, @NonNull String parentResourcePath, @NonNull String resourceType, @NonNull String resourceName) {
        Page<RoleAssignmentInner> response = listForResourceSinglePageAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName).blockingGet();
        return new PagedList<RoleAssignmentInner>(response) {
            @Override
            public Page<RoleAssignmentInner> nextPage(String nextPageLink) {
                return listForResourceNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Gets role assignments for a resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourcePath The parent resource identity.
     * @param resourceType The resource type of the resource.
     * @param resourceName The name of the resource to get role assignments for.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;RoleAssignmentInner&gt; object.
     */
    public Observable<Page<RoleAssignmentInner>> listForResourceAsync(@NonNull String resourceGroupName, @NonNull String resourceProviderNamespace, @NonNull String parentResourcePath, @NonNull String resourceType, @NonNull String resourceName) {
        return listForResourceSinglePageAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName)
            .toObservable()
            .concatMap((Page<RoleAssignmentInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listForResourceNextAsync(nextPageLink));
            });
    }

    /**
     * Gets role assignments for a resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourcePath The parent resource identity.
     * @param resourceType The resource type of the resource.
     * @param resourceName The name of the resource to get role assignments for.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;RoleAssignmentInner&gt;&gt; object if successful.
     */
    public Single<Page<RoleAssignmentInner>> listForResourceSinglePageAsync(@NonNull String resourceGroupName, @NonNull String resourceProviderNamespace, @NonNull String parentResourcePath, @NonNull String resourceType, @NonNull String resourceName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceProviderNamespace == null) {
            throw new IllegalArgumentException("Parameter resourceProviderNamespace is required and cannot be null.");
        }
        if (parentResourcePath == null) {
            throw new IllegalArgumentException("Parameter parentResourcePath is required and cannot be null.");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException("Parameter resourceType is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2018-01-01-preview";
        final String filter = null;
        return service.listForResource(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, this.client.subscriptionId(), filter, apiVersion, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<RoleAssignmentInner>> res) -> res.body());
    }

    /**
     * Gets role assignments for a resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourcePath The parent resource identity.
     * @param resourceType The resource type of the resource.
     * @param resourceName The name of the resource to get role assignments for.
     * @param filter The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;RoleAssignmentInner&gt; object if successful.
     */
    public PagedList<RoleAssignmentInner> listForResource(@NonNull String resourceGroupName, @NonNull String resourceProviderNamespace, @NonNull String parentResourcePath, @NonNull String resourceType, @NonNull String resourceName, String filter) {
        Page<RoleAssignmentInner> response = listForResourceSinglePageAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter).blockingGet();
        return new PagedList<RoleAssignmentInner>(response) {
            @Override
            public Page<RoleAssignmentInner> nextPage(String nextPageLink) {
                return listForResourceNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Gets role assignments for a resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourcePath The parent resource identity.
     * @param resourceType The resource type of the resource.
     * @param resourceName The name of the resource to get role assignments for.
     * @param filter The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;RoleAssignmentInner&gt; object.
     */
    public Observable<Page<RoleAssignmentInner>> listForResourceAsync(@NonNull String resourceGroupName, @NonNull String resourceProviderNamespace, @NonNull String parentResourcePath, @NonNull String resourceType, @NonNull String resourceName, String filter) {
        return listForResourceSinglePageAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter)
            .toObservable()
            .concatMap((Page<RoleAssignmentInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listForResourceNextAsync(nextPageLink));
            });
    }

    /**
     * Gets role assignments for a resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param parentResourcePath The parent resource identity.
     * @param resourceType The resource type of the resource.
     * @param resourceName The name of the resource to get role assignments for.
     * @param filter The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;RoleAssignmentInner&gt;&gt; object if successful.
     */
    public Single<Page<RoleAssignmentInner>> listForResourceSinglePageAsync(@NonNull String resourceGroupName, @NonNull String resourceProviderNamespace, @NonNull String parentResourcePath, @NonNull String resourceType, @NonNull String resourceName, String filter) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (resourceProviderNamespace == null) {
            throw new IllegalArgumentException("Parameter resourceProviderNamespace is required and cannot be null.");
        }
        if (parentResourcePath == null) {
            throw new IllegalArgumentException("Parameter parentResourcePath is required and cannot be null.");
        }
        if (resourceType == null) {
            throw new IllegalArgumentException("Parameter resourceType is required and cannot be null.");
        }
        if (resourceName == null) {
            throw new IllegalArgumentException("Parameter resourceName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2018-01-01-preview";
        return service.listForResource(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, this.client.subscriptionId(), filter, apiVersion, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<RoleAssignmentInner>> res) -> res.body());
    }

    /**
     * Gets role assignments for a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;RoleAssignmentInner&gt; object if successful.
     */
    public PagedList<RoleAssignmentInner> listByResourceGroup(@NonNull String resourceGroupName) {
        Page<RoleAssignmentInner> response = listByResourceGroupSinglePageAsync(resourceGroupName).blockingGet();
        return new PagedList<RoleAssignmentInner>(response) {
            @Override
            public Page<RoleAssignmentInner> nextPage(String nextPageLink) {
                return listForResourceGroupNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Gets role assignments for a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;RoleAssignmentInner&gt; object.
     */
    public Observable<Page<RoleAssignmentInner>> listByResourceGroupAsync(@NonNull String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .toObservable()
            .concatMap((Page<RoleAssignmentInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listForResourceGroupNextAsync(nextPageLink));
            });
    }

    /**
     * Gets role assignments for a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;RoleAssignmentInner&gt;&gt; object if successful.
     */
    public Single<Page<RoleAssignmentInner>> listByResourceGroupSinglePageAsync(@NonNull String resourceGroupName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2018-01-01-preview";
        final String filter = null;
        return service.listByResourceGroup(resourceGroupName, this.client.subscriptionId(), filter, apiVersion, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<RoleAssignmentInner>> res) -> res.body());
    }

    /**
     * Gets role assignments for a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param filter The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;RoleAssignmentInner&gt; object if successful.
     */
    public PagedList<RoleAssignmentInner> listByResourceGroup(@NonNull String resourceGroupName, String filter) {
        Page<RoleAssignmentInner> response = listByResourceGroupSinglePageAsync(resourceGroupName, filter).blockingGet();
        return new PagedList<RoleAssignmentInner>(response) {
            @Override
            public Page<RoleAssignmentInner> nextPage(String nextPageLink) {
                return listForResourceGroupNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Gets role assignments for a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param filter The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;RoleAssignmentInner&gt; object.
     */
    public Observable<Page<RoleAssignmentInner>> listByResourceGroupAsync(@NonNull String resourceGroupName, String filter) {
        return listByResourceGroupSinglePageAsync(resourceGroupName, filter)
            .toObservable()
            .concatMap((Page<RoleAssignmentInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listForResourceGroupNextAsync(nextPageLink));
            });
    }

    /**
     * Gets role assignments for a resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param filter The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;RoleAssignmentInner&gt;&gt; object if successful.
     */
    public Single<Page<RoleAssignmentInner>> listByResourceGroupSinglePageAsync(@NonNull String resourceGroupName, String filter) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2018-01-01-preview";
        return service.listByResourceGroup(resourceGroupName, this.client.subscriptionId(), filter, apiVersion, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<RoleAssignmentInner>> res) -> res.body());
    }

    /**
     * Deletes a role assignment.
     *
     * @param scope The scope of the role assignment to delete.
     * @param roleAssignmentName The name of the role assignment to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the RoleAssignmentInner object if successful.
     */
    public RoleAssignmentInner delete(@NonNull String scope, @NonNull String roleAssignmentName) {
        return deleteAsync(scope, roleAssignmentName).blockingGet();
    }

    /**
     * Deletes a role assignment.
     *
     * @param scope The scope of the role assignment to delete.
     * @param roleAssignmentName The name of the role assignment to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<RoleAssignmentInner> deleteAsync(@NonNull String scope, @NonNull String roleAssignmentName, ServiceCallback<RoleAssignmentInner> serviceCallback) {
        return ServiceFuture.fromBody(deleteAsync(scope, roleAssignmentName), serviceCallback);
    }

    /**
     * Deletes a role assignment.
     *
     * @param scope The scope of the role assignment to delete.
     * @param roleAssignmentName The name of the role assignment to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<RoleAssignmentInner>> deleteWithRestResponseAsync(@NonNull String scope, @NonNull String roleAssignmentName) {
        if (scope == null) {
            throw new IllegalArgumentException("Parameter scope is required and cannot be null.");
        }
        if (roleAssignmentName == null) {
            throw new IllegalArgumentException("Parameter roleAssignmentName is required and cannot be null.");
        }
        final String apiVersion = "2018-01-01-preview";
        return service.delete(scope, roleAssignmentName, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Deletes a role assignment.
     *
     * @param scope The scope of the role assignment to delete.
     * @param roleAssignmentName The name of the role assignment to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<RoleAssignmentInner> deleteAsync(@NonNull String scope, @NonNull String roleAssignmentName) {
        return deleteWithRestResponseAsync(scope, roleAssignmentName)
            .flatMapMaybe((BodyResponse<RoleAssignmentInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Creates a role assignment.
     *
     * @param scope The scope of the role assignment to create. The scope can be any REST resource instance. For example, use '/subscriptions/{subscription-id}/' for a subscription, '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for a resource group, and '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}' for a resource.
     * @param roleAssignmentName The name of the role assignment to create. It can be any valid GUID.
     * @param parameters Parameters for the role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the RoleAssignmentInner object if successful.
     */
    public RoleAssignmentInner create(@NonNull String scope, @NonNull String roleAssignmentName, @NonNull RoleAssignmentCreateParameters parameters) {
        return createAsync(scope, roleAssignmentName, parameters).blockingGet();
    }

    /**
     * Creates a role assignment.
     *
     * @param scope The scope of the role assignment to create. The scope can be any REST resource instance. For example, use '/subscriptions/{subscription-id}/' for a subscription, '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for a resource group, and '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}' for a resource.
     * @param roleAssignmentName The name of the role assignment to create. It can be any valid GUID.
     * @param parameters Parameters for the role assignment.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<RoleAssignmentInner> createAsync(@NonNull String scope, @NonNull String roleAssignmentName, @NonNull RoleAssignmentCreateParameters parameters, ServiceCallback<RoleAssignmentInner> serviceCallback) {
        return ServiceFuture.fromBody(createAsync(scope, roleAssignmentName, parameters), serviceCallback);
    }

    /**
     * Creates a role assignment.
     *
     * @param scope The scope of the role assignment to create. The scope can be any REST resource instance. For example, use '/subscriptions/{subscription-id}/' for a subscription, '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for a resource group, and '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}' for a resource.
     * @param roleAssignmentName The name of the role assignment to create. It can be any valid GUID.
     * @param parameters Parameters for the role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<RoleAssignmentInner>> createWithRestResponseAsync(@NonNull String scope, @NonNull String roleAssignmentName, @NonNull RoleAssignmentCreateParameters parameters) {
        if (scope == null) {
            throw new IllegalArgumentException("Parameter scope is required and cannot be null.");
        }
        if (roleAssignmentName == null) {
            throw new IllegalArgumentException("Parameter roleAssignmentName is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2018-01-01-preview";
        return service.create(scope, roleAssignmentName, parameters, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Creates a role assignment.
     *
     * @param scope The scope of the role assignment to create. The scope can be any REST resource instance. For example, use '/subscriptions/{subscription-id}/' for a subscription, '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for a resource group, and '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}' for a resource.
     * @param roleAssignmentName The name of the role assignment to create. It can be any valid GUID.
     * @param parameters Parameters for the role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<RoleAssignmentInner> createAsync(@NonNull String scope, @NonNull String roleAssignmentName, @NonNull RoleAssignmentCreateParameters parameters) {
        return createWithRestResponseAsync(scope, roleAssignmentName, parameters)
            .flatMapMaybe((BodyResponse<RoleAssignmentInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get the specified role assignment.
     *
     * @param scope The scope of the role assignment.
     * @param roleAssignmentName The name of the role assignment to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the RoleAssignmentInner object if successful.
     */
    public RoleAssignmentInner get(@NonNull String scope, @NonNull String roleAssignmentName) {
        return getAsync(scope, roleAssignmentName).blockingGet();
    }

    /**
     * Get the specified role assignment.
     *
     * @param scope The scope of the role assignment.
     * @param roleAssignmentName The name of the role assignment to get.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<RoleAssignmentInner> getAsync(@NonNull String scope, @NonNull String roleAssignmentName, ServiceCallback<RoleAssignmentInner> serviceCallback) {
        return ServiceFuture.fromBody(getAsync(scope, roleAssignmentName), serviceCallback);
    }

    /**
     * Get the specified role assignment.
     *
     * @param scope The scope of the role assignment.
     * @param roleAssignmentName The name of the role assignment to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<RoleAssignmentInner>> getWithRestResponseAsync(@NonNull String scope, @NonNull String roleAssignmentName) {
        if (scope == null) {
            throw new IllegalArgumentException("Parameter scope is required and cannot be null.");
        }
        if (roleAssignmentName == null) {
            throw new IllegalArgumentException("Parameter roleAssignmentName is required and cannot be null.");
        }
        final String apiVersion = "2018-01-01-preview";
        return service.get(scope, roleAssignmentName, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Get the specified role assignment.
     *
     * @param scope The scope of the role assignment.
     * @param roleAssignmentName The name of the role assignment to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<RoleAssignmentInner> getAsync(@NonNull String scope, @NonNull String roleAssignmentName) {
        return getWithRestResponseAsync(scope, roleAssignmentName)
            .flatMapMaybe((BodyResponse<RoleAssignmentInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Deletes a role assignment.
     *
     * @param roleId The ID of the role assignment to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the RoleAssignmentInner object if successful.
     */
    public RoleAssignmentInner deleteById(@NonNull String roleId) {
        return deleteByIdAsync(roleId).blockingGet();
    }

    /**
     * Deletes a role assignment.
     *
     * @param roleId The ID of the role assignment to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<RoleAssignmentInner> deleteByIdAsync(@NonNull String roleId, ServiceCallback<RoleAssignmentInner> serviceCallback) {
        return ServiceFuture.fromBody(deleteByIdAsync(roleId), serviceCallback);
    }

    /**
     * Deletes a role assignment.
     *
     * @param roleId The ID of the role assignment to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<RoleAssignmentInner>> deleteByIdWithRestResponseAsync(@NonNull String roleId) {
        if (roleId == null) {
            throw new IllegalArgumentException("Parameter roleId is required and cannot be null.");
        }
        final String apiVersion = "2018-01-01-preview";
        return service.deleteById(roleId, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Deletes a role assignment.
     *
     * @param roleId The ID of the role assignment to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<RoleAssignmentInner> deleteByIdAsync(@NonNull String roleId) {
        return deleteByIdWithRestResponseAsync(roleId)
            .flatMapMaybe((BodyResponse<RoleAssignmentInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Creates a role assignment by ID.
     *
     * @param roleId The ID of the role assignment to create.
     * @param parameters Parameters for the role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the RoleAssignmentInner object if successful.
     */
    public RoleAssignmentInner createById(@NonNull String roleId, @NonNull RoleAssignmentCreateParameters parameters) {
        return createByIdAsync(roleId, parameters).blockingGet();
    }

    /**
     * Creates a role assignment by ID.
     *
     * @param roleId The ID of the role assignment to create.
     * @param parameters Parameters for the role assignment.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<RoleAssignmentInner> createByIdAsync(@NonNull String roleId, @NonNull RoleAssignmentCreateParameters parameters, ServiceCallback<RoleAssignmentInner> serviceCallback) {
        return ServiceFuture.fromBody(createByIdAsync(roleId, parameters), serviceCallback);
    }

    /**
     * Creates a role assignment by ID.
     *
     * @param roleId The ID of the role assignment to create.
     * @param parameters Parameters for the role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<RoleAssignmentInner>> createByIdWithRestResponseAsync(@NonNull String roleId, @NonNull RoleAssignmentCreateParameters parameters) {
        if (roleId == null) {
            throw new IllegalArgumentException("Parameter roleId is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2018-01-01-preview";
        return service.createById(roleId, parameters, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Creates a role assignment by ID.
     *
     * @param roleId The ID of the role assignment to create.
     * @param parameters Parameters for the role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<RoleAssignmentInner> createByIdAsync(@NonNull String roleId, @NonNull RoleAssignmentCreateParameters parameters) {
        return createByIdWithRestResponseAsync(roleId, parameters)
            .flatMapMaybe((BodyResponse<RoleAssignmentInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Gets a role assignment by ID.
     *
     * @param roleId The ID of the role assignment to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the RoleAssignmentInner object if successful.
     */
    public RoleAssignmentInner getById(@NonNull String roleId) {
        return getByIdAsync(roleId).blockingGet();
    }

    /**
     * Gets a role assignment by ID.
     *
     * @param roleId The ID of the role assignment to get.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<RoleAssignmentInner> getByIdAsync(@NonNull String roleId, ServiceCallback<RoleAssignmentInner> serviceCallback) {
        return ServiceFuture.fromBody(getByIdAsync(roleId), serviceCallback);
    }

    /**
     * Gets a role assignment by ID.
     *
     * @param roleId The ID of the role assignment to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<RoleAssignmentInner>> getByIdWithRestResponseAsync(@NonNull String roleId) {
        if (roleId == null) {
            throw new IllegalArgumentException("Parameter roleId is required and cannot be null.");
        }
        final String apiVersion = "2018-01-01-preview";
        return service.getById(roleId, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Gets a role assignment by ID.
     *
     * @param roleId The ID of the role assignment to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<RoleAssignmentInner> getByIdAsync(@NonNull String roleId) {
        return getByIdWithRestResponseAsync(roleId)
            .flatMapMaybe((BodyResponse<RoleAssignmentInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Gets all role assignments for the subscription.
     *
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;RoleAssignmentInner&gt; object if successful.
     */
    public PagedList<RoleAssignmentInner> list() {
        Page<RoleAssignmentInner> response = listSinglePageAsync().blockingGet();
        return new PagedList<RoleAssignmentInner>(response) {
            @Override
            public Page<RoleAssignmentInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Gets all role assignments for the subscription.
     *
     * @return the observable to the PagedList&lt;RoleAssignmentInner&gt; object.
     */
    public Observable<Page<RoleAssignmentInner>> listAsync() {
        return listSinglePageAsync()
            .toObservable()
            .concatMap((Page<RoleAssignmentInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listNextAsync(nextPageLink));
            });
    }

    /**
     * Gets all role assignments for the subscription.
     *
     * @return the Single&lt;Page&lt;RoleAssignmentInner&gt;&gt; object if successful.
     */
    public Single<Page<RoleAssignmentInner>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2018-01-01-preview";
        final String filter = null;
        return service.list(this.client.subscriptionId(), filter, apiVersion, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<RoleAssignmentInner>> res) -> res.body());
    }

    /**
     * Gets all role assignments for the subscription.
     *
     * @param filter The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;RoleAssignmentInner&gt; object if successful.
     */
    public PagedList<RoleAssignmentInner> list(String filter) {
        Page<RoleAssignmentInner> response = listSinglePageAsync(filter).blockingGet();
        return new PagedList<RoleAssignmentInner>(response) {
            @Override
            public Page<RoleAssignmentInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Gets all role assignments for the subscription.
     *
     * @param filter The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;RoleAssignmentInner&gt; object.
     */
    public Observable<Page<RoleAssignmentInner>> listAsync(String filter) {
        return listSinglePageAsync(filter)
            .toObservable()
            .concatMap((Page<RoleAssignmentInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listNextAsync(nextPageLink));
            });
    }

    /**
     * Gets all role assignments for the subscription.
     *
     * @param filter The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;RoleAssignmentInner&gt;&gt; object if successful.
     */
    public Single<Page<RoleAssignmentInner>> listSinglePageAsync(String filter) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2018-01-01-preview";
        return service.list(this.client.subscriptionId(), filter, apiVersion, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<RoleAssignmentInner>> res) -> res.body());
    }

    /**
     * Gets role assignments for a scope.
     *
     * @param scope The scope of the role assignments.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;RoleAssignmentInner&gt; object if successful.
     */
    public PagedList<RoleAssignmentInner> listForScope(@NonNull String scope) {
        Page<RoleAssignmentInner> response = listForScopeSinglePageAsync(scope).blockingGet();
        return new PagedList<RoleAssignmentInner>(response) {
            @Override
            public Page<RoleAssignmentInner> nextPage(String nextPageLink) {
                return listForScopeNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Gets role assignments for a scope.
     *
     * @param scope The scope of the role assignments.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;RoleAssignmentInner&gt; object.
     */
    public Observable<Page<RoleAssignmentInner>> listForScopeAsync(@NonNull String scope) {
        return listForScopeSinglePageAsync(scope)
            .toObservable()
            .concatMap((Page<RoleAssignmentInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listForScopeNextAsync(nextPageLink));
            });
    }

    /**
     * Gets role assignments for a scope.
     *
     * @param scope The scope of the role assignments.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;RoleAssignmentInner&gt;&gt; object if successful.
     */
    public Single<Page<RoleAssignmentInner>> listForScopeSinglePageAsync(@NonNull String scope) {
        if (scope == null) {
            throw new IllegalArgumentException("Parameter scope is required and cannot be null.");
        }
        final String apiVersion = "2018-01-01-preview";
        final String filter = null;
        return service.listForScope(scope, filter, apiVersion, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<RoleAssignmentInner>> res) -> res.body());
    }

    /**
     * Gets role assignments for a scope.
     *
     * @param scope The scope of the role assignments.
     * @param filter The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;RoleAssignmentInner&gt; object if successful.
     */
    public PagedList<RoleAssignmentInner> listForScope(@NonNull String scope, String filter) {
        Page<RoleAssignmentInner> response = listForScopeSinglePageAsync(scope, filter).blockingGet();
        return new PagedList<RoleAssignmentInner>(response) {
            @Override
            public Page<RoleAssignmentInner> nextPage(String nextPageLink) {
                return listForScopeNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Gets role assignments for a scope.
     *
     * @param scope The scope of the role assignments.
     * @param filter The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;RoleAssignmentInner&gt; object.
     */
    public Observable<Page<RoleAssignmentInner>> listForScopeAsync(@NonNull String scope, String filter) {
        return listForScopeSinglePageAsync(scope, filter)
            .toObservable()
            .concatMap((Page<RoleAssignmentInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listForScopeNextAsync(nextPageLink));
            });
    }

    /**
     * Gets role assignments for a scope.
     *
     * @param scope The scope of the role assignments.
     * @param filter The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;RoleAssignmentInner&gt;&gt; object if successful.
     */
    public Single<Page<RoleAssignmentInner>> listForScopeSinglePageAsync(@NonNull String scope, String filter) {
        if (scope == null) {
            throw new IllegalArgumentException("Parameter scope is required and cannot be null.");
        }
        final String apiVersion = "2018-01-01-preview";
        return service.listForScope(scope, filter, apiVersion, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<RoleAssignmentInner>> res) -> res.body());
    }

    /**
     * Gets role assignments for a resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;RoleAssignmentInner&gt; object if successful.
     */
    public PagedList<RoleAssignmentInner> listForResourceNext(@NonNull String nextPageLink) {
        Page<RoleAssignmentInner> response = listForResourceNextSinglePageAsync(nextPageLink).blockingGet();
        return new PagedList<RoleAssignmentInner>(response) {
            @Override
            public Page<RoleAssignmentInner> nextPage(String nextPageLink) {
                return listForResourceNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Gets role assignments for a resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;RoleAssignmentInner&gt; object.
     */
    public Observable<Page<RoleAssignmentInner>> listForResourceNextAsync(@NonNull String nextPageLink) {
        return listForResourceNextSinglePageAsync(nextPageLink)
            .toObservable()
            .concatMap((Page<RoleAssignmentInner> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listForResourceNextAsync(nextPageLink1));
            });
    }

    /**
     * Gets role assignments for a resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;RoleAssignmentInner&gt;&gt; object if successful.
     */
    public Single<Page<RoleAssignmentInner>> listForResourceNextSinglePageAsync(@NonNull String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listForResourceNext(nextUrl, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<RoleAssignmentInner>> res) -> res.body());
    }

    /**
     * Gets role assignments for a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;RoleAssignmentInner&gt; object if successful.
     */
    public PagedList<RoleAssignmentInner> listForResourceGroupNext(@NonNull String nextPageLink) {
        Page<RoleAssignmentInner> response = listForResourceGroupNextSinglePageAsync(nextPageLink).blockingGet();
        return new PagedList<RoleAssignmentInner>(response) {
            @Override
            public Page<RoleAssignmentInner> nextPage(String nextPageLink) {
                return listForResourceGroupNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Gets role assignments for a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;RoleAssignmentInner&gt; object.
     */
    public Observable<Page<RoleAssignmentInner>> listForResourceGroupNextAsync(@NonNull String nextPageLink) {
        return listForResourceGroupNextSinglePageAsync(nextPageLink)
            .toObservable()
            .concatMap((Page<RoleAssignmentInner> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listForResourceGroupNextAsync(nextPageLink1));
            });
    }

    /**
     * Gets role assignments for a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;RoleAssignmentInner&gt;&gt; object if successful.
     */
    public Single<Page<RoleAssignmentInner>> listForResourceGroupNextSinglePageAsync(@NonNull String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listForResourceGroupNext(nextUrl, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<RoleAssignmentInner>> res) -> res.body());
    }

    /**
     * Gets all role assignments for the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;RoleAssignmentInner&gt; object if successful.
     */
    public PagedList<RoleAssignmentInner> listNext(@NonNull String nextPageLink) {
        Page<RoleAssignmentInner> response = listNextSinglePageAsync(nextPageLink).blockingGet();
        return new PagedList<RoleAssignmentInner>(response) {
            @Override
            public Page<RoleAssignmentInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Gets all role assignments for the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;RoleAssignmentInner&gt; object.
     */
    public Observable<Page<RoleAssignmentInner>> listNextAsync(@NonNull String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .toObservable()
            .concatMap((Page<RoleAssignmentInner> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listNextAsync(nextPageLink1));
            });
    }

    /**
     * Gets all role assignments for the subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;RoleAssignmentInner&gt;&gt; object if successful.
     */
    public Single<Page<RoleAssignmentInner>> listNextSinglePageAsync(@NonNull String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<RoleAssignmentInner>> res) -> res.body());
    }

    /**
     * Gets role assignments for a scope.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;RoleAssignmentInner&gt; object if successful.
     */
    public PagedList<RoleAssignmentInner> listForScopeNext(@NonNull String nextPageLink) {
        Page<RoleAssignmentInner> response = listForScopeNextSinglePageAsync(nextPageLink).blockingGet();
        return new PagedList<RoleAssignmentInner>(response) {
            @Override
            public Page<RoleAssignmentInner> nextPage(String nextPageLink) {
                return listForScopeNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Gets role assignments for a scope.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;RoleAssignmentInner&gt; object.
     */
    public Observable<Page<RoleAssignmentInner>> listForScopeNextAsync(@NonNull String nextPageLink) {
        return listForScopeNextSinglePageAsync(nextPageLink)
            .toObservable()
            .concatMap((Page<RoleAssignmentInner> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listForScopeNextAsync(nextPageLink1));
            });
    }

    /**
     * Gets role assignments for a scope.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;RoleAssignmentInner&gt;&gt; object if successful.
     */
    public Single<Page<RoleAssignmentInner>> listForScopeNextSinglePageAsync(@NonNull String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listForScopeNext(nextUrl, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<RoleAssignmentInner>> res) -> res.body());
    }
}
