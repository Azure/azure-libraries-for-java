/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.v2.management.graphrbac.implementation;

import com.microsoft.azure.v2.AzureProxy;
import com.microsoft.azure.v2.Page;
import com.microsoft.azure.v2.PagedList;
import com.microsoft.azure.v2.management.graphrbac.GraphErrorException;
import com.microsoft.azure.v2.management.graphrbac.KeyCredentialsUpdateParameters;
import com.microsoft.azure.v2.management.graphrbac.PasswordCredentialsUpdateParameters;
import com.microsoft.azure.v2.management.graphrbac.ServicePrincipalCreateParameters;
import com.microsoft.rest.v2.BodyResponse;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.Validator;
import com.microsoft.rest.v2.VoidResponse;
import com.microsoft.rest.v2.annotations.BodyParam;
import com.microsoft.rest.v2.annotations.DELETE;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.HeaderParam;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.PATCH;
import com.microsoft.rest.v2.annotations.PathParam;
import com.microsoft.rest.v2.annotations.POST;
import com.microsoft.rest.v2.annotations.QueryParam;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import io.reactivex.Completable;
import io.reactivex.Maybe;
import io.reactivex.Observable;
import io.reactivex.Single;
import io.reactivex.annotations.NonNull;
import java.util.List;

/**
 * An instance of this class provides access to all the operations defined in
 * ServicePrincipals.
 */
public final class ServicePrincipalsInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private ServicePrincipalsService service;

    /**
     * The service client containing this operation class.
     */
    private GraphRbacManagementClientImpl client;

    /**
     * Initializes an instance of ServicePrincipalsInner.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public ServicePrincipalsInner(GraphRbacManagementClientImpl client) {
        this.service = AzureProxy.create(ServicePrincipalsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for ServicePrincipals to be used
     * by the proxy service to perform REST calls.
     */
    @Host("https://graph.windows.net")
    private interface ServicePrincipalsService {
        @POST("{tenantID}/servicePrincipals")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<BodyResponse<ServicePrincipalInner>> create(@PathParam("tenantID") String tenantID, @BodyParam("application/json; charset=utf-8") ServicePrincipalCreateParameters parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{tenantID}/servicePrincipals")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<BodyResponse<PageImpl<ServicePrincipalInner>>> list(@PathParam("tenantID") String tenantID, @QueryParam("$filter") String filter, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @DELETE("{tenantID}/servicePrincipals/{objectId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<VoidResponse> delete(@PathParam("objectId") String objectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{tenantID}/servicePrincipals/{objectId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<BodyResponse<ServicePrincipalInner>> get(@PathParam("objectId") String objectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{tenantID}/servicePrincipals/{objectId}/owners")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<BodyResponse<List<DirectoryObjectInner>>> listOwners(@PathParam("objectId") String objectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{tenantID}/servicePrincipals/{objectId}/keyCredentials")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<BodyResponse<PageImpl<KeyCredentialInner>>> listKeyCredentials(@PathParam("objectId") String objectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @PATCH("{tenantID}/servicePrincipals/{objectId}/keyCredentials")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<VoidResponse> updateKeyCredentials(@PathParam("objectId") String objectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @BodyParam("application/json; charset=utf-8") KeyCredentialsUpdateParameters parameters);

        @GET("{tenantID}/servicePrincipals/{objectId}/passwordCredentials")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<BodyResponse<PageImpl<PasswordCredentialInner>>> listPasswordCredentials(@PathParam("objectId") String objectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @PATCH("{tenantID}/servicePrincipals/{objectId}/passwordCredentials")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<VoidResponse> updatePasswordCredentials(@PathParam("objectId") String objectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @BodyParam("application/json; charset=utf-8") PasswordCredentialsUpdateParameters parameters);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<BodyResponse<PageImpl<ServicePrincipalInner>>> listNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);
    }

    /**
     * Creates a service principal in the directory.
     *
     * @param parameters Parameters to create a service principal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ServicePrincipalInner object if successful.
     */
    public ServicePrincipalInner create(@NonNull ServicePrincipalCreateParameters parameters) {
        return createAsync(parameters).blockingGet();
    }

    /**
     * Creates a service principal in the directory.
     *
     * @param parameters Parameters to create a service principal.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<ServicePrincipalInner> createAsync(@NonNull ServicePrincipalCreateParameters parameters, ServiceCallback<ServicePrincipalInner> serviceCallback) {
        return ServiceFuture.fromBody(createAsync(parameters), serviceCallback);
    }

    /**
     * Creates a service principal in the directory.
     *
     * @param parameters Parameters to create a service principal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<ServicePrincipalInner>> createWithRestResponseAsync(@NonNull ServicePrincipalCreateParameters parameters) {
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.create(this.client.tenantID(), parameters, this.client.apiVersion(), this.client.acceptLanguage());
    }

    /**
     * Creates a service principal in the directory.
     *
     * @param parameters Parameters to create a service principal.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<ServicePrincipalInner> createAsync(@NonNull ServicePrincipalCreateParameters parameters) {
        return createWithRestResponseAsync(parameters)
            .flatMapMaybe((BodyResponse<ServicePrincipalInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Gets a list of service principals from the current tenant.
     *
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ServicePrincipalInner&gt; object if successful.
     */
    public PagedList<ServicePrincipalInner> list() {
        Page<ServicePrincipalInner> response = listSinglePageAsync().blockingGet();
        return new PagedList<ServicePrincipalInner>(response) {
            @Override
            public Page<ServicePrincipalInner> nextPage(String nextLink) {
                return listNextSinglePageAsync(nextLink).blockingGet();
            }
        };
    }

    /**
     * Gets a list of service principals from the current tenant.
     *
     * @return the observable to the PagedList&lt;ServicePrincipalInner&gt; object.
     */
    public Observable<Page<ServicePrincipalInner>> listAsync() {
        return listSinglePageAsync()
            .toObservable()
            .concatMap((Page<ServicePrincipalInner> page) -> {
                String nextLink = page.nextPageLink();
                if (nextLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listNextAsync(nextLink));
            });
    }

    /**
     * Gets a list of service principals from the current tenant.
     *
     * @return the Single&lt;Page&lt;ServicePrincipalInner&gt;&gt; object if successful.
     */
    public Single<Page<ServicePrincipalInner>> listSinglePageAsync() {
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        return service.list(this.client.tenantID(), filter, this.client.apiVersion(), this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<ServicePrincipalInner>> res) -> res.body());
    }

    /**
     * Gets a list of service principals from the current tenant.
     *
     * @param filter The filter to apply to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ServicePrincipalInner&gt; object if successful.
     */
    public PagedList<ServicePrincipalInner> list(String filter) {
        Page<ServicePrincipalInner> response = listSinglePageAsync(filter).blockingGet();
        return new PagedList<ServicePrincipalInner>(response) {
            @Override
            public Page<ServicePrincipalInner> nextPage(String nextLink) {
                return listNextSinglePageAsync(nextLink).blockingGet();
            }
        };
    }

    /**
     * Gets a list of service principals from the current tenant.
     *
     * @param filter The filter to apply to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;ServicePrincipalInner&gt; object.
     */
    public Observable<Page<ServicePrincipalInner>> listAsync(String filter) {
        return listSinglePageAsync(filter)
            .toObservable()
            .concatMap((Page<ServicePrincipalInner> page) -> {
                String nextLink = page.nextPageLink();
                if (nextLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listNextAsync(nextLink));
            });
    }

    /**
     * Gets a list of service principals from the current tenant.
     *
     * @param filter The filter to apply to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;ServicePrincipalInner&gt;&gt; object if successful.
     */
    public Single<Page<ServicePrincipalInner>> listSinglePageAsync(String filter) {
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.tenantID(), filter, this.client.apiVersion(), this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<ServicePrincipalInner>> res) -> res.body());
    }

    /**
     * Deletes a service principal from the directory.
     *
     * @param objectId The object ID of the service principal to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void delete(@NonNull String objectId) {
        deleteAsync(objectId).blockingAwait();
    }

    /**
     * Deletes a service principal from the directory.
     *
     * @param objectId The object ID of the service principal to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> deleteAsync(@NonNull String objectId, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(deleteAsync(objectId), serviceCallback);
    }

    /**
     * Deletes a service principal from the directory.
     *
     * @param objectId The object ID of the service principal to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> deleteWithRestResponseAsync(@NonNull String objectId) {
        if (objectId == null) {
            throw new IllegalArgumentException("Parameter objectId is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(objectId, this.client.tenantID(), this.client.apiVersion(), this.client.acceptLanguage());
    }

    /**
     * Deletes a service principal from the directory.
     *
     * @param objectId The object ID of the service principal to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable deleteAsync(@NonNull String objectId) {
        return deleteWithRestResponseAsync(objectId)
            .toCompletable();
    }

    /**
     * Gets service principal information from the directory.
     *
     * @param objectId The object ID of the service principal to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ServicePrincipalInner object if successful.
     */
    public ServicePrincipalInner get(@NonNull String objectId) {
        return getAsync(objectId).blockingGet();
    }

    /**
     * Gets service principal information from the directory.
     *
     * @param objectId The object ID of the service principal to get.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<ServicePrincipalInner> getAsync(@NonNull String objectId, ServiceCallback<ServicePrincipalInner> serviceCallback) {
        return ServiceFuture.fromBody(getAsync(objectId), serviceCallback);
    }

    /**
     * Gets service principal information from the directory.
     *
     * @param objectId The object ID of the service principal to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<ServicePrincipalInner>> getWithRestResponseAsync(@NonNull String objectId) {
        if (objectId == null) {
            throw new IllegalArgumentException("Parameter objectId is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(objectId, this.client.tenantID(), this.client.apiVersion(), this.client.acceptLanguage());
    }

    /**
     * Gets service principal information from the directory.
     *
     * @param objectId The object ID of the service principal to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<ServicePrincipalInner> getAsync(@NonNull String objectId) {
        return getWithRestResponseAsync(objectId)
            .flatMapMaybe((BodyResponse<ServicePrincipalInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Directory objects that are owners of this service principal.
     * The owners are a set of non-admin users who are allowed to modify this object.
     *
     * @param objectId The object ID of the service principal for which to get owners.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;DirectoryObjectInner&gt; object if successful.
     */
    public List<DirectoryObjectInner> listOwners(@NonNull String objectId) {
        return listOwnersAsync(objectId).blockingGet();
    }

    /**
     * Directory objects that are owners of this service principal.
     * The owners are a set of non-admin users who are allowed to modify this object.
     *
     * @param objectId The object ID of the service principal for which to get owners.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<List<DirectoryObjectInner>> listOwnersAsync(@NonNull String objectId, ServiceCallback<List<DirectoryObjectInner>> serviceCallback) {
        return ServiceFuture.fromBody(listOwnersAsync(objectId), serviceCallback);
    }

    /**
     * Directory objects that are owners of this service principal.
     * The owners are a set of non-admin users who are allowed to modify this object.
     *
     * @param objectId The object ID of the service principal for which to get owners.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<List<DirectoryObjectInner>>> listOwnersWithRestResponseAsync(@NonNull String objectId) {
        if (objectId == null) {
            throw new IllegalArgumentException("Parameter objectId is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listOwners(objectId, this.client.tenantID(), this.client.apiVersion(), this.client.acceptLanguage());
    }

    /**
     * Directory objects that are owners of this service principal.
     * The owners are a set of non-admin users who are allowed to modify this object.
     *
     * @param objectId The object ID of the service principal for which to get owners.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<List<DirectoryObjectInner>> listOwnersAsync(@NonNull String objectId) {
        return listOwnersWithRestResponseAsync(objectId)
            .flatMapMaybe((BodyResponse<List<DirectoryObjectInner>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get the keyCredentials associated with an application.
     *
     * @param applicationObjectId Application object ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;KeyCredentialInner&gt; object if successful.
     */
    public PagedList<KeyCredentialInner> listKeyCredentials(@NonNull String applicationObjectId) {
        Page<KeyCredentialInner> response = listKeyCredentialsSinglePageAsync(applicationObjectId).blockingGet();
        return new PagedList<KeyCredentialInner>(response) {
            @Override
            public Page<KeyCredentialInner> nextPage(String nextLink) {
                return null;
            }
        };
    }

    /**
     * Get the keyCredentials associated with an application.
     *
     * @param applicationObjectId Application object ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Page<KeyCredentialInner>> listKeyCredentialsAsync(@NonNull String applicationObjectId) {
        return listKeyCredentialsSinglePageAsync(applicationObjectId).toMaybe();

    }

    /**
     * Get the keyCredentials associated with an application.
     *
     * @param applicationObjectId Application object ID.
     * @return the List&lt;KeyCredentialInner&gt; object if successful.
     */
    public Single<Page<KeyCredentialInner>> listKeyCredentialsSinglePageAsync(@NonNull String applicationObjectId) {
        if (applicationObjectId == null) {
            throw new IllegalArgumentException("Parameter applicationObjectId is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listKeyCredentials(applicationObjectId, this.client.tenantID(), this.client.apiVersion(), this.client.acceptLanguage())
                .map((BodyResponse<PageImpl<KeyCredentialInner>> res) -> res.body());
    }

    /**
     * Update the keyCredentials associated with a service principal.
     *
     * @param objectId The object ID for which to get service principal information.
     * @param value A collection of KeyCredentials.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void updateKeyCredentials(@NonNull String objectId, @NonNull List<KeyCredentialInner> value) {
        updateKeyCredentialsAsync(objectId, value).blockingAwait();
    }

    /**
     * Update the keyCredentials associated with a service principal.
     *
     * @param objectId The object ID for which to get service principal information.
     * @param value A collection of KeyCredentials.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> updateKeyCredentialsAsync(@NonNull String objectId, @NonNull List<KeyCredentialInner> value, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(updateKeyCredentialsAsync(objectId, value), serviceCallback);
    }

    /**
     * Update the keyCredentials associated with a service principal.
     *
     * @param objectId The object ID for which to get service principal information.
     * @param value A collection of KeyCredentials.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> updateKeyCredentialsWithRestResponseAsync(@NonNull String objectId, @NonNull List<KeyCredentialInner> value) {
        if (objectId == null) {
            throw new IllegalArgumentException("Parameter objectId is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (value == null) {
            throw new IllegalArgumentException("Parameter value is required and cannot be null.");
        }
        Validator.validate(value);
        KeyCredentialsUpdateParameters parameters = new KeyCredentialsUpdateParameters();
        parameters.withValue(value);
        return service.updateKeyCredentials(objectId, this.client.tenantID(), this.client.apiVersion(), this.client.acceptLanguage(), parameters);
    }

    /**
     * Update the keyCredentials associated with a service principal.
     *
     * @param objectId The object ID for which to get service principal information.
     * @param value A collection of KeyCredentials.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable updateKeyCredentialsAsync(@NonNull String objectId, @NonNull List<KeyCredentialInner> value) {
        return updateKeyCredentialsWithRestResponseAsync(objectId, value)
            .toCompletable();
    }

    /**
     * Get the passwordCredentials associated with an application.
     *
     * @param applicationObjectId Application object ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;PasswordCredentialInner&gt; object if successful.
     */
    public PagedList<PasswordCredentialInner> listPasswordCredentials(@NonNull String applicationObjectId) {
        Page<PasswordCredentialInner> response = listPasswordCredentialsSinglePageAsync(applicationObjectId).blockingGet();
        return new PagedList<PasswordCredentialInner>(response) {
            @Override
            public Page<PasswordCredentialInner> nextPage(String nextLink) {
                return null;
            }
        };
    }

    /**
     * Get the passwordCredentials associated with an application.
     *
     * @param applicationObjectId Application object ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Page<PasswordCredentialInner>> listPasswordCredentialsAsync(@NonNull String applicationObjectId) {
        return listPasswordCredentialsSinglePageAsync(applicationObjectId).toMaybe();

    }

    /**
     * Get the passwordCredentials associated with an application.
     *
     * @param applicationObjectId Application object ID.
     * @return the List&lt;PasswordCredentialInner&gt; object if successful.
     */
    public Single<Page<PasswordCredentialInner>> listPasswordCredentialsSinglePageAsync(@NonNull String applicationObjectId) {
        if (applicationObjectId == null) {
            throw new IllegalArgumentException("Parameter applicationObjectId is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listPasswordCredentials(applicationObjectId, this.client.tenantID(), this.client.apiVersion(), this.client.acceptLanguage())
                .map((BodyResponse<PageImpl<PasswordCredentialInner>> res) -> res.body());
    }

    /**
     * Updates the passwordCredentials associated with a service principal.
     *
     * @param objectId The object ID of the service principal.
     * @param value A collection of PasswordCredentials.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void updatePasswordCredentials(@NonNull String objectId, @NonNull List<PasswordCredentialInner> value) {
        updatePasswordCredentialsAsync(objectId, value).blockingAwait();
    }

    /**
     * Updates the passwordCredentials associated with a service principal.
     *
     * @param objectId The object ID of the service principal.
     * @param value A collection of PasswordCredentials.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> updatePasswordCredentialsAsync(@NonNull String objectId, @NonNull List<PasswordCredentialInner> value, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(updatePasswordCredentialsAsync(objectId, value), serviceCallback);
    }

    /**
     * Updates the passwordCredentials associated with a service principal.
     *
     * @param objectId The object ID of the service principal.
     * @param value A collection of PasswordCredentials.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> updatePasswordCredentialsWithRestResponseAsync(@NonNull String objectId, @NonNull List<PasswordCredentialInner> value) {
        if (objectId == null) {
            throw new IllegalArgumentException("Parameter objectId is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (value == null) {
            throw new IllegalArgumentException("Parameter value is required and cannot be null.");
        }
        Validator.validate(value);
        PasswordCredentialsUpdateParameters parameters = new PasswordCredentialsUpdateParameters();
        parameters.withValue(value);
        return service.updatePasswordCredentials(objectId, this.client.tenantID(), this.client.apiVersion(), this.client.acceptLanguage(), parameters);
    }

    /**
     * Updates the passwordCredentials associated with a service principal.
     *
     * @param objectId The object ID of the service principal.
     * @param value A collection of PasswordCredentials.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable updatePasswordCredentialsAsync(@NonNull String objectId, @NonNull List<PasswordCredentialInner> value) {
        return updatePasswordCredentialsWithRestResponseAsync(objectId, value)
            .toCompletable();
    }

    /**
     * Gets a list of service principals from the current tenant.
     *
     * @param nextLink Next link for the list operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ServicePrincipalInner&gt; object if successful.
     */
    public PagedList<ServicePrincipalInner> listNext(@NonNull String nextLink) {
        Page<ServicePrincipalInner> response = listNextSinglePageAsync(nextLink).blockingGet();
        return new PagedList<ServicePrincipalInner>(response) {
            @Override
            public Page<ServicePrincipalInner> nextPage(String nextLink) {
                return listNextSinglePageAsync(nextLink).blockingGet();
            }
        };
    }

    /**
     * Gets a list of service principals from the current tenant.
     *
     * @param nextLink Next link for the list operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;ServicePrincipalInner&gt; object.
     */
    public Observable<Page<ServicePrincipalInner>> listNextAsync(@NonNull String nextLink) {
        return listNextSinglePageAsync(nextLink)
            .toObservable()
            .concatMap((Page<ServicePrincipalInner> page) -> {
                String nextLink1 = page.nextPageLink();
                if (nextLink1 == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listNextAsync(nextLink1));
            });
    }

    /**
     * Gets a list of service principals from the current tenant.
     *
     * @param nextLink Next link for the list operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;ServicePrincipalInner&gt;&gt; object if successful.
     */
    public Single<Page<ServicePrincipalInner>> listNextSinglePageAsync(@NonNull String nextLink) {
        if (nextLink == null) {
            throw new IllegalArgumentException("Parameter nextLink is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        String nextUrl = String.format("%s/%s", this.client.tenantID(), nextLink);
        return service.listNext(nextUrl, this.client.apiVersion(), this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<ServicePrincipalInner>> res) -> res.body());
    }
}
