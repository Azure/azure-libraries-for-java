/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.v2.management.graphrbac.implementation;

import com.microsoft.azure.v2.AzureProxy;
import com.microsoft.azure.v2.Page;
import com.microsoft.azure.v2.PagedList;
import com.microsoft.azure.v2.management.graphrbac.GraphErrorException;
import com.microsoft.azure.v2.management.graphrbac.UserCreateParameters;
import com.microsoft.azure.v2.management.graphrbac.UserGetMemberGroupsParameters;
import com.microsoft.azure.v2.management.graphrbac.UserUpdateParameters;
import com.microsoft.rest.v2.BodyResponse;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.Validator;
import com.microsoft.rest.v2.VoidResponse;
import com.microsoft.rest.v2.annotations.BodyParam;
import com.microsoft.rest.v2.annotations.DELETE;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.HeaderParam;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.PATCH;
import com.microsoft.rest.v2.annotations.PathParam;
import com.microsoft.rest.v2.annotations.POST;
import com.microsoft.rest.v2.annotations.QueryParam;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import io.reactivex.Completable;
import io.reactivex.Maybe;
import io.reactivex.Observable;
import io.reactivex.Single;
import io.reactivex.annotations.NonNull;
import java.util.List;

/**
 * An instance of this class provides access to all the operations defined in
 * Users.
 */
public final class UsersInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private UsersService service;

    /**
     * The service client containing this operation class.
     */
    private GraphRbacManagementClientImpl client;

    /**
     * Initializes an instance of UsersInner.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public UsersInner(GraphRbacManagementClientImpl client) {
        this.service = AzureProxy.create(UsersService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for Users to be used by the
     * proxy service to perform REST calls.
     */
    @Host("https://graph.windows.net")
    private interface UsersService {
        @POST("{tenantID}/users")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<BodyResponse<UserInner>> create(@PathParam("tenantID") String tenantID, @BodyParam("application/json; charset=utf-8") UserCreateParameters parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{tenantID}/users")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<BodyResponse<PageImpl<UserInner>>> list(@PathParam("tenantID") String tenantID, @QueryParam("$filter") String filter, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{tenantID}/users/{upnOrObjectId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<BodyResponse<UserInner>> get(@PathParam("upnOrObjectId") String upnOrObjectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @PATCH("{tenantID}/users/{upnOrObjectId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<VoidResponse> update(@PathParam("upnOrObjectId") String upnOrObjectId, @PathParam("tenantID") String tenantID, @BodyParam("application/json; charset=utf-8") UserUpdateParameters parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @DELETE("{tenantID}/users/{upnOrObjectId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<VoidResponse> delete(@PathParam("upnOrObjectId") String upnOrObjectId, @PathParam("tenantID") String tenantID, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @POST("{tenantID}/users/{objectId}/getMemberGroups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<BodyResponse<List<String>>> getMemberGroups(@PathParam("objectId") String objectId, @PathParam("tenantID") String tenantID, @BodyParam("application/json; charset=utf-8") UserGetMemberGroupsParameters parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(GraphErrorException.class)
        Single<BodyResponse<PageImpl<UserInner>>> listNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);
    }

    /**
     * Create a new user.
     *
     * @param parameters Parameters to create a user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the UserInner object if successful.
     */
    public UserInner create(@NonNull UserCreateParameters parameters) {
        return createAsync(parameters).blockingGet();
    }

    /**
     * Create a new user.
     *
     * @param parameters Parameters to create a user.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<UserInner> createAsync(@NonNull UserCreateParameters parameters, ServiceCallback<UserInner> serviceCallback) {
        return ServiceFuture.fromBody(createAsync(parameters), serviceCallback);
    }

    /**
     * Create a new user.
     *
     * @param parameters Parameters to create a user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<UserInner>> createWithRestResponseAsync(@NonNull UserCreateParameters parameters) {
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.create(this.client.tenantID(), parameters, this.client.apiVersion(), this.client.acceptLanguage());
    }

    /**
     * Create a new user.
     *
     * @param parameters Parameters to create a user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<UserInner> createAsync(@NonNull UserCreateParameters parameters) {
        return createWithRestResponseAsync(parameters)
            .flatMapMaybe((BodyResponse<UserInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Gets list of users for the current tenant.
     *
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;UserInner&gt; object if successful.
     */
    public PagedList<UserInner> list() {
        Page<UserInner> response = listSinglePageAsync().blockingGet();
        return new PagedList<UserInner>(response) {
            @Override
            public Page<UserInner> nextPage(String nextLink) {
                return listNextSinglePageAsync(nextLink).blockingGet();
            }
        };
    }

    /**
     * Gets list of users for the current tenant.
     *
     * @return the observable to the PagedList&lt;UserInner&gt; object.
     */
    public Observable<Page<UserInner>> listAsync() {
        return listSinglePageAsync()
            .toObservable()
            .concatMap((Page<UserInner> page) -> {
                String nextLink = page.nextPageLink();
                if (nextLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listNextAsync(nextLink));
            });
    }

    /**
     * Gets list of users for the current tenant.
     *
     * @return the Single&lt;Page&lt;UserInner&gt;&gt; object if successful.
     */
    public Single<Page<UserInner>> listSinglePageAsync() {
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        return service.list(this.client.tenantID(), filter, this.client.apiVersion(), this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<UserInner>> res) -> res.body());
    }

    /**
     * Gets list of users for the current tenant.
     *
     * @param filter The filter to apply to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;UserInner&gt; object if successful.
     */
    public PagedList<UserInner> list(String filter) {
        Page<UserInner> response = listSinglePageAsync(filter).blockingGet();
        return new PagedList<UserInner>(response) {
            @Override
            public Page<UserInner> nextPage(String nextLink) {
                return listNextSinglePageAsync(nextLink).blockingGet();
            }
        };
    }

    /**
     * Gets list of users for the current tenant.
     *
     * @param filter The filter to apply to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;UserInner&gt; object.
     */
    public Observable<Page<UserInner>> listAsync(String filter) {
        return listSinglePageAsync(filter)
            .toObservable()
            .concatMap((Page<UserInner> page) -> {
                String nextLink = page.nextPageLink();
                if (nextLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listNextAsync(nextLink));
            });
    }

    /**
     * Gets list of users for the current tenant.
     *
     * @param filter The filter to apply to the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;UserInner&gt;&gt; object if successful.
     */
    public Single<Page<UserInner>> listSinglePageAsync(String filter) {
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.tenantID(), filter, this.client.apiVersion(), this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<UserInner>> res) -> res.body());
    }

    /**
     * Gets user information from the directory.
     *
     * @param upnOrObjectId The object ID or principal name of the user for which to get information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the UserInner object if successful.
     */
    public UserInner get(@NonNull String upnOrObjectId) {
        return getAsync(upnOrObjectId).blockingGet();
    }

    /**
     * Gets user information from the directory.
     *
     * @param upnOrObjectId The object ID or principal name of the user for which to get information.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<UserInner> getAsync(@NonNull String upnOrObjectId, ServiceCallback<UserInner> serviceCallback) {
        return ServiceFuture.fromBody(getAsync(upnOrObjectId), serviceCallback);
    }

    /**
     * Gets user information from the directory.
     *
     * @param upnOrObjectId The object ID or principal name of the user for which to get information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<UserInner>> getWithRestResponseAsync(@NonNull String upnOrObjectId) {
        if (upnOrObjectId == null) {
            throw new IllegalArgumentException("Parameter upnOrObjectId is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(upnOrObjectId, this.client.tenantID(), this.client.apiVersion(), this.client.acceptLanguage());
    }

    /**
     * Gets user information from the directory.
     *
     * @param upnOrObjectId The object ID or principal name of the user for which to get information.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<UserInner> getAsync(@NonNull String upnOrObjectId) {
        return getWithRestResponseAsync(upnOrObjectId)
            .flatMapMaybe((BodyResponse<UserInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Updates a user.
     *
     * @param upnOrObjectId The object ID or principal name of the user to update.
     * @param parameters Parameters to update an existing user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void update(@NonNull String upnOrObjectId, @NonNull UserUpdateParameters parameters) {
        updateAsync(upnOrObjectId, parameters).blockingAwait();
    }

    /**
     * Updates a user.
     *
     * @param upnOrObjectId The object ID or principal name of the user to update.
     * @param parameters Parameters to update an existing user.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> updateAsync(@NonNull String upnOrObjectId, @NonNull UserUpdateParameters parameters, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(updateAsync(upnOrObjectId, parameters), serviceCallback);
    }

    /**
     * Updates a user.
     *
     * @param upnOrObjectId The object ID or principal name of the user to update.
     * @param parameters Parameters to update an existing user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> updateWithRestResponseAsync(@NonNull String upnOrObjectId, @NonNull UserUpdateParameters parameters) {
        if (upnOrObjectId == null) {
            throw new IllegalArgumentException("Parameter upnOrObjectId is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.update(upnOrObjectId, this.client.tenantID(), parameters, this.client.apiVersion(), this.client.acceptLanguage());
    }

    /**
     * Updates a user.
     *
     * @param upnOrObjectId The object ID or principal name of the user to update.
     * @param parameters Parameters to update an existing user.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable updateAsync(@NonNull String upnOrObjectId, @NonNull UserUpdateParameters parameters) {
        return updateWithRestResponseAsync(upnOrObjectId, parameters)
            .toCompletable();
    }

    /**
     * Delete a user.
     *
     * @param upnOrObjectId The object ID or principal name of the user to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void delete(@NonNull String upnOrObjectId) {
        deleteAsync(upnOrObjectId).blockingAwait();
    }

    /**
     * Delete a user.
     *
     * @param upnOrObjectId The object ID or principal name of the user to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> deleteAsync(@NonNull String upnOrObjectId, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(deleteAsync(upnOrObjectId), serviceCallback);
    }

    /**
     * Delete a user.
     *
     * @param upnOrObjectId The object ID or principal name of the user to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> deleteWithRestResponseAsync(@NonNull String upnOrObjectId) {
        if (upnOrObjectId == null) {
            throw new IllegalArgumentException("Parameter upnOrObjectId is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(upnOrObjectId, this.client.tenantID(), this.client.apiVersion(), this.client.acceptLanguage());
    }

    /**
     * Delete a user.
     *
     * @param upnOrObjectId The object ID or principal name of the user to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable deleteAsync(@NonNull String upnOrObjectId) {
        return deleteWithRestResponseAsync(upnOrObjectId)
            .toCompletable();
    }

    /**
     * Gets a collection that contains the object IDs of the groups of which the user is a member.
     *
     * @param objectId The object ID of the user for which to get group membership.
     * @param parameters User filtering parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;String&gt; object if successful.
     */
    public List<String> getMemberGroups(@NonNull String objectId, @NonNull UserGetMemberGroupsParameters parameters) {
        return getMemberGroupsAsync(objectId, parameters).blockingGet();
    }

    /**
     * Gets a collection that contains the object IDs of the groups of which the user is a member.
     *
     * @param objectId The object ID of the user for which to get group membership.
     * @param parameters User filtering parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<List<String>> getMemberGroupsAsync(@NonNull String objectId, @NonNull UserGetMemberGroupsParameters parameters, ServiceCallback<List<String>> serviceCallback) {
        return ServiceFuture.fromBody(getMemberGroupsAsync(objectId, parameters), serviceCallback);
    }

    /**
     * Gets a collection that contains the object IDs of the groups of which the user is a member.
     *
     * @param objectId The object ID of the user for which to get group membership.
     * @param parameters User filtering parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<List<String>>> getMemberGroupsWithRestResponseAsync(@NonNull String objectId, @NonNull UserGetMemberGroupsParameters parameters) {
        if (objectId == null) {
            throw new IllegalArgumentException("Parameter objectId is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.getMemberGroups(objectId, this.client.tenantID(), parameters, this.client.apiVersion(), this.client.acceptLanguage());
    }

    /**
     * Gets a collection that contains the object IDs of the groups of which the user is a member.
     *
     * @param objectId The object ID of the user for which to get group membership.
     * @param parameters User filtering parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<List<String>> getMemberGroupsAsync(@NonNull String objectId, @NonNull UserGetMemberGroupsParameters parameters) {
        return getMemberGroupsWithRestResponseAsync(objectId, parameters)
            .flatMapMaybe((BodyResponse<List<String>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Gets a list of users for the current tenant.
     *
     * @param nextLink Next link for the list operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws GraphErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;UserInner&gt; object if successful.
     */
    public PagedList<UserInner> listNext(@NonNull String nextLink) {
        Page<UserInner> response = listNextSinglePageAsync(nextLink).blockingGet();
        return new PagedList<UserInner>(response) {
            @Override
            public Page<UserInner> nextPage(String nextLink) {
                return listNextSinglePageAsync(nextLink).blockingGet();
            }
        };
    }

    /**
     * Gets a list of users for the current tenant.
     *
     * @param nextLink Next link for the list operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;UserInner&gt; object.
     */
    public Observable<Page<UserInner>> listNextAsync(@NonNull String nextLink) {
        return listNextSinglePageAsync(nextLink)
            .toObservable()
            .concatMap((Page<UserInner> page) -> {
                String nextLink1 = page.nextPageLink();
                if (nextLink1 == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listNextAsync(nextLink1));
            });
    }

    /**
     * Gets a list of users for the current tenant.
     *
     * @param nextLink Next link for the list operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;UserInner&gt;&gt; object if successful.
     */
    public Single<Page<UserInner>> listNextSinglePageAsync(@NonNull String nextLink) {
        if (nextLink == null) {
            throw new IllegalArgumentException("Parameter nextLink is required and cannot be null.");
        }
        if (this.client.tenantID() == null) {
            throw new IllegalArgumentException("Parameter this.client.tenantID() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        String nextUrl = String.format("%s/%s", this.client.tenantID(), nextLink);
        return service.listNext(nextUrl, this.client.apiVersion(), this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<UserInner>> res) -> res.body());
    }
}
