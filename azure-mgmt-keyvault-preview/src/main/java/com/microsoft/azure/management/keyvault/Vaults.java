/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.keyvault;

import com.microsoft.azure.management.resources.fluentcore.collection.SupportsCreating;
import com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsDeletingByResourceGroup;
import com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsBatchDeletion;
import com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingByResourceGroup;
import com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsListingByResourceGroup;
import com.microsoft.azure.management.resources.fluentcore.collection.SupportsListing;
import com.microsoft.azure.management.keyvault.implementation.VaultsInner;
import rx.Observable;
import com.microsoft.azure.management.resources.fluentcore.model.HasInner;

/**
 * Type representing Vaults.
 */
public interface Vaults extends SupportsCreating<Vault.DefinitionStages.Blank>, SupportsDeletingByResourceGroup, SupportsBatchDeletion, SupportsGettingByResourceGroup<Vault>, SupportsListingByResourceGroup<Vault>, SupportsListing<Vault>, HasInner<VaultsInner> {

    /**
     * @return Entry point to manage Vault AccessPolicies.
     */
    AccessPolicies accessPolicies();

    /**
     * @return Entry point to manage Vault Secrets.
     */
    Secrets secrets();

    /**
    * Checks that the vault name is valid and is not already in use.
    *
    * @param name The vault name.
    * @throws IllegalArgumentException thrown if parameters fail the validation
    * @return the observable for the request
    */
    Observable<CheckNameAvailabilityResult> checkNameAvailabilityAsync(String name);

}
