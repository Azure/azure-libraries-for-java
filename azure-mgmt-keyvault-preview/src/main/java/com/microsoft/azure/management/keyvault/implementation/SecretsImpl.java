/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.keyvault.implementation;

import com.microsoft.azure.management.resources.fluentcore.model.implementation.WrapperImpl;
import com.microsoft.azure.management.keyvault.Secrets;
import com.microsoft.azure.management.keyvault.Secret;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;

class SecretsImpl extends WrapperImpl<SecretsInner> implements Secrets {
    private final KeyVaultManager manager;

    SecretsImpl(KeyVaultManager manager) {
        super(manager.inner().secrets());
        this.manager = manager;
    }

    public KeyVaultManager manager() {
        return this.manager;
    }

    @Override
    public SecretImpl define(String name) {
        return new SecretImpl(name, this.manager());
    }

    private SecretImpl wrapModel(SecretInner inner) {
        return  new SecretImpl(inner.name(), inner, this.manager());
    }

    private Observable<Page<SecretInner>> listByVaultNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        SecretsInner client = this.inner();
        return client.listNextAsync(nextLink)
        .flatMap(new Func1<Page<SecretInner>, Observable<Page<SecretInner>>>() {
            @Override
            public Observable<Page<SecretInner>> call(Page<SecretInner> page) {
                return Observable.just(page).concatWith(listByVaultNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<Secret> listByVaultAsync(final String resourceGroupName, final String vaultName) {
        SecretsInner client = this.inner();
        return client.listAsync(resourceGroupName, vaultName)
        .flatMap(new Func1<Page<SecretInner>, Observable<Page<SecretInner>>>() {
            @Override
            public Observable<Page<SecretInner>> call(Page<SecretInner> page) {
                return listByVaultNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<SecretInner>, Iterable<SecretInner>>() {
            @Override
            public Iterable<SecretInner> call(Page<SecretInner> page) {
                return page.items();
            }
       })
        .map(new Func1<SecretInner, Secret>() {
            @Override
            public Secret call(SecretInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public Observable<Secret> getByVaultAsync(String resourceGroupName, String vaultName, String secretName) {
        SecretsInner client = this.inner();
        return client.getAsync(resourceGroupName, vaultName, secretName)
        .map(new Func1<SecretInner, Secret>() {
            @Override
            public Secret call(SecretInner inner) {
                return wrapModel(inner);
            }
       });
    }

}
