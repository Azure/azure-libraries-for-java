/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.keyvault.implementation;

import com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.GroupableResourcesImpl;
import com.microsoft.azure.management.keyvault.Vaults;
import com.microsoft.azure.management.keyvault.Vault;
import rx.Observable;
import rx.Completable;
import com.microsoft.azure.management.keyvault.DeletedVault;
import com.microsoft.azure.management.keyvault.CheckNameAvailabilityResult;
import rx.functions.Func1;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import com.microsoft.azure.management.resources.fluentcore.arm.ResourceUtils;
import com.microsoft.azure.management.resources.fluentcore.utils.RXMapper;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.keyvault.AccessPolicies;
import com.microsoft.azure.management.keyvault.Secrets;

public class VaultsImpl extends GroupableResourcesImpl<Vault, VaultImpl, VaultInner, VaultsInner, KeyVaultManager>  implements Vaults {
    protected VaultsImpl(KeyVaultManager manager) {
        super(manager.inner().vaults(), manager);
    }

    @Override
    public AccessPolicies accessPolicies() {
        AccessPolicies accessor = this.manager().accessPolicies();
        return accessor;
    }

    @Override
    public Secrets secrets() {
        Secrets accessor = this.manager().secrets();
        return accessor;
    }

    @Override
    protected Observable<VaultInner> getInnerAsync(String resourceGroupName, String name) {
        VaultsInner client = this.inner();
        return client.getByResourceGroupAsync(resourceGroupName, name);
    }

    @Override
    protected Completable deleteInnerAsync(String resourceGroupName, String name) {
        VaultsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Observable<String> deleteByIdsAsync(Collection<String> ids) {
        if (ids == null || ids.isEmpty()) {
            return Observable.empty();
        }
        VaultsInner client = this.inner();
        Collection<Observable<String>> observables = new ArrayList<>();
        for (String id : ids) {
            final String resourceGroupName = ResourceUtils.groupFromResourceId(id);
            final String name = ResourceUtils.nameFromResourceId(id);
            Observable<String> o = RXMapper.map(this.inner().deleteAsync(resourceGroupName, name), id);
            observables.add(o);
        }
        return Observable.mergeDelayError(observables);
    }

    @Override
    public Observable<String> deleteByIdsAsync(String...ids) {
        return this.deleteByIdsAsync(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public void deleteByIds(Collection<String> ids) {
        if (ids != null && !ids.isEmpty()) {
            this.deleteByIdsAsync(ids).toBlocking().last();
        }
    }

    @Override
    public void deleteByIds(String...ids) {
        this.deleteByIds(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public PagedList<Vault> listByResourceGroup(String resourceGroupName) {
        VaultsInner client = this.inner();
        return this.wrapList(client.listByResourceGroup(resourceGroupName));
    }

    private Observable<Page<VaultInner>> ListByResourceGroupNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        VaultsInner client = this.inner();
        return client.listByResourceGroupNextAsync(nextLink)
        .flatMap(new Func1<Page<VaultInner>, Observable<Page<VaultInner>>>() {
            @Override
            public Observable<Page<VaultInner>> call(Page<VaultInner> page) {
                return Observable.just(page).concatWith(ListByResourceGroupNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<Vault> listByResourceGroupAsync(String resourceGroupName) {
        VaultsInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName)
        .flatMap(new Func1<Page<VaultInner>, Observable<Page<VaultInner>>>() {
            @Override
            public Observable<Page<VaultInner>> call(Page<VaultInner> page) {
                return ListByResourceGroupNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<VaultInner>, Iterable<VaultInner>>() {
            @Override
            public Iterable<VaultInner> call(Page<VaultInner> page) {
                return page.items();
            }
       })
        .map(new Func1<VaultInner, Vault>() {
            @Override
            public Vault call(VaultInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public PagedList<Vault> list() {
        VaultsInner client = this.inner();
        return this.wrapList(client.listBySubscription());
    }

    private Observable<Page<VaultInner>> ListNextInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        VaultsInner client = this.inner();
        return client.listBySubscriptionNextAsync(nextLink)
        .flatMap(new Func1<Page<VaultInner>, Observable<Page<VaultInner>>>() {
            @Override
            public Observable<Page<VaultInner>> call(Page<VaultInner> page) {
                return Observable.just(page).concatWith(ListNextInnerPageAsync(page.nextPageLink()));
            }
        });
    }
    @Override
    public Observable<Vault> listAsync() {
        VaultsInner client = this.inner();
        return client.listBySubscriptionAsync()
        .flatMap(new Func1<Page<VaultInner>, Observable<Page<VaultInner>>>() {
            @Override
            public Observable<Page<VaultInner>> call(Page<VaultInner> page) {
                return ListNextInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<VaultInner>, Iterable<VaultInner>>() {
            @Override
            public Iterable<VaultInner> call(Page<VaultInner> page) {
                return page.items();
            }
       })
        .map(new Func1<VaultInner, Vault>() {
            @Override
            public Vault call(VaultInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public VaultImpl define(String name) {
        return wrapModel(name);
    }

    @Override
    public Observable<DeletedVault> listDeletedAsync() {
        VaultsInner client = this.inner();
        return client.listDeletedAsync()
        .flatMap(new Func1<Page<DeletedVaultInner>, Observable<Page<DeletedVaultInner>>>() {
            @Override
            public Observable<Page<DeletedVaultInner>> call(Page<DeletedVaultInner> page) {
                return ListNextDeletedInnerPageAsync(page.nextPageLink());
            }
        })
        .flatMapIterable(new Func1<Page<DeletedVaultInner>, Iterable<DeletedVaultInner>>() {
            @Override
            public Iterable<DeletedVaultInner> call(Page<DeletedVaultInner> page) {
                return page.items();
            }
        })
        .map(new Func1<DeletedVaultInner, DeletedVault>() {
            @Override
            public DeletedVault call(DeletedVaultInner inner) {
                return new DeletedVaultImpl(inner, manager());
            }
        });
    }

    private Observable<Page<DeletedVaultInner>> ListNextDeletedInnerPageAsync(String nextLink) {
        if (nextLink == null) {
            Observable.empty();
        }
        VaultsInner client = this.inner();
        return client.listDeletedNextAsync(nextLink)
                .flatMap(new Func1<Page<DeletedVaultInner>, Observable<Page<DeletedVaultInner>>>() {
                    @Override
                    public Observable<Page<DeletedVaultInner>> call(Page<DeletedVaultInner> page) {
                        return Observable.just(page).concatWith(ListNextDeletedInnerPageAsync(page.nextPageLink()));
                    }
                });
    }

    @Override
    public Observable<CheckNameAvailabilityResult> checkNameAvailabilityAsync(String name) {
        VaultsInner client = this.inner();
        return client.checkNameAvailabilityAsync(name)
        .map(new Func1<CheckNameAvailabilityResultInner, CheckNameAvailabilityResult>() {
            @Override
            public CheckNameAvailabilityResult call(CheckNameAvailabilityResultInner inner) {
                return new CheckNameAvailabilityResultImpl(inner);
            }
        });
    }

    @Override
    protected VaultImpl wrapModel(VaultInner inner) {
        return  new VaultImpl(inner.name(), inner, this.manager());
    }

    @Override
    protected VaultImpl wrapModel(String name) {
        return new VaultImpl(name, new VaultInner(), this.manager());
    }

}
