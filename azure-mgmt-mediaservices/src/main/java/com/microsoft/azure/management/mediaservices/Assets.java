/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.mediaservices;

import com.microsoft.azure.management.resources.fluentcore.collection.SupportsCreating;
import com.microsoft.azure.management.mediaservices.implementation.AssetsInner;
import rx.Observable;
import com.microsoft.azure.management.resources.fluentcore.model.HasInner;

/**
 * Type representing Assets.
 */
public interface Assets extends SupportsCreating<Asset.DefinitionStages.Blank>, HasInner<AssetsInner> {

    /**
* List Assets.
    * List Assets in the Media Services account with optional filtering and ordering.
    *
    * @param resourceGroupName The name of the resource group within the Azure subscription.
    * @param accountName The Media Services account name.
    * @throws IllegalArgumentException thrown if parameters fail the validation
    * @return the observable for the request
    */
    Observable<Asset> listByMediaservicesAsync(final String resourceGroupName, final String accountName);

    /**
* Get an Asset.
    * Get the details of an Asset in the Media Services account.
    *
    * @param resourceGroupName The name of the resource group within the Azure subscription.
    * @param accountName The Media Services account name.
    * @param assetName The Asset name.
    * @throws IllegalArgumentException thrown if parameters fail the validation
    * @return the observable for the request
    */
    Observable<Asset> getByMediaserviceAsync(String resourceGroupName, String accountName, String assetName);

    /**
* Delete an Asset.
    * Deletes an Asset in the Media Services account.
    *
    * @param resourceGroupName The name of the resource group within the Azure subscription.
    * @param accountName The Media Services account name.
    * @param assetName The Asset name.
    * @throws IllegalArgumentException thrown if parameters fail the validation
    * @return the observable for the request
    */
    Completable deleteByMediaserviceAsync(String resourceGroupName, String accountName, String assetName);
    /**
* List the Asset URLs.
    * Lists the Asset SAS URLs used for uploading and downloading Asset content.
    *
    * @param resourceGroupName The name of the resource group within the Azure subscription.
    * @param accountName The Media Services account name.
    * @param assetName The Asset name.
    * @param parameters The request parameters
    * @throws IllegalArgumentException thrown if parameters fail the validation
    * @return the observable for the request
    */
    Observable<AssetContainerSas> listContainerSasAsync(String resourceGroupName, String accountName, String assetName, ListContainerSasInputInner parameters);

    /**
* Gets the Asset storage key.
    * Gets the Asset storage encryption keys used to decrypt content created by version 2 of the Media Services API.
    *
    * @param resourceGroupName The name of the resource group within the Azure subscription.
    * @param accountName The Media Services account name.
    * @param assetName The Asset name.
    * @throws IllegalArgumentException thrown if parameters fail the validation
    * @return the observable for the request
    */
    Observable<AssetStorageEncryptionKey> getEncryptionKeyAsync(String resourceGroupName, String accountName, String assetName);

}
