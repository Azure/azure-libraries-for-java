/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.mediaservices;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * A class to encapsulate all the filters for a source.
 */
public class Filters {
    /**
     * Gets or sets a value indicating whether to pad the source to align
     * jagged-edge audio and video.
     */
    @JsonProperty(value = "pad")
    private Boolean pad;

    /**
     * Gets or sets the default de-interlacing settings.
     */
    @JsonProperty(value = "deinterlace")
    private Deinterlace deinterlace;

    /**
     * Gets or sets the rotation if any to be applied to the video. Possible
     * values include: 'Auto', 'None', 'Rotate0', 'Rotate90', 'Rotate180',
     * 'Rotate270'.
     */
    @JsonProperty(value = "rotation")
    private Rotation rotation;

    /**
     * Gets or sets the loudness correction mode. Possible values include:
     * 'None', 'Auto', 'Manual'.
     */
    @JsonProperty(value = "adjustLoudness")
    private LoudnessAdjustment adjustLoudness;

    /**
     * Gets or sets the Loudness specified in decibels (Applicable for the case
     * of AdjustLoudness.Manual.
     */
    @JsonProperty(value = "loudnessInDB")
    private Double loudnessInDB;

    /**
     * Gets or sets whether the video needs to be flipped. Possible values
     * include: 'None', 'Horizontal', 'Vertical'.
     */
    @JsonProperty(value = "flip")
    private Flip flip;

    /**
     * Gets or sets the co-ordinates of the video to be cropped.
     */
    @JsonProperty(value = "crop")
    private Rectangle crop;

    /**
     * Gets or sets the details of the video overlay to apply if any.
     */
    @JsonProperty(value = "videoOverlay")
    private VideoOverlay videoOverlay;

    /**
     * Gets or sets the details of the audio overlay to apply if any.
     */
    @JsonProperty(value = "audioOverlay")
    private AudioOverlay audioOverlay;

    /**
     * Get the pad value.
     *
     * @return the pad value
     */
    public Boolean pad() {
        return this.pad;
    }

    /**
     * Set the pad value.
     *
     * @param pad the pad value to set
     * @return the Filters object itself.
     */
    public Filters withPad(Boolean pad) {
        this.pad = pad;
        return this;
    }

    /**
     * Get the deinterlace value.
     *
     * @return the deinterlace value
     */
    public Deinterlace deinterlace() {
        return this.deinterlace;
    }

    /**
     * Set the deinterlace value.
     *
     * @param deinterlace the deinterlace value to set
     * @return the Filters object itself.
     */
    public Filters withDeinterlace(Deinterlace deinterlace) {
        this.deinterlace = deinterlace;
        return this;
    }

    /**
     * Get the rotation value.
     *
     * @return the rotation value
     */
    public Rotation rotation() {
        return this.rotation;
    }

    /**
     * Set the rotation value.
     *
     * @param rotation the rotation value to set
     * @return the Filters object itself.
     */
    public Filters withRotation(Rotation rotation) {
        this.rotation = rotation;
        return this;
    }

    /**
     * Get the adjustLoudness value.
     *
     * @return the adjustLoudness value
     */
    public LoudnessAdjustment adjustLoudness() {
        return this.adjustLoudness;
    }

    /**
     * Set the adjustLoudness value.
     *
     * @param adjustLoudness the adjustLoudness value to set
     * @return the Filters object itself.
     */
    public Filters withAdjustLoudness(LoudnessAdjustment adjustLoudness) {
        this.adjustLoudness = adjustLoudness;
        return this;
    }

    /**
     * Get the loudnessInDB value.
     *
     * @return the loudnessInDB value
     */
    public Double loudnessInDB() {
        return this.loudnessInDB;
    }

    /**
     * Set the loudnessInDB value.
     *
     * @param loudnessInDB the loudnessInDB value to set
     * @return the Filters object itself.
     */
    public Filters withLoudnessInDB(Double loudnessInDB) {
        this.loudnessInDB = loudnessInDB;
        return this;
    }

    /**
     * Get the flip value.
     *
     * @return the flip value
     */
    public Flip flip() {
        return this.flip;
    }

    /**
     * Set the flip value.
     *
     * @param flip the flip value to set
     * @return the Filters object itself.
     */
    public Filters withFlip(Flip flip) {
        this.flip = flip;
        return this;
    }

    /**
     * Get the crop value.
     *
     * @return the crop value
     */
    public Rectangle crop() {
        return this.crop;
    }

    /**
     * Set the crop value.
     *
     * @param crop the crop value to set
     * @return the Filters object itself.
     */
    public Filters withCrop(Rectangle crop) {
        this.crop = crop;
        return this;
    }

    /**
     * Get the videoOverlay value.
     *
     * @return the videoOverlay value
     */
    public VideoOverlay videoOverlay() {
        return this.videoOverlay;
    }

    /**
     * Set the videoOverlay value.
     *
     * @param videoOverlay the videoOverlay value to set
     * @return the Filters object itself.
     */
    public Filters withVideoOverlay(VideoOverlay videoOverlay) {
        this.videoOverlay = videoOverlay;
        return this;
    }

    /**
     * Get the audioOverlay value.
     *
     * @return the audioOverlay value
     */
    public AudioOverlay audioOverlay() {
        return this.audioOverlay;
    }

    /**
     * Set the audioOverlay value.
     *
     * @param audioOverlay the audioOverlay value to set
     * @return the Filters object itself.
     */
    public Filters withAudioOverlay(AudioOverlay audioOverlay) {
        this.audioOverlay = audioOverlay;
        return this;
    }

}
