/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.mediaservices.implementation;

import java.util.UUID;
import org.joda.time.DateTime;
import com.microsoft.azure.management.mediaservices.AssetStorageEncryptionFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;

/**
 * An Asset.
 */
@JsonFlatten
public class AssetInner extends ProxyResourceInner {
    /**
     * The Asset ID.
     */
    @JsonProperty(value = "properties.assetId", access = JsonProperty.Access.WRITE_ONLY)
    private UUID assetId;

    /**
     * The creation date of the Asset.
     */
    @JsonProperty(value = "properties.created", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime created;

    /**
     * The last modified date of the Asset.
     */
    @JsonProperty(value = "properties.lastModified", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime lastModified;

    /**
     * The alternate ID of the Asset.
     */
    @JsonProperty(value = "properties.alternateId")
    private String alternateId;

    /**
     * The Asset description.
     */
    @JsonProperty(value = "properties.description")
    private String description;

    /**
     * The name of the asset blob container.
     */
    @JsonProperty(value = "properties.container")
    private String container;

    /**
     * The ARM resource ID of the Azure Storage account containing the Asset.
     */
    @JsonProperty(value = "properties.storageAccountId")
    private String storageAccountId;

    /**
     * The Asset encryption format. One of None, MediaStorageEncryption,
     * StaticCommonEncryption or StaticEnvelopeEncryption. Possible values
     * include: 'None', 'MediaStorageClientEncryption',
     * 'StaticCommonEncryption', 'StaticEnvelopeEncryption'.
     */
    @JsonProperty(value = "properties.storageEncryptionFormat")
    private AssetStorageEncryptionFormat storageEncryptionFormat;

    /**
     * The Base64 encoded key for the Asset storage encryption.
     */
    @JsonProperty(value = "properties.storageEncryptionKey")
    private String storageEncryptionKey;

    /**
     * Get the assetId value.
     *
     * @return the assetId value
     */
    public UUID assetId() {
        return this.assetId;
    }

    /**
     * Get the created value.
     *
     * @return the created value
     */
    public DateTime created() {
        return this.created;
    }

    /**
     * Get the lastModified value.
     *
     * @return the lastModified value
     */
    public DateTime lastModified() {
        return this.lastModified;
    }

    /**
     * Get the alternateId value.
     *
     * @return the alternateId value
     */
    public String alternateId() {
        return this.alternateId;
    }

    /**
     * Set the alternateId value.
     *
     * @param alternateId the alternateId value to set
     * @return the AssetInner object itself.
     */
    public AssetInner withAlternateId(String alternateId) {
        this.alternateId = alternateId;
        return this;
    }

    /**
     * Get the description value.
     *
     * @return the description value
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description value.
     *
     * @param description the description value to set
     * @return the AssetInner object itself.
     */
    public AssetInner withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the container value.
     *
     * @return the container value
     */
    public String container() {
        return this.container;
    }

    /**
     * Set the container value.
     *
     * @param container the container value to set
     * @return the AssetInner object itself.
     */
    public AssetInner withContainer(String container) {
        this.container = container;
        return this;
    }

    /**
     * Get the storageAccountId value.
     *
     * @return the storageAccountId value
     */
    public String storageAccountId() {
        return this.storageAccountId;
    }

    /**
     * Set the storageAccountId value.
     *
     * @param storageAccountId the storageAccountId value to set
     * @return the AssetInner object itself.
     */
    public AssetInner withStorageAccountId(String storageAccountId) {
        this.storageAccountId = storageAccountId;
        return this;
    }

    /**
     * Get the storageEncryptionFormat value.
     *
     * @return the storageEncryptionFormat value
     */
    public AssetStorageEncryptionFormat storageEncryptionFormat() {
        return this.storageEncryptionFormat;
    }

    /**
     * Set the storageEncryptionFormat value.
     *
     * @param storageEncryptionFormat the storageEncryptionFormat value to set
     * @return the AssetInner object itself.
     */
    public AssetInner withStorageEncryptionFormat(AssetStorageEncryptionFormat storageEncryptionFormat) {
        this.storageEncryptionFormat = storageEncryptionFormat;
        return this;
    }

    /**
     * Get the storageEncryptionKey value.
     *
     * @return the storageEncryptionKey value
     */
    public String storageEncryptionKey() {
        return this.storageEncryptionKey;
    }

    /**
     * Set the storageEncryptionKey value.
     *
     * @param storageEncryptionKey the storageEncryptionKey value to set
     * @return the AssetInner object itself.
     */
    public AssetInner withStorageEncryptionKey(String storageEncryptionKey) {
        this.storageEncryptionKey = storageEncryptionKey;
        return this;
    }

}
