// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.network;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * The ConnectionStateSnapshot model.
 */
@Fluent
public final class ConnectionStateSnapshot {
    /*
     * The connection state.
     */
    @JsonProperty(value = "connectionState")
    private ConnectionState connectionState;

    /*
     * The start time of the connection snapshot.
     */
    @JsonProperty(value = "startTime")
    private OffsetDateTime startTime;

    /*
     * The end time of the connection snapshot.
     */
    @JsonProperty(value = "endTime")
    private OffsetDateTime endTime;

    /*
     * Connectivity analysis evaluation state.
     */
    @JsonProperty(value = "evaluationState")
    private EvaluationState evaluationState;

    /*
     * Average latency in ms.
     */
    @JsonProperty(value = "avgLatencyInMs")
    private Integer avgLatencyInMs;

    /*
     * Minimum latency in ms.
     */
    @JsonProperty(value = "minLatencyInMs")
    private Integer minLatencyInMs;

    /*
     * Maximum latency in ms.
     */
    @JsonProperty(value = "maxLatencyInMs")
    private Integer maxLatencyInMs;

    /*
     * The number of sent probes.
     */
    @JsonProperty(value = "probesSent")
    private Integer probesSent;

    /*
     * The number of failed probes.
     */
    @JsonProperty(value = "probesFailed")
    private Integer probesFailed;

    /*
     * List of hops between the source and the destination.
     */
    @JsonProperty(value = "hops", access = JsonProperty.Access.WRITE_ONLY)
    private List<ConnectivityHop> hops;

    /**
     * Get the connectionState property: The connection state.
     * 
     * @return the connectionState value.
     */
    public ConnectionState getConnectionState() {
        return this.connectionState;
    }

    /**
     * Set the connectionState property: The connection state.
     * 
     * @param connectionState the connectionState value to set.
     * @return the ConnectionStateSnapshot object itself.
     */
    public ConnectionStateSnapshot setConnectionState(ConnectionState connectionState) {
        this.connectionState = connectionState;
        return this;
    }

    /**
     * Get the startTime property: The start time of the connection snapshot.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime getStartTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: The start time of the connection snapshot.
     * 
     * @param startTime the startTime value to set.
     * @return the ConnectionStateSnapshot object itself.
     */
    public ConnectionStateSnapshot setStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: The end time of the connection snapshot.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime getEndTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: The end time of the connection snapshot.
     * 
     * @param endTime the endTime value to set.
     * @return the ConnectionStateSnapshot object itself.
     */
    public ConnectionStateSnapshot setEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the evaluationState property: Connectivity analysis evaluation
     * state.
     * 
     * @return the evaluationState value.
     */
    public EvaluationState getEvaluationState() {
        return this.evaluationState;
    }

    /**
     * Set the evaluationState property: Connectivity analysis evaluation
     * state.
     * 
     * @param evaluationState the evaluationState value to set.
     * @return the ConnectionStateSnapshot object itself.
     */
    public ConnectionStateSnapshot setEvaluationState(EvaluationState evaluationState) {
        this.evaluationState = evaluationState;
        return this;
    }

    /**
     * Get the avgLatencyInMs property: Average latency in ms.
     * 
     * @return the avgLatencyInMs value.
     */
    public Integer getAvgLatencyInMs() {
        return this.avgLatencyInMs;
    }

    /**
     * Set the avgLatencyInMs property: Average latency in ms.
     * 
     * @param avgLatencyInMs the avgLatencyInMs value to set.
     * @return the ConnectionStateSnapshot object itself.
     */
    public ConnectionStateSnapshot setAvgLatencyInMs(Integer avgLatencyInMs) {
        this.avgLatencyInMs = avgLatencyInMs;
        return this;
    }

    /**
     * Get the minLatencyInMs property: Minimum latency in ms.
     * 
     * @return the minLatencyInMs value.
     */
    public Integer getMinLatencyInMs() {
        return this.minLatencyInMs;
    }

    /**
     * Set the minLatencyInMs property: Minimum latency in ms.
     * 
     * @param minLatencyInMs the minLatencyInMs value to set.
     * @return the ConnectionStateSnapshot object itself.
     */
    public ConnectionStateSnapshot setMinLatencyInMs(Integer minLatencyInMs) {
        this.minLatencyInMs = minLatencyInMs;
        return this;
    }

    /**
     * Get the maxLatencyInMs property: Maximum latency in ms.
     * 
     * @return the maxLatencyInMs value.
     */
    public Integer getMaxLatencyInMs() {
        return this.maxLatencyInMs;
    }

    /**
     * Set the maxLatencyInMs property: Maximum latency in ms.
     * 
     * @param maxLatencyInMs the maxLatencyInMs value to set.
     * @return the ConnectionStateSnapshot object itself.
     */
    public ConnectionStateSnapshot setMaxLatencyInMs(Integer maxLatencyInMs) {
        this.maxLatencyInMs = maxLatencyInMs;
        return this;
    }

    /**
     * Get the probesSent property: The number of sent probes.
     * 
     * @return the probesSent value.
     */
    public Integer getProbesSent() {
        return this.probesSent;
    }

    /**
     * Set the probesSent property: The number of sent probes.
     * 
     * @param probesSent the probesSent value to set.
     * @return the ConnectionStateSnapshot object itself.
     */
    public ConnectionStateSnapshot setProbesSent(Integer probesSent) {
        this.probesSent = probesSent;
        return this;
    }

    /**
     * Get the probesFailed property: The number of failed probes.
     * 
     * @return the probesFailed value.
     */
    public Integer getProbesFailed() {
        return this.probesFailed;
    }

    /**
     * Set the probesFailed property: The number of failed probes.
     * 
     * @param probesFailed the probesFailed value to set.
     * @return the ConnectionStateSnapshot object itself.
     */
    public ConnectionStateSnapshot setProbesFailed(Integer probesFailed) {
        this.probesFailed = probesFailed;
        return this;
    }

    /**
     * Get the hops property: List of hops between the source and the
     * destination.
     * 
     * @return the hops value.
     */
    public List<ConnectivityHop> getHops() {
        return this.hops;
    }
}
