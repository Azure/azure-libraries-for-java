// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.network.model;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * The VirtualNetworkTap model.
 */
@JsonFlatten
@Fluent
public class VirtualNetworkTapInner extends Resource {
    /*
     * Gets a unique read-only string that changes whenever the resource is
     * updated.
     */
    @JsonProperty(value = "etag")
    private String etag;

    /*
     * Specifies the list of resource IDs for the network interface IP
     * configuration that needs to be tapped.
     */
    @JsonProperty(value = "properties.networkInterfaceTapConfigurations", access = JsonProperty.Access.WRITE_ONLY)
    private List<NetworkInterfaceTapConfigurationInner> networkInterfaceTapConfigurations;

    /*
     * The resourceGuid property of the virtual network tap.
     */
    @JsonProperty(value = "properties.resourceGuid", access = JsonProperty.Access.WRITE_ONLY)
    private String resourceGuid;

    /*
     * The provisioning state of the virtual network tap. Possible values are:
     * 'Updating', 'Deleting', and 'Failed'.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /*
     * IPConfiguration in a network interface.
     */
    @JsonProperty(value = "properties.destinationNetworkInterfaceIPConfiguration")
    private NetworkInterfaceIPConfigurationInner destinationNetworkInterfaceIPConfiguration;

    /*
     * Frontend IP address of the load balancer.
     */
    @JsonProperty(value = "properties.destinationLoadBalancerFrontEndIPConfiguration")
    private FrontendIPConfigurationInner destinationLoadBalancerFrontEndIPConfiguration;

    /*
     * The VXLAN destination port that will receive the tapped traffic.
     */
    @JsonProperty(value = "properties.destinationPort")
    private Integer destinationPort;

    /**
     * Get the etag property: Gets a unique read-only string that changes
     * whenever the resource is updated.
     * 
     * @return the etag value.
     */
    public String getEtag() {
        return this.etag;
    }

    /**
     * Set the etag property: Gets a unique read-only string that changes
     * whenever the resource is updated.
     * 
     * @param etag the etag value to set.
     * @return the VirtualNetworkTapInner object itself.
     */
    public VirtualNetworkTapInner setEtag(String etag) {
        this.etag = etag;
        return this;
    }

    /**
     * Get the networkInterfaceTapConfigurations property: Specifies the list
     * of resource IDs for the network interface IP configuration that needs to
     * be tapped.
     * 
     * @return the networkInterfaceTapConfigurations value.
     */
    public List<NetworkInterfaceTapConfigurationInner> getNetworkInterfaceTapConfigurations() {
        return this.networkInterfaceTapConfigurations;
    }

    /**
     * Get the resourceGuid property: The resourceGuid property of the virtual
     * network tap.
     * 
     * @return the resourceGuid value.
     */
    public String getResourceGuid() {
        return this.resourceGuid;
    }

    /**
     * Get the provisioningState property: The provisioning state of the
     * virtual network tap. Possible values are: 'Updating', 'Deleting', and
     * 'Failed'.
     * 
     * @return the provisioningState value.
     */
    public String getProvisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the destinationNetworkInterfaceIPConfiguration property:
     * IPConfiguration in a network interface.
     * 
     * @return the destinationNetworkInterfaceIPConfiguration value.
     */
    public NetworkInterfaceIPConfigurationInner getDestinationNetworkInterfaceIPConfiguration() {
        return this.destinationNetworkInterfaceIPConfiguration;
    }

    /**
     * Set the destinationNetworkInterfaceIPConfiguration property:
     * IPConfiguration in a network interface.
     * 
     * @param destinationNetworkInterfaceIPConfiguration the
     * destinationNetworkInterfaceIPConfiguration value to set.
     * @return the VirtualNetworkTapInner object itself.
     */
    public VirtualNetworkTapInner setDestinationNetworkInterfaceIPConfiguration(NetworkInterfaceIPConfigurationInner destinationNetworkInterfaceIPConfiguration) {
        this.destinationNetworkInterfaceIPConfiguration = destinationNetworkInterfaceIPConfiguration;
        return this;
    }

    /**
     * Get the destinationLoadBalancerFrontEndIPConfiguration property:
     * Frontend IP address of the load balancer.
     * 
     * @return the destinationLoadBalancerFrontEndIPConfiguration value.
     */
    public FrontendIPConfigurationInner getDestinationLoadBalancerFrontEndIPConfiguration() {
        return this.destinationLoadBalancerFrontEndIPConfiguration;
    }

    /**
     * Set the destinationLoadBalancerFrontEndIPConfiguration property:
     * Frontend IP address of the load balancer.
     * 
     * @param destinationLoadBalancerFrontEndIPConfiguration the
     * destinationLoadBalancerFrontEndIPConfiguration value to set.
     * @return the VirtualNetworkTapInner object itself.
     */
    public VirtualNetworkTapInner setDestinationLoadBalancerFrontEndIPConfiguration(FrontendIPConfigurationInner destinationLoadBalancerFrontEndIPConfiguration) {
        this.destinationLoadBalancerFrontEndIPConfiguration = destinationLoadBalancerFrontEndIPConfiguration;
        return this;
    }

    /**
     * Get the destinationPort property: The VXLAN destination port that will
     * receive the tapped traffic.
     * 
     * @return the destinationPort value.
     */
    public Integer getDestinationPort() {
        return this.destinationPort;
    }

    /**
     * Set the destinationPort property: The VXLAN destination port that will
     * receive the tapped traffic.
     * 
     * @param destinationPort the destinationPort value to set.
     * @return the VirtualNetworkTapInner object itself.
     */
    public VirtualNetworkTapInner setDestinationPort(Integer destinationPort) {
        this.destinationPort = destinationPort;
        return this;
    }
}
