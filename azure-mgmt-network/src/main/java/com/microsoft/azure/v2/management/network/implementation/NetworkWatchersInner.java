/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.v2.management.network.implementation;

import com.microsoft.azure.v2.AzureProxy;
import com.microsoft.azure.v2.OperationStatus;
import com.microsoft.azure.v2.Page;
import com.microsoft.azure.v2.PagedList;
import com.microsoft.azure.v2.management.network.AvailableProvidersListParameters;
import com.microsoft.azure.v2.management.network.AzureReachabilityReportParameters;
import com.microsoft.azure.v2.management.network.ConnectivityParameters;
import com.microsoft.azure.v2.management.network.ErrorResponseException;
import com.microsoft.azure.v2.management.network.FlowLogStatusParameters;
import com.microsoft.azure.v2.management.network.NetworkConfigurationDiagnosticParameters;
import com.microsoft.azure.v2.management.network.NextHopParameters;
import com.microsoft.azure.v2.management.network.QueryTroubleshootingParameters;
import com.microsoft.azure.v2.management.network.SecurityGroupViewParameters;
import com.microsoft.azure.v2.management.network.TagsObject;
import com.microsoft.azure.v2.management.network.TopologyParameters;
import com.microsoft.azure.v2.management.network.TroubleshootingParameters;
import com.microsoft.azure.v2.management.network.VerificationIPFlowParameters;
import com.microsoft.azure.v2.management.resources.fluentcore.collection.InnerSupportsDelete;
import com.microsoft.azure.v2.management.resources.fluentcore.collection.InnerSupportsGet;
import com.microsoft.azure.v2.management.resources.fluentcore.collection.InnerSupportsListing;
import com.microsoft.azure.v2.util.ServiceFutureUtil;
import com.microsoft.rest.v2.BodyResponse;
import com.microsoft.rest.v2.OperationDescription;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.Validator;
import com.microsoft.rest.v2.VoidResponse;
import com.microsoft.rest.v2.annotations.BodyParam;
import com.microsoft.rest.v2.annotations.DELETE;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.HeaderParam;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.PATCH;
import com.microsoft.rest.v2.annotations.PathParam;
import com.microsoft.rest.v2.annotations.POST;
import com.microsoft.rest.v2.annotations.PUT;
import com.microsoft.rest.v2.annotations.QueryParam;
import com.microsoft.rest.v2.annotations.ResumeOperation;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import io.reactivex.Maybe;
import io.reactivex.Observable;
import io.reactivex.Single;
import io.reactivex.annotations.NonNull;
import java.util.Map;

/**
 * An instance of this class provides access to all the operations defined in
 * NetworkWatchers.
 */
public final class NetworkWatchersInner implements InnerSupportsGet<NetworkWatcherInner>, InnerSupportsDelete<Void>, InnerSupportsListing<NetworkWatcherInner> {
    /**
     * The proxy service used to perform REST calls.
     */
    private NetworkWatchersService service;

    /**
     * The service client containing this operation class.
     */
    private NetworkManagementClientImpl client;

    /**
     * Initializes an instance of NetworkWatchersInner.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public NetworkWatchersInner(NetworkManagementClientImpl client) {
        this.service = AzureProxy.create(NetworkWatchersService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for NetworkWatchers to be used
     * by the proxy service to perform REST calls.
     */
    @Host("https://management.azure.com")
    private interface NetworkWatchersService {
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<BodyResponse<NetworkWatcherInner>> createOrUpdate(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json; charset=utf-8") NetworkWatcherInner parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<BodyResponse<NetworkWatcherInner>> getByResourceGroup(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @DELETE("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Observable<OperationStatus<Void>> beginDelete(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @DELETE("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<VoidResponse> delete(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @DELETE("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        @ResumeOperation
        Observable<OperationStatus<Void>> resumeDelete(OperationDescription operationDescription);

        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<BodyResponse<NetworkWatcherInner>> updateTags(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @BodyParam("application/json; charset=utf-8") TagsObject parameters);

        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<BodyResponse<PageImpl1<NetworkWatcherInner>>> listByResourceGroup(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Network/networkWatchers")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<BodyResponse<PageImpl1<NetworkWatcherInner>>> list(@PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/topology")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<BodyResponse<TopologyInner>> getTopology(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json; charset=utf-8") TopologyParameters parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/ipFlowVerify")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Observable<OperationStatus<VerificationIPFlowResultInner>> beginVerifyIPFlow(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json; charset=utf-8") VerificationIPFlowParameters parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/ipFlowVerify")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<BodyResponse<VerificationIPFlowResultInner>> verifyIPFlow(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json; charset=utf-8") VerificationIPFlowParameters parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/ipFlowVerify")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        @ResumeOperation
        Observable<OperationStatus<VerificationIPFlowResultInner>> resumeVerifyIPFlow(OperationDescription operationDescription);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/nextHop")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Observable<OperationStatus<NextHopResultInner>> beginGetNextHop(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json; charset=utf-8") NextHopParameters parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/nextHop")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<BodyResponse<NextHopResultInner>> getNextHop(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json; charset=utf-8") NextHopParameters parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/nextHop")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        @ResumeOperation
        Observable<OperationStatus<NextHopResultInner>> resumeGetNextHop(OperationDescription operationDescription);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/securityGroupView")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Observable<OperationStatus<SecurityGroupViewResultInner>> beginGetVMSecurityRules(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @BodyParam("application/json; charset=utf-8") SecurityGroupViewParameters parameters);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/securityGroupView")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<BodyResponse<SecurityGroupViewResultInner>> getVMSecurityRules(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @BodyParam("application/json; charset=utf-8") SecurityGroupViewParameters parameters);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/securityGroupView")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        @ResumeOperation
        Observable<OperationStatus<SecurityGroupViewResultInner>> resumeGetVMSecurityRules(OperationDescription operationDescription);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/troubleshoot")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Observable<OperationStatus<TroubleshootingResultInner>> beginGetTroubleshooting(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json; charset=utf-8") TroubleshootingParameters parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/troubleshoot")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<BodyResponse<TroubleshootingResultInner>> getTroubleshooting(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json; charset=utf-8") TroubleshootingParameters parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/troubleshoot")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        @ResumeOperation
        Observable<OperationStatus<TroubleshootingResultInner>> resumeGetTroubleshooting(OperationDescription operationDescription);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/queryTroubleshootResult")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Observable<OperationStatus<TroubleshootingResultInner>> beginGetTroubleshootingResult(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @BodyParam("application/json; charset=utf-8") QueryTroubleshootingParameters parameters);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/queryTroubleshootResult")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<BodyResponse<TroubleshootingResultInner>> getTroubleshootingResult(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @BodyParam("application/json; charset=utf-8") QueryTroubleshootingParameters parameters);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/queryTroubleshootResult")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        @ResumeOperation
        Observable<OperationStatus<TroubleshootingResultInner>> resumeGetTroubleshootingResult(OperationDescription operationDescription);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/configureFlowLog")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Observable<OperationStatus<FlowLogInformationInner>> beginSetFlowLogConfiguration(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json; charset=utf-8") FlowLogInformationInner parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/configureFlowLog")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<BodyResponse<FlowLogInformationInner>> setFlowLogConfiguration(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json; charset=utf-8") FlowLogInformationInner parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/configureFlowLog")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        @ResumeOperation
        Observable<OperationStatus<FlowLogInformationInner>> resumeSetFlowLogConfiguration(OperationDescription operationDescription);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/queryFlowLogStatus")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Observable<OperationStatus<FlowLogInformationInner>> beginGetFlowLogStatus(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @BodyParam("application/json; charset=utf-8") FlowLogStatusParameters parameters);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/queryFlowLogStatus")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<BodyResponse<FlowLogInformationInner>> getFlowLogStatus(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @BodyParam("application/json; charset=utf-8") FlowLogStatusParameters parameters);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/queryFlowLogStatus")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        @ResumeOperation
        Observable<OperationStatus<FlowLogInformationInner>> resumeGetFlowLogStatus(OperationDescription operationDescription);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectivityCheck")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Observable<OperationStatus<ConnectivityInformationInner>> beginCheckConnectivity(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json; charset=utf-8") ConnectivityParameters parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectivityCheck")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<BodyResponse<ConnectivityInformationInner>> checkConnectivity(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json; charset=utf-8") ConnectivityParameters parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectivityCheck")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        @ResumeOperation
        Observable<OperationStatus<ConnectivityInformationInner>> resumeCheckConnectivity(OperationDescription operationDescription);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/azureReachabilityReport")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Observable<OperationStatus<AzureReachabilityReportInner>> beginGetAzureReachabilityReport(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json; charset=utf-8") AzureReachabilityReportParameters parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/azureReachabilityReport")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<BodyResponse<AzureReachabilityReportInner>> getAzureReachabilityReport(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json; charset=utf-8") AzureReachabilityReportParameters parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/azureReachabilityReport")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        @ResumeOperation
        Observable<OperationStatus<AzureReachabilityReportInner>> resumeGetAzureReachabilityReport(OperationDescription operationDescription);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/availableProvidersList")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Observable<OperationStatus<AvailableProvidersListInner>> beginListAvailableProviders(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json; charset=utf-8") AvailableProvidersListParameters parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/availableProvidersList")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<BodyResponse<AvailableProvidersListInner>> listAvailableProviders(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json; charset=utf-8") AvailableProvidersListParameters parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/availableProvidersList")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        @ResumeOperation
        Observable<OperationStatus<AvailableProvidersListInner>> resumeListAvailableProviders(OperationDescription operationDescription);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/networkConfigurationDiagnostic")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Observable<OperationStatus<NetworkConfigurationDiagnosticResponseInner>> beginGetNetworkConfigurationDiagnostic(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json; charset=utf-8") NetworkConfigurationDiagnosticParameters parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/networkConfigurationDiagnostic")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        Single<BodyResponse<NetworkConfigurationDiagnosticResponseInner>> getNetworkConfigurationDiagnostic(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("networkWatcherName") String networkWatcherName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json; charset=utf-8") NetworkConfigurationDiagnosticParameters parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/networkConfigurationDiagnostic")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ErrorResponseException.class)
        @ResumeOperation
        Observable<OperationStatus<NetworkConfigurationDiagnosticResponseInner>> resumeGetNetworkConfigurationDiagnostic(OperationDescription operationDescription);
    }

    /**
     * Creates or updates a network watcher in the specified resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param parameters Parameters that define the network watcher resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the NetworkWatcherInner object if successful.
     */
    public NetworkWatcherInner createOrUpdate(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull NetworkWatcherInner parameters) {
        return createOrUpdateAsync(resourceGroupName, networkWatcherName, parameters).blockingGet();
    }

    /**
     * Creates or updates a network watcher in the specified resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param parameters Parameters that define the network watcher resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<NetworkWatcherInner> createOrUpdateAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull NetworkWatcherInner parameters, ServiceCallback<NetworkWatcherInner> serviceCallback) {
        return ServiceFuture.fromBody(createOrUpdateAsync(resourceGroupName, networkWatcherName, parameters), serviceCallback);
    }

    /**
     * Creates or updates a network watcher in the specified resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param parameters Parameters that define the network watcher resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<NetworkWatcherInner>> createOrUpdateWithRestResponseAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull NetworkWatcherInner parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkWatcherName == null) {
            throw new IllegalArgumentException("Parameter networkWatcherName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2018-06-01";
        return service.createOrUpdate(resourceGroupName, networkWatcherName, this.client.subscriptionId(), parameters, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Creates or updates a network watcher in the specified resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param parameters Parameters that define the network watcher resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<NetworkWatcherInner> createOrUpdateAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull NetworkWatcherInner parameters) {
        return createOrUpdateWithRestResponseAsync(resourceGroupName, networkWatcherName, parameters)
            .flatMapMaybe((BodyResponse<NetworkWatcherInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Gets the specified network watcher by resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the NetworkWatcherInner object if successful.
     */
    public NetworkWatcherInner getByResourceGroup(@NonNull String resourceGroupName, @NonNull String networkWatcherName) {
        return getByResourceGroupAsync(resourceGroupName, networkWatcherName).blockingGet();
    }

    /**
     * Gets the specified network watcher by resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<NetworkWatcherInner> getByResourceGroupAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, ServiceCallback<NetworkWatcherInner> serviceCallback) {
        return ServiceFuture.fromBody(getByResourceGroupAsync(resourceGroupName, networkWatcherName), serviceCallback);
    }

    /**
     * Gets the specified network watcher by resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<NetworkWatcherInner>> getByResourceGroupWithRestResponseAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkWatcherName == null) {
            throw new IllegalArgumentException("Parameter networkWatcherName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2018-06-01";
        return service.getByResourceGroup(resourceGroupName, networkWatcherName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage());
    }

    /**
     * Gets the specified network watcher by resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<NetworkWatcherInner> getByResourceGroupAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName) {
        return getByResourceGroupWithRestResponseAsync(resourceGroupName, networkWatcherName)
            .flatMapMaybe((BodyResponse<NetworkWatcherInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Deletes the specified network watcher resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void beginDelete(@NonNull String resourceGroupName, @NonNull String networkWatcherName) {
        beginDeleteAsync(resourceGroupName, networkWatcherName).blockingLast();
    }

    /**
     * Deletes the specified network watcher resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the ServiceFuture&lt;Void&gt; object.
     */
    public ServiceFuture<Void> beginDeleteAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, ServiceCallback<Void> serviceCallback) {
        return ServiceFutureUtil.fromLRO(beginDeleteAsync(resourceGroupName, networkWatcherName), serviceCallback);
    }

    /**
     * Deletes the specified network watcher resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    public Observable<OperationStatus<Void>> beginDeleteAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkWatcherName == null) {
            throw new IllegalArgumentException("Parameter networkWatcherName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2018-06-01";
        return service.beginDelete(resourceGroupName, networkWatcherName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage());
    }

    /**
     * Deletes the specified network watcher resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void delete(@NonNull String resourceGroupName, @NonNull String networkWatcherName) {
        deleteAsync(resourceGroupName, networkWatcherName).blockingGet();
    }

    /**
     * Deletes the specified network watcher resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> deleteAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(deleteAsync(resourceGroupName, networkWatcherName), serviceCallback);
    }

    /**
     * Deletes the specified network watcher resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> deleteWithRestResponseAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkWatcherName == null) {
            throw new IllegalArgumentException("Parameter networkWatcherName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2018-06-01";
        return service.delete(resourceGroupName, networkWatcherName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage());
    }

    /**
     * Deletes the specified network watcher resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<Void> deleteAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName) {
        return deleteWithRestResponseAsync(resourceGroupName, networkWatcherName)
            .flatMapMaybe((VoidResponse res) -> Maybe.empty());
    }

    /**
     * Deletes the specified network watcher resource. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    public Observable<OperationStatus<Void>> resumeDelete(OperationDescription operationDescription) {
        if (operationDescription == null) {
            throw new IllegalArgumentException("Parameter operationDescription is required and cannot be null.");
        }
        return service.resumeDelete(operationDescription);
    }

    /**
     * Updates a network watcher tags.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the NetworkWatcherInner object if successful.
     */
    public NetworkWatcherInner updateTags(@NonNull String resourceGroupName, @NonNull String networkWatcherName) {
        return updateTagsAsync(resourceGroupName, networkWatcherName).blockingGet();
    }

    /**
     * Updates a network watcher tags.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<NetworkWatcherInner> updateTagsAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, ServiceCallback<NetworkWatcherInner> serviceCallback) {
        return ServiceFuture.fromBody(updateTagsAsync(resourceGroupName, networkWatcherName), serviceCallback);
    }

    /**
     * Updates a network watcher tags.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<NetworkWatcherInner>> updateTagsWithRestResponseAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkWatcherName == null) {
            throw new IllegalArgumentException("Parameter networkWatcherName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2018-06-01";
        final Map<String, String> tags = null;
        TagsObject parameters = new TagsObject();
        parameters.withTags(null);
        return service.updateTags(resourceGroupName, networkWatcherName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), parameters);
    }

    /**
     * Updates a network watcher tags.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<NetworkWatcherInner> updateTagsAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName) {
        return updateTagsWithRestResponseAsync(resourceGroupName, networkWatcherName)
            .flatMapMaybe((BodyResponse<NetworkWatcherInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Updates a network watcher tags.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param tags Resource tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the NetworkWatcherInner object if successful.
     */
    public NetworkWatcherInner updateTags(@NonNull String resourceGroupName, @NonNull String networkWatcherName, Map<String, String> tags) {
        return updateTagsAsync(resourceGroupName, networkWatcherName, tags).blockingGet();
    }

    /**
     * Updates a network watcher tags.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param tags Resource tags.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<NetworkWatcherInner> updateTagsAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, Map<String, String> tags, ServiceCallback<NetworkWatcherInner> serviceCallback) {
        return ServiceFuture.fromBody(updateTagsAsync(resourceGroupName, networkWatcherName, tags), serviceCallback);
    }

    /**
     * Updates a network watcher tags.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param tags Resource tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<NetworkWatcherInner>> updateTagsWithRestResponseAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, Map<String, String> tags) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkWatcherName == null) {
            throw new IllegalArgumentException("Parameter networkWatcherName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        Validator.validate(tags);
        final String apiVersion = "2018-06-01";
        TagsObject parameters = new TagsObject();
        parameters.withTags(tags);
        return service.updateTags(resourceGroupName, networkWatcherName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), parameters);
    }

    /**
     * Updates a network watcher tags.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param tags Resource tags.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<NetworkWatcherInner> updateTagsAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, Map<String, String> tags) {
        return updateTagsWithRestResponseAsync(resourceGroupName, networkWatcherName, tags)
            .flatMapMaybe((BodyResponse<NetworkWatcherInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Gets all network watchers by resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @return the PagedList&lt;NetworkWatcherInner&gt; object if successful.
     */
    public PagedList<NetworkWatcherInner> listByResourceGroup(@NonNull String resourceGroupName) {
        Page<NetworkWatcherInner> page = listByResourceGroupAsync(resourceGroupName).blockingSingle();
        return new PagedList<NetworkWatcherInner>(page) {
            @Override
            public Page<NetworkWatcherInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * Gets all network watchers by resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;NetworkWatcherInner&gt; object.
     */
    public Observable<Page<NetworkWatcherInner>> listByResourceGroupAsync(@NonNull String resourceGroupName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2018-06-01";
        return service.listByResourceGroup(resourceGroupName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl1<NetworkWatcherInner>> res) -> (Page<NetworkWatcherInner>) res.body())
            .toObservable();
    }

    /**
     * Gets all network watchers by subscription.
     *
     * @return the PagedList&lt;NetworkWatcherInner&gt; object if successful.
     */
    public PagedList<NetworkWatcherInner> list() {
        Page<NetworkWatcherInner> page = listAsync().blockingSingle();
        return new PagedList<NetworkWatcherInner>(page) {
            @Override
            public Page<NetworkWatcherInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * Gets all network watchers by subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;NetworkWatcherInner&gt; object.
     */
    public Observable<Page<NetworkWatcherInner>> listAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2018-06-01";
        return service.list(this.client.subscriptionId(), apiVersion, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl1<NetworkWatcherInner>> res) -> (Page<NetworkWatcherInner>) res.body())
            .toObservable();
    }

    /**
     * Gets the current network topology by resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param parameters Parameters that define the representation of topology.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the TopologyInner object if successful.
     */
    public TopologyInner getTopology(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull TopologyParameters parameters) {
        return getTopologyAsync(resourceGroupName, networkWatcherName, parameters).blockingGet();
    }

    /**
     * Gets the current network topology by resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param parameters Parameters that define the representation of topology.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<TopologyInner> getTopologyAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull TopologyParameters parameters, ServiceCallback<TopologyInner> serviceCallback) {
        return ServiceFuture.fromBody(getTopologyAsync(resourceGroupName, networkWatcherName, parameters), serviceCallback);
    }

    /**
     * Gets the current network topology by resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param parameters Parameters that define the representation of topology.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<TopologyInner>> getTopologyWithRestResponseAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull TopologyParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkWatcherName == null) {
            throw new IllegalArgumentException("Parameter networkWatcherName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2018-06-01";
        return service.getTopology(resourceGroupName, networkWatcherName, this.client.subscriptionId(), parameters, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Gets the current network topology by resource group.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param parameters Parameters that define the representation of topology.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<TopologyInner> getTopologyAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull TopologyParameters parameters) {
        return getTopologyWithRestResponseAsync(resourceGroupName, networkWatcherName, parameters)
            .flatMapMaybe((BodyResponse<TopologyInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Verify IP flow from the specified VM to a location given the currently configured NSG rules.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param parameters Parameters that define the IP flow to be verified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the VerificationIPFlowResultInner object if successful.
     */
    public VerificationIPFlowResultInner beginVerifyIPFlow(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull VerificationIPFlowParameters parameters) {
        return beginVerifyIPFlowAsync(resourceGroupName, networkWatcherName, parameters).blockingLast().result();
    }

    /**
     * Verify IP flow from the specified VM to a location given the currently configured NSG rules.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param parameters Parameters that define the IP flow to be verified.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the ServiceFuture&lt;VerificationIPFlowResultInner&gt; object.
     */
    public ServiceFuture<VerificationIPFlowResultInner> beginVerifyIPFlowAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull VerificationIPFlowParameters parameters, ServiceCallback<VerificationIPFlowResultInner> serviceCallback) {
        return ServiceFutureUtil.fromLRO(beginVerifyIPFlowAsync(resourceGroupName, networkWatcherName, parameters), serviceCallback);
    }

    /**
     * Verify IP flow from the specified VM to a location given the currently configured NSG rules.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param parameters Parameters that define the IP flow to be verified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    public Observable<OperationStatus<VerificationIPFlowResultInner>> beginVerifyIPFlowAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull VerificationIPFlowParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkWatcherName == null) {
            throw new IllegalArgumentException("Parameter networkWatcherName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2018-06-01";
        return service.beginVerifyIPFlow(resourceGroupName, networkWatcherName, this.client.subscriptionId(), parameters, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Verify IP flow from the specified VM to a location given the currently configured NSG rules.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param parameters Parameters that define the IP flow to be verified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the VerificationIPFlowResultInner object if successful.
     */
    public VerificationIPFlowResultInner verifyIPFlow(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull VerificationIPFlowParameters parameters) {
        return verifyIPFlowAsync(resourceGroupName, networkWatcherName, parameters).blockingGet();
    }

    /**
     * Verify IP flow from the specified VM to a location given the currently configured NSG rules.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param parameters Parameters that define the IP flow to be verified.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<VerificationIPFlowResultInner> verifyIPFlowAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull VerificationIPFlowParameters parameters, ServiceCallback<VerificationIPFlowResultInner> serviceCallback) {
        return ServiceFuture.fromBody(verifyIPFlowAsync(resourceGroupName, networkWatcherName, parameters), serviceCallback);
    }

    /**
     * Verify IP flow from the specified VM to a location given the currently configured NSG rules.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param parameters Parameters that define the IP flow to be verified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<VerificationIPFlowResultInner>> verifyIPFlowWithRestResponseAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull VerificationIPFlowParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkWatcherName == null) {
            throw new IllegalArgumentException("Parameter networkWatcherName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2018-06-01";
        return service.verifyIPFlow(resourceGroupName, networkWatcherName, this.client.subscriptionId(), parameters, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Verify IP flow from the specified VM to a location given the currently configured NSG rules.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param parameters Parameters that define the IP flow to be verified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<VerificationIPFlowResultInner> verifyIPFlowAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull VerificationIPFlowParameters parameters) {
        return verifyIPFlowWithRestResponseAsync(resourceGroupName, networkWatcherName, parameters)
            .flatMapMaybe((BodyResponse<VerificationIPFlowResultInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Verify IP flow from the specified VM to a location given the currently configured NSG rules. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    public Observable<OperationStatus<VerificationIPFlowResultInner>> resumeVerifyIPFlow(OperationDescription operationDescription) {
        if (operationDescription == null) {
            throw new IllegalArgumentException("Parameter operationDescription is required and cannot be null.");
        }
        return service.resumeVerifyIPFlow(operationDescription);
    }

    /**
     * Gets the next hop from the specified VM.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param parameters Parameters that define the source and destination endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the NextHopResultInner object if successful.
     */
    public NextHopResultInner beginGetNextHop(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull NextHopParameters parameters) {
        return beginGetNextHopAsync(resourceGroupName, networkWatcherName, parameters).blockingLast().result();
    }

    /**
     * Gets the next hop from the specified VM.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param parameters Parameters that define the source and destination endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the ServiceFuture&lt;NextHopResultInner&gt; object.
     */
    public ServiceFuture<NextHopResultInner> beginGetNextHopAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull NextHopParameters parameters, ServiceCallback<NextHopResultInner> serviceCallback) {
        return ServiceFutureUtil.fromLRO(beginGetNextHopAsync(resourceGroupName, networkWatcherName, parameters), serviceCallback);
    }

    /**
     * Gets the next hop from the specified VM.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param parameters Parameters that define the source and destination endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    public Observable<OperationStatus<NextHopResultInner>> beginGetNextHopAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull NextHopParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkWatcherName == null) {
            throw new IllegalArgumentException("Parameter networkWatcherName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2018-06-01";
        return service.beginGetNextHop(resourceGroupName, networkWatcherName, this.client.subscriptionId(), parameters, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Gets the next hop from the specified VM.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param parameters Parameters that define the source and destination endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the NextHopResultInner object if successful.
     */
    public NextHopResultInner getNextHop(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull NextHopParameters parameters) {
        return getNextHopAsync(resourceGroupName, networkWatcherName, parameters).blockingGet();
    }

    /**
     * Gets the next hop from the specified VM.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param parameters Parameters that define the source and destination endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<NextHopResultInner> getNextHopAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull NextHopParameters parameters, ServiceCallback<NextHopResultInner> serviceCallback) {
        return ServiceFuture.fromBody(getNextHopAsync(resourceGroupName, networkWatcherName, parameters), serviceCallback);
    }

    /**
     * Gets the next hop from the specified VM.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param parameters Parameters that define the source and destination endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<NextHopResultInner>> getNextHopWithRestResponseAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull NextHopParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkWatcherName == null) {
            throw new IllegalArgumentException("Parameter networkWatcherName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2018-06-01";
        return service.getNextHop(resourceGroupName, networkWatcherName, this.client.subscriptionId(), parameters, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Gets the next hop from the specified VM.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param parameters Parameters that define the source and destination endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<NextHopResultInner> getNextHopAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull NextHopParameters parameters) {
        return getNextHopWithRestResponseAsync(resourceGroupName, networkWatcherName, parameters)
            .flatMapMaybe((BodyResponse<NextHopResultInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Gets the next hop from the specified VM. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    public Observable<OperationStatus<NextHopResultInner>> resumeGetNextHop(OperationDescription operationDescription) {
        if (operationDescription == null) {
            throw new IllegalArgumentException("Parameter operationDescription is required and cannot be null.");
        }
        return service.resumeGetNextHop(operationDescription);
    }

    /**
     * Gets the configured and effective security group rules on the specified VM.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param targetResourceId ID of the target VM.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SecurityGroupViewResultInner object if successful.
     */
    public SecurityGroupViewResultInner beginGetVMSecurityRules(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull String targetResourceId) {
        return beginGetVMSecurityRulesAsync(resourceGroupName, networkWatcherName, targetResourceId).blockingLast().result();
    }

    /**
     * Gets the configured and effective security group rules on the specified VM.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param targetResourceId ID of the target VM.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the ServiceFuture&lt;SecurityGroupViewResultInner&gt; object.
     */
    public ServiceFuture<SecurityGroupViewResultInner> beginGetVMSecurityRulesAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull String targetResourceId, ServiceCallback<SecurityGroupViewResultInner> serviceCallback) {
        return ServiceFutureUtil.fromLRO(beginGetVMSecurityRulesAsync(resourceGroupName, networkWatcherName, targetResourceId), serviceCallback);
    }

    /**
     * Gets the configured and effective security group rules on the specified VM.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param targetResourceId ID of the target VM.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    public Observable<OperationStatus<SecurityGroupViewResultInner>> beginGetVMSecurityRulesAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull String targetResourceId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkWatcherName == null) {
            throw new IllegalArgumentException("Parameter networkWatcherName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (targetResourceId == null) {
            throw new IllegalArgumentException("Parameter targetResourceId is required and cannot be null.");
        }
        final String apiVersion = "2018-06-01";
        SecurityGroupViewParameters parameters = new SecurityGroupViewParameters();
        parameters.withTargetResourceId(targetResourceId);
        return service.beginGetVMSecurityRules(resourceGroupName, networkWatcherName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), parameters);
    }

    /**
     * Gets the configured and effective security group rules on the specified VM.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param targetResourceId ID of the target VM.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the SecurityGroupViewResultInner object if successful.
     */
    public SecurityGroupViewResultInner getVMSecurityRules(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull String targetResourceId) {
        return getVMSecurityRulesAsync(resourceGroupName, networkWatcherName, targetResourceId).blockingGet();
    }

    /**
     * Gets the configured and effective security group rules on the specified VM.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param targetResourceId ID of the target VM.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<SecurityGroupViewResultInner> getVMSecurityRulesAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull String targetResourceId, ServiceCallback<SecurityGroupViewResultInner> serviceCallback) {
        return ServiceFuture.fromBody(getVMSecurityRulesAsync(resourceGroupName, networkWatcherName, targetResourceId), serviceCallback);
    }

    /**
     * Gets the configured and effective security group rules on the specified VM.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param targetResourceId ID of the target VM.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<SecurityGroupViewResultInner>> getVMSecurityRulesWithRestResponseAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull String targetResourceId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkWatcherName == null) {
            throw new IllegalArgumentException("Parameter networkWatcherName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (targetResourceId == null) {
            throw new IllegalArgumentException("Parameter targetResourceId is required and cannot be null.");
        }
        final String apiVersion = "2018-06-01";
        SecurityGroupViewParameters parameters = new SecurityGroupViewParameters();
        parameters.withTargetResourceId(targetResourceId);
        return service.getVMSecurityRules(resourceGroupName, networkWatcherName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), parameters);
    }

    /**
     * Gets the configured and effective security group rules on the specified VM.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param targetResourceId ID of the target VM.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<SecurityGroupViewResultInner> getVMSecurityRulesAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull String targetResourceId) {
        return getVMSecurityRulesWithRestResponseAsync(resourceGroupName, networkWatcherName, targetResourceId)
            .flatMapMaybe((BodyResponse<SecurityGroupViewResultInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Gets the configured and effective security group rules on the specified VM. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    public Observable<OperationStatus<SecurityGroupViewResultInner>> resumeGetVMSecurityRules(OperationDescription operationDescription) {
        if (operationDescription == null) {
            throw new IllegalArgumentException("Parameter operationDescription is required and cannot be null.");
        }
        return service.resumeGetVMSecurityRules(operationDescription);
    }

    /**
     * Initiate troubleshooting on a specified resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that define the resource to troubleshoot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the TroubleshootingResultInner object if successful.
     */
    public TroubleshootingResultInner beginGetTroubleshooting(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull TroubleshootingParameters parameters) {
        return beginGetTroubleshootingAsync(resourceGroupName, networkWatcherName, parameters).blockingLast().result();
    }

    /**
     * Initiate troubleshooting on a specified resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that define the resource to troubleshoot.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the ServiceFuture&lt;TroubleshootingResultInner&gt; object.
     */
    public ServiceFuture<TroubleshootingResultInner> beginGetTroubleshootingAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull TroubleshootingParameters parameters, ServiceCallback<TroubleshootingResultInner> serviceCallback) {
        return ServiceFutureUtil.fromLRO(beginGetTroubleshootingAsync(resourceGroupName, networkWatcherName, parameters), serviceCallback);
    }

    /**
     * Initiate troubleshooting on a specified resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that define the resource to troubleshoot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    public Observable<OperationStatus<TroubleshootingResultInner>> beginGetTroubleshootingAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull TroubleshootingParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkWatcherName == null) {
            throw new IllegalArgumentException("Parameter networkWatcherName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2018-06-01";
        return service.beginGetTroubleshooting(resourceGroupName, networkWatcherName, this.client.subscriptionId(), parameters, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Initiate troubleshooting on a specified resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that define the resource to troubleshoot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the TroubleshootingResultInner object if successful.
     */
    public TroubleshootingResultInner getTroubleshooting(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull TroubleshootingParameters parameters) {
        return getTroubleshootingAsync(resourceGroupName, networkWatcherName, parameters).blockingGet();
    }

    /**
     * Initiate troubleshooting on a specified resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that define the resource to troubleshoot.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<TroubleshootingResultInner> getTroubleshootingAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull TroubleshootingParameters parameters, ServiceCallback<TroubleshootingResultInner> serviceCallback) {
        return ServiceFuture.fromBody(getTroubleshootingAsync(resourceGroupName, networkWatcherName, parameters), serviceCallback);
    }

    /**
     * Initiate troubleshooting on a specified resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that define the resource to troubleshoot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<TroubleshootingResultInner>> getTroubleshootingWithRestResponseAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull TroubleshootingParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkWatcherName == null) {
            throw new IllegalArgumentException("Parameter networkWatcherName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2018-06-01";
        return service.getTroubleshooting(resourceGroupName, networkWatcherName, this.client.subscriptionId(), parameters, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Initiate troubleshooting on a specified resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that define the resource to troubleshoot.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<TroubleshootingResultInner> getTroubleshootingAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull TroubleshootingParameters parameters) {
        return getTroubleshootingWithRestResponseAsync(resourceGroupName, networkWatcherName, parameters)
            .flatMapMaybe((BodyResponse<TroubleshootingResultInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Initiate troubleshooting on a specified resource (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    public Observable<OperationStatus<TroubleshootingResultInner>> resumeGetTroubleshooting(OperationDescription operationDescription) {
        if (operationDescription == null) {
            throw new IllegalArgumentException("Parameter operationDescription is required and cannot be null.");
        }
        return service.resumeGetTroubleshooting(operationDescription);
    }

    /**
     * Get the last completed troubleshooting result on a specified resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param targetResourceId The target resource ID to query the troubleshooting result.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the TroubleshootingResultInner object if successful.
     */
    public TroubleshootingResultInner beginGetTroubleshootingResult(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull String targetResourceId) {
        return beginGetTroubleshootingResultAsync(resourceGroupName, networkWatcherName, targetResourceId).blockingLast().result();
    }

    /**
     * Get the last completed troubleshooting result on a specified resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param targetResourceId The target resource ID to query the troubleshooting result.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the ServiceFuture&lt;TroubleshootingResultInner&gt; object.
     */
    public ServiceFuture<TroubleshootingResultInner> beginGetTroubleshootingResultAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull String targetResourceId, ServiceCallback<TroubleshootingResultInner> serviceCallback) {
        return ServiceFutureUtil.fromLRO(beginGetTroubleshootingResultAsync(resourceGroupName, networkWatcherName, targetResourceId), serviceCallback);
    }

    /**
     * Get the last completed troubleshooting result on a specified resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param targetResourceId The target resource ID to query the troubleshooting result.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    public Observable<OperationStatus<TroubleshootingResultInner>> beginGetTroubleshootingResultAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull String targetResourceId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkWatcherName == null) {
            throw new IllegalArgumentException("Parameter networkWatcherName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (targetResourceId == null) {
            throw new IllegalArgumentException("Parameter targetResourceId is required and cannot be null.");
        }
        final String apiVersion = "2018-06-01";
        QueryTroubleshootingParameters parameters = new QueryTroubleshootingParameters();
        parameters.withTargetResourceId(targetResourceId);
        return service.beginGetTroubleshootingResult(resourceGroupName, networkWatcherName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), parameters);
    }

    /**
     * Get the last completed troubleshooting result on a specified resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param targetResourceId The target resource ID to query the troubleshooting result.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the TroubleshootingResultInner object if successful.
     */
    public TroubleshootingResultInner getTroubleshootingResult(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull String targetResourceId) {
        return getTroubleshootingResultAsync(resourceGroupName, networkWatcherName, targetResourceId).blockingGet();
    }

    /**
     * Get the last completed troubleshooting result on a specified resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param targetResourceId The target resource ID to query the troubleshooting result.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<TroubleshootingResultInner> getTroubleshootingResultAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull String targetResourceId, ServiceCallback<TroubleshootingResultInner> serviceCallback) {
        return ServiceFuture.fromBody(getTroubleshootingResultAsync(resourceGroupName, networkWatcherName, targetResourceId), serviceCallback);
    }

    /**
     * Get the last completed troubleshooting result on a specified resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param targetResourceId The target resource ID to query the troubleshooting result.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<TroubleshootingResultInner>> getTroubleshootingResultWithRestResponseAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull String targetResourceId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkWatcherName == null) {
            throw new IllegalArgumentException("Parameter networkWatcherName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (targetResourceId == null) {
            throw new IllegalArgumentException("Parameter targetResourceId is required and cannot be null.");
        }
        final String apiVersion = "2018-06-01";
        QueryTroubleshootingParameters parameters = new QueryTroubleshootingParameters();
        parameters.withTargetResourceId(targetResourceId);
        return service.getTroubleshootingResult(resourceGroupName, networkWatcherName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), parameters);
    }

    /**
     * Get the last completed troubleshooting result on a specified resource.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param targetResourceId The target resource ID to query the troubleshooting result.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<TroubleshootingResultInner> getTroubleshootingResultAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull String targetResourceId) {
        return getTroubleshootingResultWithRestResponseAsync(resourceGroupName, networkWatcherName, targetResourceId)
            .flatMapMaybe((BodyResponse<TroubleshootingResultInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get the last completed troubleshooting result on a specified resource (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    public Observable<OperationStatus<TroubleshootingResultInner>> resumeGetTroubleshootingResult(OperationDescription operationDescription) {
        if (operationDescription == null) {
            throw new IllegalArgumentException("Parameter operationDescription is required and cannot be null.");
        }
        return service.resumeGetTroubleshootingResult(operationDescription);
    }

    /**
     * Configures flow log  and traffic analytics (optional) on a specified resource.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that define the configuration of flow log.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the FlowLogInformationInner object if successful.
     */
    public FlowLogInformationInner beginSetFlowLogConfiguration(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull FlowLogInformationInner parameters) {
        return beginSetFlowLogConfigurationAsync(resourceGroupName, networkWatcherName, parameters).blockingLast().result();
    }

    /**
     * Configures flow log  and traffic analytics (optional) on a specified resource.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that define the configuration of flow log.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the ServiceFuture&lt;FlowLogInformationInner&gt; object.
     */
    public ServiceFuture<FlowLogInformationInner> beginSetFlowLogConfigurationAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull FlowLogInformationInner parameters, ServiceCallback<FlowLogInformationInner> serviceCallback) {
        return ServiceFutureUtil.fromLRO(beginSetFlowLogConfigurationAsync(resourceGroupName, networkWatcherName, parameters), serviceCallback);
    }

    /**
     * Configures flow log  and traffic analytics (optional) on a specified resource.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that define the configuration of flow log.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    public Observable<OperationStatus<FlowLogInformationInner>> beginSetFlowLogConfigurationAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull FlowLogInformationInner parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkWatcherName == null) {
            throw new IllegalArgumentException("Parameter networkWatcherName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2018-06-01";
        return service.beginSetFlowLogConfiguration(resourceGroupName, networkWatcherName, this.client.subscriptionId(), parameters, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Configures flow log  and traffic analytics (optional) on a specified resource.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that define the configuration of flow log.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the FlowLogInformationInner object if successful.
     */
    public FlowLogInformationInner setFlowLogConfiguration(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull FlowLogInformationInner parameters) {
        return setFlowLogConfigurationAsync(resourceGroupName, networkWatcherName, parameters).blockingGet();
    }

    /**
     * Configures flow log  and traffic analytics (optional) on a specified resource.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that define the configuration of flow log.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<FlowLogInformationInner> setFlowLogConfigurationAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull FlowLogInformationInner parameters, ServiceCallback<FlowLogInformationInner> serviceCallback) {
        return ServiceFuture.fromBody(setFlowLogConfigurationAsync(resourceGroupName, networkWatcherName, parameters), serviceCallback);
    }

    /**
     * Configures flow log  and traffic analytics (optional) on a specified resource.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that define the configuration of flow log.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<FlowLogInformationInner>> setFlowLogConfigurationWithRestResponseAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull FlowLogInformationInner parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkWatcherName == null) {
            throw new IllegalArgumentException("Parameter networkWatcherName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2018-06-01";
        return service.setFlowLogConfiguration(resourceGroupName, networkWatcherName, this.client.subscriptionId(), parameters, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Configures flow log  and traffic analytics (optional) on a specified resource.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that define the configuration of flow log.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<FlowLogInformationInner> setFlowLogConfigurationAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull FlowLogInformationInner parameters) {
        return setFlowLogConfigurationWithRestResponseAsync(resourceGroupName, networkWatcherName, parameters)
            .flatMapMaybe((BodyResponse<FlowLogInformationInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Configures flow log  and traffic analytics (optional) on a specified resource. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    public Observable<OperationStatus<FlowLogInformationInner>> resumeSetFlowLogConfiguration(OperationDescription operationDescription) {
        if (operationDescription == null) {
            throw new IllegalArgumentException("Parameter operationDescription is required and cannot be null.");
        }
        return service.resumeSetFlowLogConfiguration(operationDescription);
    }

    /**
     * Queries status of flow log and traffic analytics (optional) on a specified resource.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param targetResourceId The target resource where getting the flow log and traffic analytics (optional) status.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the FlowLogInformationInner object if successful.
     */
    public FlowLogInformationInner beginGetFlowLogStatus(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull String targetResourceId) {
        return beginGetFlowLogStatusAsync(resourceGroupName, networkWatcherName, targetResourceId).blockingLast().result();
    }

    /**
     * Queries status of flow log and traffic analytics (optional) on a specified resource.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param targetResourceId The target resource where getting the flow log and traffic analytics (optional) status.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the ServiceFuture&lt;FlowLogInformationInner&gt; object.
     */
    public ServiceFuture<FlowLogInformationInner> beginGetFlowLogStatusAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull String targetResourceId, ServiceCallback<FlowLogInformationInner> serviceCallback) {
        return ServiceFutureUtil.fromLRO(beginGetFlowLogStatusAsync(resourceGroupName, networkWatcherName, targetResourceId), serviceCallback);
    }

    /**
     * Queries status of flow log and traffic analytics (optional) on a specified resource.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param targetResourceId The target resource where getting the flow log and traffic analytics (optional) status.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    public Observable<OperationStatus<FlowLogInformationInner>> beginGetFlowLogStatusAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull String targetResourceId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkWatcherName == null) {
            throw new IllegalArgumentException("Parameter networkWatcherName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (targetResourceId == null) {
            throw new IllegalArgumentException("Parameter targetResourceId is required and cannot be null.");
        }
        final String apiVersion = "2018-06-01";
        FlowLogStatusParameters parameters = new FlowLogStatusParameters();
        parameters.withTargetResourceId(targetResourceId);
        return service.beginGetFlowLogStatus(resourceGroupName, networkWatcherName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), parameters);
    }

    /**
     * Queries status of flow log and traffic analytics (optional) on a specified resource.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param targetResourceId The target resource where getting the flow log and traffic analytics (optional) status.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the FlowLogInformationInner object if successful.
     */
    public FlowLogInformationInner getFlowLogStatus(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull String targetResourceId) {
        return getFlowLogStatusAsync(resourceGroupName, networkWatcherName, targetResourceId).blockingGet();
    }

    /**
     * Queries status of flow log and traffic analytics (optional) on a specified resource.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param targetResourceId The target resource where getting the flow log and traffic analytics (optional) status.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<FlowLogInformationInner> getFlowLogStatusAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull String targetResourceId, ServiceCallback<FlowLogInformationInner> serviceCallback) {
        return ServiceFuture.fromBody(getFlowLogStatusAsync(resourceGroupName, networkWatcherName, targetResourceId), serviceCallback);
    }

    /**
     * Queries status of flow log and traffic analytics (optional) on a specified resource.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param targetResourceId The target resource where getting the flow log and traffic analytics (optional) status.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<FlowLogInformationInner>> getFlowLogStatusWithRestResponseAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull String targetResourceId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkWatcherName == null) {
            throw new IllegalArgumentException("Parameter networkWatcherName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (targetResourceId == null) {
            throw new IllegalArgumentException("Parameter targetResourceId is required and cannot be null.");
        }
        final String apiVersion = "2018-06-01";
        FlowLogStatusParameters parameters = new FlowLogStatusParameters();
        parameters.withTargetResourceId(targetResourceId);
        return service.getFlowLogStatus(resourceGroupName, networkWatcherName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), parameters);
    }

    /**
     * Queries status of flow log and traffic analytics (optional) on a specified resource.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param targetResourceId The target resource where getting the flow log and traffic analytics (optional) status.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<FlowLogInformationInner> getFlowLogStatusAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull String targetResourceId) {
        return getFlowLogStatusWithRestResponseAsync(resourceGroupName, networkWatcherName, targetResourceId)
            .flatMapMaybe((BodyResponse<FlowLogInformationInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Queries status of flow log and traffic analytics (optional) on a specified resource. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    public Observable<OperationStatus<FlowLogInformationInner>> resumeGetFlowLogStatus(OperationDescription operationDescription) {
        if (operationDescription == null) {
            throw new IllegalArgumentException("Parameter operationDescription is required and cannot be null.");
        }
        return service.resumeGetFlowLogStatus(operationDescription);
    }

    /**
     * Verifies the possibility of establishing a direct TCP connection from a virtual machine to a given endpoint including another VM or an arbitrary remote server.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that determine how the connectivity check will be performed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ConnectivityInformationInner object if successful.
     */
    public ConnectivityInformationInner beginCheckConnectivity(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull ConnectivityParameters parameters) {
        return beginCheckConnectivityAsync(resourceGroupName, networkWatcherName, parameters).blockingLast().result();
    }

    /**
     * Verifies the possibility of establishing a direct TCP connection from a virtual machine to a given endpoint including another VM or an arbitrary remote server.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that determine how the connectivity check will be performed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the ServiceFuture&lt;ConnectivityInformationInner&gt; object.
     */
    public ServiceFuture<ConnectivityInformationInner> beginCheckConnectivityAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull ConnectivityParameters parameters, ServiceCallback<ConnectivityInformationInner> serviceCallback) {
        return ServiceFutureUtil.fromLRO(beginCheckConnectivityAsync(resourceGroupName, networkWatcherName, parameters), serviceCallback);
    }

    /**
     * Verifies the possibility of establishing a direct TCP connection from a virtual machine to a given endpoint including another VM or an arbitrary remote server.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that determine how the connectivity check will be performed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    public Observable<OperationStatus<ConnectivityInformationInner>> beginCheckConnectivityAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull ConnectivityParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkWatcherName == null) {
            throw new IllegalArgumentException("Parameter networkWatcherName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2018-06-01";
        return service.beginCheckConnectivity(resourceGroupName, networkWatcherName, this.client.subscriptionId(), parameters, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Verifies the possibility of establishing a direct TCP connection from a virtual machine to a given endpoint including another VM or an arbitrary remote server.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that determine how the connectivity check will be performed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the ConnectivityInformationInner object if successful.
     */
    public ConnectivityInformationInner checkConnectivity(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull ConnectivityParameters parameters) {
        return checkConnectivityAsync(resourceGroupName, networkWatcherName, parameters).blockingGet();
    }

    /**
     * Verifies the possibility of establishing a direct TCP connection from a virtual machine to a given endpoint including another VM or an arbitrary remote server.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that determine how the connectivity check will be performed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<ConnectivityInformationInner> checkConnectivityAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull ConnectivityParameters parameters, ServiceCallback<ConnectivityInformationInner> serviceCallback) {
        return ServiceFuture.fromBody(checkConnectivityAsync(resourceGroupName, networkWatcherName, parameters), serviceCallback);
    }

    /**
     * Verifies the possibility of establishing a direct TCP connection from a virtual machine to a given endpoint including another VM or an arbitrary remote server.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that determine how the connectivity check will be performed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<ConnectivityInformationInner>> checkConnectivityWithRestResponseAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull ConnectivityParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkWatcherName == null) {
            throw new IllegalArgumentException("Parameter networkWatcherName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2018-06-01";
        return service.checkConnectivity(resourceGroupName, networkWatcherName, this.client.subscriptionId(), parameters, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Verifies the possibility of establishing a direct TCP connection from a virtual machine to a given endpoint including another VM or an arbitrary remote server.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that determine how the connectivity check will be performed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<ConnectivityInformationInner> checkConnectivityAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull ConnectivityParameters parameters) {
        return checkConnectivityWithRestResponseAsync(resourceGroupName, networkWatcherName, parameters)
            .flatMapMaybe((BodyResponse<ConnectivityInformationInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Verifies the possibility of establishing a direct TCP connection from a virtual machine to a given endpoint including another VM or an arbitrary remote server. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    public Observable<OperationStatus<ConnectivityInformationInner>> resumeCheckConnectivity(OperationDescription operationDescription) {
        if (operationDescription == null) {
            throw new IllegalArgumentException("Parameter operationDescription is required and cannot be null.");
        }
        return service.resumeCheckConnectivity(operationDescription);
    }

    /**
     * Gets the relative latency score for internet service providers from a specified location to Azure regions.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that determine Azure reachability report configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AzureReachabilityReportInner object if successful.
     */
    public AzureReachabilityReportInner beginGetAzureReachabilityReport(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull AzureReachabilityReportParameters parameters) {
        return beginGetAzureReachabilityReportAsync(resourceGroupName, networkWatcherName, parameters).blockingLast().result();
    }

    /**
     * Gets the relative latency score for internet service providers from a specified location to Azure regions.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that determine Azure reachability report configuration.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the ServiceFuture&lt;AzureReachabilityReportInner&gt; object.
     */
    public ServiceFuture<AzureReachabilityReportInner> beginGetAzureReachabilityReportAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull AzureReachabilityReportParameters parameters, ServiceCallback<AzureReachabilityReportInner> serviceCallback) {
        return ServiceFutureUtil.fromLRO(beginGetAzureReachabilityReportAsync(resourceGroupName, networkWatcherName, parameters), serviceCallback);
    }

    /**
     * Gets the relative latency score for internet service providers from a specified location to Azure regions.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that determine Azure reachability report configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    public Observable<OperationStatus<AzureReachabilityReportInner>> beginGetAzureReachabilityReportAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull AzureReachabilityReportParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkWatcherName == null) {
            throw new IllegalArgumentException("Parameter networkWatcherName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2018-06-01";
        return service.beginGetAzureReachabilityReport(resourceGroupName, networkWatcherName, this.client.subscriptionId(), parameters, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Gets the relative latency score for internet service providers from a specified location to Azure regions.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that determine Azure reachability report configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AzureReachabilityReportInner object if successful.
     */
    public AzureReachabilityReportInner getAzureReachabilityReport(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull AzureReachabilityReportParameters parameters) {
        return getAzureReachabilityReportAsync(resourceGroupName, networkWatcherName, parameters).blockingGet();
    }

    /**
     * Gets the relative latency score for internet service providers from a specified location to Azure regions.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that determine Azure reachability report configuration.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<AzureReachabilityReportInner> getAzureReachabilityReportAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull AzureReachabilityReportParameters parameters, ServiceCallback<AzureReachabilityReportInner> serviceCallback) {
        return ServiceFuture.fromBody(getAzureReachabilityReportAsync(resourceGroupName, networkWatcherName, parameters), serviceCallback);
    }

    /**
     * Gets the relative latency score for internet service providers from a specified location to Azure regions.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that determine Azure reachability report configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<AzureReachabilityReportInner>> getAzureReachabilityReportWithRestResponseAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull AzureReachabilityReportParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkWatcherName == null) {
            throw new IllegalArgumentException("Parameter networkWatcherName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2018-06-01";
        return service.getAzureReachabilityReport(resourceGroupName, networkWatcherName, this.client.subscriptionId(), parameters, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Gets the relative latency score for internet service providers from a specified location to Azure regions.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that determine Azure reachability report configuration.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<AzureReachabilityReportInner> getAzureReachabilityReportAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull AzureReachabilityReportParameters parameters) {
        return getAzureReachabilityReportWithRestResponseAsync(resourceGroupName, networkWatcherName, parameters)
            .flatMapMaybe((BodyResponse<AzureReachabilityReportInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Gets the relative latency score for internet service providers from a specified location to Azure regions. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    public Observable<OperationStatus<AzureReachabilityReportInner>> resumeGetAzureReachabilityReport(OperationDescription operationDescription) {
        if (operationDescription == null) {
            throw new IllegalArgumentException("Parameter operationDescription is required and cannot be null.");
        }
        return service.resumeGetAzureReachabilityReport(operationDescription);
    }

    /**
     * Lists all available internet service providers for a specified Azure region.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that scope the list of available providers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AvailableProvidersListInner object if successful.
     */
    public AvailableProvidersListInner beginListAvailableProviders(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull AvailableProvidersListParameters parameters) {
        return beginListAvailableProvidersAsync(resourceGroupName, networkWatcherName, parameters).blockingLast().result();
    }

    /**
     * Lists all available internet service providers for a specified Azure region.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that scope the list of available providers.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the ServiceFuture&lt;AvailableProvidersListInner&gt; object.
     */
    public ServiceFuture<AvailableProvidersListInner> beginListAvailableProvidersAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull AvailableProvidersListParameters parameters, ServiceCallback<AvailableProvidersListInner> serviceCallback) {
        return ServiceFutureUtil.fromLRO(beginListAvailableProvidersAsync(resourceGroupName, networkWatcherName, parameters), serviceCallback);
    }

    /**
     * Lists all available internet service providers for a specified Azure region.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that scope the list of available providers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    public Observable<OperationStatus<AvailableProvidersListInner>> beginListAvailableProvidersAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull AvailableProvidersListParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkWatcherName == null) {
            throw new IllegalArgumentException("Parameter networkWatcherName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2018-06-01";
        return service.beginListAvailableProviders(resourceGroupName, networkWatcherName, this.client.subscriptionId(), parameters, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Lists all available internet service providers for a specified Azure region.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that scope the list of available providers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the AvailableProvidersListInner object if successful.
     */
    public AvailableProvidersListInner listAvailableProviders(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull AvailableProvidersListParameters parameters) {
        return listAvailableProvidersAsync(resourceGroupName, networkWatcherName, parameters).blockingGet();
    }

    /**
     * Lists all available internet service providers for a specified Azure region.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that scope the list of available providers.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<AvailableProvidersListInner> listAvailableProvidersAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull AvailableProvidersListParameters parameters, ServiceCallback<AvailableProvidersListInner> serviceCallback) {
        return ServiceFuture.fromBody(listAvailableProvidersAsync(resourceGroupName, networkWatcherName, parameters), serviceCallback);
    }

    /**
     * Lists all available internet service providers for a specified Azure region.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that scope the list of available providers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<AvailableProvidersListInner>> listAvailableProvidersWithRestResponseAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull AvailableProvidersListParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkWatcherName == null) {
            throw new IllegalArgumentException("Parameter networkWatcherName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2018-06-01";
        return service.listAvailableProviders(resourceGroupName, networkWatcherName, this.client.subscriptionId(), parameters, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Lists all available internet service providers for a specified Azure region.
     *
     * @param resourceGroupName The name of the network watcher resource group.
     * @param networkWatcherName The name of the network watcher resource.
     * @param parameters Parameters that scope the list of available providers.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<AvailableProvidersListInner> listAvailableProvidersAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull AvailableProvidersListParameters parameters) {
        return listAvailableProvidersWithRestResponseAsync(resourceGroupName, networkWatcherName, parameters)
            .flatMapMaybe((BodyResponse<AvailableProvidersListInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Lists all available internet service providers for a specified Azure region. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    public Observable<OperationStatus<AvailableProvidersListInner>> resumeListAvailableProviders(OperationDescription operationDescription) {
        if (operationDescription == null) {
            throw new IllegalArgumentException("Parameter operationDescription is required and cannot be null.");
        }
        return service.resumeListAvailableProviders(operationDescription);
    }

    /**
     * Get network configuration diagnostic.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param parameters Parameters to get network configuration diagnostic.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the NetworkConfigurationDiagnosticResponseInner object if successful.
     */
    public NetworkConfigurationDiagnosticResponseInner beginGetNetworkConfigurationDiagnostic(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull NetworkConfigurationDiagnosticParameters parameters) {
        return beginGetNetworkConfigurationDiagnosticAsync(resourceGroupName, networkWatcherName, parameters).blockingLast().result();
    }

    /**
     * Get network configuration diagnostic.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param parameters Parameters to get network configuration diagnostic.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the ServiceFuture&lt;NetworkConfigurationDiagnosticResponseInner&gt; object.
     */
    public ServiceFuture<NetworkConfigurationDiagnosticResponseInner> beginGetNetworkConfigurationDiagnosticAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull NetworkConfigurationDiagnosticParameters parameters, ServiceCallback<NetworkConfigurationDiagnosticResponseInner> serviceCallback) {
        return ServiceFutureUtil.fromLRO(beginGetNetworkConfigurationDiagnosticAsync(resourceGroupName, networkWatcherName, parameters), serviceCallback);
    }

    /**
     * Get network configuration diagnostic.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param parameters Parameters to get network configuration diagnostic.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    public Observable<OperationStatus<NetworkConfigurationDiagnosticResponseInner>> beginGetNetworkConfigurationDiagnosticAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull NetworkConfigurationDiagnosticParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkWatcherName == null) {
            throw new IllegalArgumentException("Parameter networkWatcherName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2018-06-01";
        return service.beginGetNetworkConfigurationDiagnostic(resourceGroupName, networkWatcherName, this.client.subscriptionId(), parameters, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Get network configuration diagnostic.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param parameters Parameters to get network configuration diagnostic.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ErrorResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the NetworkConfigurationDiagnosticResponseInner object if successful.
     */
    public NetworkConfigurationDiagnosticResponseInner getNetworkConfigurationDiagnostic(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull NetworkConfigurationDiagnosticParameters parameters) {
        return getNetworkConfigurationDiagnosticAsync(resourceGroupName, networkWatcherName, parameters).blockingGet();
    }

    /**
     * Get network configuration diagnostic.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param parameters Parameters to get network configuration diagnostic.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<NetworkConfigurationDiagnosticResponseInner> getNetworkConfigurationDiagnosticAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull NetworkConfigurationDiagnosticParameters parameters, ServiceCallback<NetworkConfigurationDiagnosticResponseInner> serviceCallback) {
        return ServiceFuture.fromBody(getNetworkConfigurationDiagnosticAsync(resourceGroupName, networkWatcherName, parameters), serviceCallback);
    }

    /**
     * Get network configuration diagnostic.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param parameters Parameters to get network configuration diagnostic.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<NetworkConfigurationDiagnosticResponseInner>> getNetworkConfigurationDiagnosticWithRestResponseAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull NetworkConfigurationDiagnosticParameters parameters) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (networkWatcherName == null) {
            throw new IllegalArgumentException("Parameter networkWatcherName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        final String apiVersion = "2018-06-01";
        return service.getNetworkConfigurationDiagnostic(resourceGroupName, networkWatcherName, this.client.subscriptionId(), parameters, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Get network configuration diagnostic.
     *
     * @param resourceGroupName The name of the resource group.
     * @param networkWatcherName The name of the network watcher.
     * @param parameters Parameters to get network configuration diagnostic.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<NetworkConfigurationDiagnosticResponseInner> getNetworkConfigurationDiagnosticAsync(@NonNull String resourceGroupName, @NonNull String networkWatcherName, @NonNull NetworkConfigurationDiagnosticParameters parameters) {
        return getNetworkConfigurationDiagnosticWithRestResponseAsync(resourceGroupName, networkWatcherName, parameters)
            .flatMapMaybe((BodyResponse<NetworkConfigurationDiagnosticResponseInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Get network configuration diagnostic. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    public Observable<OperationStatus<NetworkConfigurationDiagnosticResponseInner>> resumeGetNetworkConfigurationDiagnostic(OperationDescription operationDescription) {
        if (operationDescription == null) {
            throw new IllegalArgumentException("Parameter operationDescription is required and cannot be null.");
        }
        return service.resumeGetNetworkConfigurationDiagnostic(operationDescription);
    }
}
