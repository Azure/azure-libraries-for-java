/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 0.15.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.azure.management.resources;

import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.resources.models.ManagementLockObject;
import com.microsoft.azure.management.resources.models.PageImpl;
import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;

/**
 * An instance of this class provides access to all the operations defined
 * in ManagementLocksOperations.
 */
public interface ManagementLocksOperations {
    /**
     * Create or update a management lock at the resource group level.
     *
     * @param resourceGroupName The resource group name.
     * @param lockName The lock name.
     * @param parameters The management lock parameters.
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the ManagementLockObject object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<ManagementLockObject> createOrUpdateAtResourceGroupLevel(String resourceGroupName, String lockName, ManagementLockObject parameters) throws CloudException, IOException, IllegalArgumentException;

    /**
     * Create or update a management lock at the resource group level.
     *
     * @param resourceGroupName The resource group name.
     * @param lockName The lock name.
     * @param parameters The management lock parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall createOrUpdateAtResourceGroupLevelAsync(String resourceGroupName, String lockName, ManagementLockObject parameters, final ServiceCallback<ManagementLockObject> serviceCallback) throws IllegalArgumentException;

    /**
     * Create or update a management lock at the resource level or any level below resource.
     *
     * @param resourceGroupName The name of the resource group. 
     * @param resourceProviderNamespace Resource identity.
     * @param parentResourcePath Resource identity.
     * @param resourceType Resource identity.
     * @param resourceName Resource identity.
     * @param lockName The name of lock.
     * @param parameters Create or update management lock parameters.
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the ManagementLockObject object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<ManagementLockObject> createOrUpdateAtResourceLevel(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String lockName, ManagementLockObject parameters) throws CloudException, IOException, IllegalArgumentException;

    /**
     * Create or update a management lock at the resource level or any level below resource.
     *
     * @param resourceGroupName The name of the resource group. 
     * @param resourceProviderNamespace Resource identity.
     * @param parentResourcePath Resource identity.
     * @param resourceType Resource identity.
     * @param resourceName Resource identity.
     * @param lockName The name of lock.
     * @param parameters Create or update management lock parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall createOrUpdateAtResourceLevelAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String lockName, ManagementLockObject parameters, final ServiceCallback<ManagementLockObject> serviceCallback) throws IllegalArgumentException;

    /**
     * Deletes the management lock of a resource or any level below resource.
     *
     * @param resourceGroupName The name of the resource group. 
     * @param resourceProviderNamespace Resource identity.
     * @param parentResourcePath Resource identity.
     * @param resourceType Resource identity.
     * @param resourceName Resource identity.
     * @param lockName The name of lock.
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the {@link ServiceResponse} object if successful.
     */
    ServiceResponse<Void> deleteAtResourceLevel(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String lockName) throws CloudException, IOException, IllegalArgumentException;

    /**
     * Deletes the management lock of a resource or any level below resource.
     *
     * @param resourceGroupName The name of the resource group. 
     * @param resourceProviderNamespace Resource identity.
     * @param parentResourcePath Resource identity.
     * @param resourceType Resource identity.
     * @param resourceName Resource identity.
     * @param lockName The name of lock.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall deleteAtResourceLevelAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String lockName, final ServiceCallback<Void> serviceCallback) throws IllegalArgumentException;

    /**
     * Create or update a management lock at the subscription level.
     *
     * @param lockName The name of lock.
     * @param parameters The management lock parameters.
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the ManagementLockObject object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<ManagementLockObject> createOrUpdateAtSubscriptionLevel(String lockName, ManagementLockObject parameters) throws CloudException, IOException, IllegalArgumentException;

    /**
     * Create or update a management lock at the subscription level.
     *
     * @param lockName The name of lock.
     * @param parameters The management lock parameters.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall createOrUpdateAtSubscriptionLevelAsync(String lockName, ManagementLockObject parameters, final ServiceCallback<ManagementLockObject> serviceCallback) throws IllegalArgumentException;

    /**
     * Deletes the management lock of a subscription.
     *
     * @param lockName The name of lock.
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the {@link ServiceResponse} object if successful.
     */
    ServiceResponse<Void> deleteAtSubscriptionLevel(String lockName) throws CloudException, IOException, IllegalArgumentException;

    /**
     * Deletes the management lock of a subscription.
     *
     * @param lockName The name of lock.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall deleteAtSubscriptionLevelAsync(String lockName, final ServiceCallback<Void> serviceCallback) throws IllegalArgumentException;

    /**
     * Gets the management lock of a scope.
     *
     * @param lockName Name of the management lock.
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the ManagementLockObject object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<ManagementLockObject> get(String lockName) throws CloudException, IOException, IllegalArgumentException;

    /**
     * Gets the management lock of a scope.
     *
     * @param lockName Name of the management lock.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall getAsync(String lockName, final ServiceCallback<ManagementLockObject> serviceCallback) throws IllegalArgumentException;

    /**
     * Deletes the management lock of a resource group.
     *
     * @param resourceGroup The resource group names.
     * @param lockName The name of lock.
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the {@link ServiceResponse} object if successful.
     */
    ServiceResponse<Void> deleteAtResourceGroupLevel(String resourceGroup, String lockName) throws CloudException, IOException, IllegalArgumentException;

    /**
     * Deletes the management lock of a resource group.
     *
     * @param resourceGroup The resource group names.
     * @param lockName The name of lock.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall deleteAtResourceGroupLevelAsync(String resourceGroup, String lockName, final ServiceCallback<Void> serviceCallback) throws IllegalArgumentException;

    /**
     * Gets all the management locks of a resource group.
     *
     * @param resourceGroupName Resource group name.
     * @param filter The filter to apply on the operation.
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the List&lt;ManagementLockObject&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<List<ManagementLockObject>> listAtResourceGroupLevel(final String resourceGroupName, final ManagementLockObject filter) throws CloudException, IOException, IllegalArgumentException;

    /**
     * Gets all the management locks of a resource group.
     *
     * @param resourceGroupName Resource group name.
     * @param filter The filter to apply on the operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall listAtResourceGroupLevelAsync(final String resourceGroupName, final ManagementLockObject filter, final ListOperationCallback<ManagementLockObject> serviceCallback) throws IllegalArgumentException;

    /**
     * Gets all the management locks of a resource or any level below resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceProviderNamespace Resource identity.
     * @param parentResourcePath Resource identity.
     * @param resourceType Resource identity.
     * @param resourceName Resource identity.
     * @param filter The filter to apply on the operation.
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the List&lt;ManagementLockObject&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<List<ManagementLockObject>> listAtResourceLevel(final String resourceGroupName, final String resourceProviderNamespace, final String parentResourcePath, final String resourceType, final String resourceName, final ManagementLockObject filter) throws CloudException, IOException, IllegalArgumentException;

    /**
     * Gets all the management locks of a resource or any level below resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceProviderNamespace Resource identity.
     * @param parentResourcePath Resource identity.
     * @param resourceType Resource identity.
     * @param resourceName Resource identity.
     * @param filter The filter to apply on the operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall listAtResourceLevelAsync(final String resourceGroupName, final String resourceProviderNamespace, final String parentResourcePath, final String resourceType, final String resourceName, final ManagementLockObject filter, final ListOperationCallback<ManagementLockObject> serviceCallback) throws IllegalArgumentException;

    /**
     * Get a list of management locks at resource level or below.
     *
     * @param nextLink NextLink from the previous successful call to List operation.
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the List&lt;ManagementLockObject&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<List<ManagementLockObject>> listNext(final String nextLink) throws CloudException, IOException, IllegalArgumentException;

    /**
     * Get a list of management locks at resource level or below.
     *
     * @param nextLink NextLink from the previous successful call to List operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall listNextAsync(final String nextLink, final ListOperationCallback<ManagementLockObject> serviceCallback) throws IllegalArgumentException;

    /**
     * Gets all the management locks of a subscription.
     *
     * @param filter The filter to apply on the operation.
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the List&lt;ManagementLockObject&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<List<ManagementLockObject>> listAtSubscriptionLevel(final ManagementLockObject filter) throws CloudException, IOException, IllegalArgumentException;

    /**
     * Gets all the management locks of a subscription.
     *
     * @param filter The filter to apply on the operation.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall listAtSubscriptionLevelAsync(final ManagementLockObject filter, final ListOperationCallback<ManagementLockObject> serviceCallback) throws IllegalArgumentException;

    /**
     * Gets all the management locks of a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the List&lt;ManagementLockObject&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<PageImpl<ManagementLockObject>> listAtResourceGroupLevelNext(final String nextPageLink) throws CloudException, IOException, IllegalArgumentException;

    /**
     * Gets all the management locks of a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall listAtResourceGroupLevelNextAsync(final String nextPageLink, final ServiceCall serviceCall, final ListOperationCallback<ManagementLockObject> serviceCallback) throws IllegalArgumentException;

    /**
     * Gets all the management locks of a resource or any level below resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the List&lt;ManagementLockObject&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<PageImpl<ManagementLockObject>> listAtResourceLevelNext(final String nextPageLink) throws CloudException, IOException, IllegalArgumentException;

    /**
     * Gets all the management locks of a resource or any level below resource.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall listAtResourceLevelNextAsync(final String nextPageLink, final ServiceCall serviceCall, final ListOperationCallback<ManagementLockObject> serviceCallback) throws IllegalArgumentException;

    /**
     * Get a list of management locks at resource level or below.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the List&lt;ManagementLockObject&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<PageImpl<ManagementLockObject>> listNextNext(final String nextPageLink) throws CloudException, IOException, IllegalArgumentException;

    /**
     * Get a list of management locks at resource level or below.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall listNextNextAsync(final String nextPageLink, final ServiceCall serviceCall, final ListOperationCallback<ManagementLockObject> serviceCallback) throws IllegalArgumentException;

    /**
     * Gets all the management locks of a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws CloudException exception thrown from REST call
     * @throws IOException exception thrown from serialization/deserialization
     * @throws IllegalArgumentException exception thrown from invalid parameters
     * @return the List&lt;ManagementLockObject&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    ServiceResponse<PageImpl<ManagementLockObject>> listAtSubscriptionLevelNext(final String nextPageLink) throws CloudException, IOException, IllegalArgumentException;

    /**
     * Gets all the management locks of a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if callback is null
     * @return the {@link ServiceCall} object
     */
    ServiceCall listAtSubscriptionLevelNextAsync(final String nextPageLink, final ServiceCall serviceCall, final ListOperationCallback<ManagementLockObject> serviceCallback) throws IllegalArgumentException;

}
