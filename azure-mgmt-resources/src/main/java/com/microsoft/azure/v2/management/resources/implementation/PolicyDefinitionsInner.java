/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.v2.management.resources.implementation;

import com.microsoft.azure.v2.AzureProxy;
import com.microsoft.azure.v2.CloudException;
import com.microsoft.azure.v2.Page;
import com.microsoft.azure.v2.PagedList;
import com.microsoft.rest.v2.RestResponse;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.Validator;
import com.microsoft.rest.v2.annotations.BodyParam;
import com.microsoft.rest.v2.annotations.DELETE;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.HeaderParam;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.PathParam;
import com.microsoft.rest.v2.annotations.PUT;
import com.microsoft.rest.v2.annotations.QueryParam;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import io.reactivex.Completable;
import io.reactivex.Maybe;
import io.reactivex.Observable;
import io.reactivex.Single;
import io.reactivex.functions.Function;

/**
 * An instance of this class provides access to all the operations defined in
 * PolicyDefinitions.
 */
public class PolicyDefinitionsInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private PolicyDefinitionsService service;

    /**
     * The service client containing this operation class.
     */
    private PolicyClientImpl client;

    /**
     * Initializes an instance of PolicyDefinitionsInner.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public PolicyDefinitionsInner(PolicyClientImpl client) {
        this.service = AzureProxy.create(PolicyDefinitionsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for PolicyDefinitions to be used
     * by the proxy service to perform REST calls.
     */
    @Host("https://management.azure.com")
    interface PolicyDefinitionsService {
        @PUT("subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policydefinitions/{policyDefinitionName}")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<RestResponse<Void, PolicyDefinitionInner>> createOrUpdate(@PathParam("policyDefinitionName") String policyDefinitionName, @PathParam("subscriptionId") String subscriptionId, @BodyParam("application/json; charset=utf-8") PolicyDefinitionInner parameters, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @DELETE("subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policydefinitions/{policyDefinitionName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<RestResponse<Void, Void>> delete(@PathParam("policyDefinitionName") String policyDefinitionName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policydefinitions/{policyDefinitionName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<RestResponse<Void, PolicyDefinitionInner>> get(@PathParam("policyDefinitionName") String policyDefinitionName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policydefinitions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<RestResponse<Void, PageImpl<PolicyDefinitionInner>>> list(@PathParam("subscriptionId") String subscriptionId, @QueryParam("$filter") String filter, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<RestResponse<Void, PageImpl<PolicyDefinitionInner>>> listNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);
    }

    /**
     * Creates or updates a policy definition.
     *
     * @param policyDefinitionName The name of the policy definition to create.
     * @param parameters The policy definition properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PolicyDefinitionInner object if successful.
     */
    public PolicyDefinitionInner createOrUpdate(String policyDefinitionName, PolicyDefinitionInner parameters) {
        return createOrUpdateAsync(policyDefinitionName, parameters).blockingGet();
    }

    /**
     * Creates or updates a policy definition.
     *
     * @param policyDefinitionName The name of the policy definition to create.
     * @param parameters The policy definition properties.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;PolicyDefinitionInner&gt;} object.
     */
    public ServiceFuture<PolicyDefinitionInner> createOrUpdateAsync(String policyDefinitionName, PolicyDefinitionInner parameters, final ServiceCallback<PolicyDefinitionInner> serviceCallback) {
        return ServiceFuture.fromBody(createOrUpdateAsync(policyDefinitionName, parameters), serviceCallback);
    }

    /**
     * Creates or updates a policy definition.
     *
     * @param policyDefinitionName The name of the policy definition to create.
     * @param parameters The policy definition properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;RestResponse&lt;Void, PolicyDefinitionInner&gt;&gt;} object if successful.
     */
    public Single<RestResponse<Void, PolicyDefinitionInner>> createOrUpdateWithRestResponseAsync(String policyDefinitionName, PolicyDefinitionInner parameters) {
        if (policyDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policyDefinitionName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.createOrUpdate(policyDefinitionName, this.client.subscriptionId(), parameters, this.client.apiVersion(), this.client.acceptLanguage());
    }

    /**
     * Creates or updates a policy definition.
     *
     * @param policyDefinitionName The name of the policy definition to create.
     * @param parameters The policy definition properties.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Maybe&lt;PolicyDefinitionInner&gt;} object if successful.
     */
    public Maybe<PolicyDefinitionInner> createOrUpdateAsync(String policyDefinitionName, PolicyDefinitionInner parameters) {
        return createOrUpdateWithRestResponseAsync(policyDefinitionName, parameters)
            .flatMapMaybe(new Function<RestResponse<Void, PolicyDefinitionInner>, Maybe<PolicyDefinitionInner>>() {
                public Maybe<PolicyDefinitionInner> apply(RestResponse<Void, PolicyDefinitionInner> restResponse) {
                    if (restResponse.body() == null) {
                        return Maybe.empty();
                    } else {
                        return Maybe.just(restResponse.body());
                    }
                }
            });
    }

    /**
     * Deletes a policy definition.
     *
     * @param policyDefinitionName The name of the policy definition to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void delete(String policyDefinitionName) {
        deleteAsync(policyDefinitionName).blockingAwait();
    }

    /**
     * Deletes a policy definition.
     *
     * @param policyDefinitionName The name of the policy definition to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;Void&gt;} object.
     */
    public ServiceFuture<Void> deleteAsync(String policyDefinitionName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(deleteAsync(policyDefinitionName), serviceCallback);
    }

    /**
     * Deletes a policy definition.
     *
     * @param policyDefinitionName The name of the policy definition to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;RestResponse&lt;Void, Void&gt;&gt;} object if successful.
     */
    public Single<RestResponse<Void, Void>> deleteWithRestResponseAsync(String policyDefinitionName) {
        if (policyDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policyDefinitionName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(policyDefinitionName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage());
    }

    /**
     * Deletes a policy definition.
     *
     * @param policyDefinitionName The name of the policy definition to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Completable} object if successful.
     */
    public Completable deleteAsync(String policyDefinitionName) {
        return deleteWithRestResponseAsync(policyDefinitionName)
            .toCompletable();
    }

    /**
     * Gets the policy definition.
     *
     * @param policyDefinitionName The name of the policy definition to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PolicyDefinitionInner object if successful.
     */
    public PolicyDefinitionInner get(String policyDefinitionName) {
        return getAsync(policyDefinitionName).blockingGet();
    }

    /**
     * Gets the policy definition.
     *
     * @param policyDefinitionName The name of the policy definition to get.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link ServiceFuture&lt;PolicyDefinitionInner&gt;} object.
     */
    public ServiceFuture<PolicyDefinitionInner> getAsync(String policyDefinitionName, final ServiceCallback<PolicyDefinitionInner> serviceCallback) {
        return ServiceFuture.fromBody(getAsync(policyDefinitionName), serviceCallback);
    }

    /**
     * Gets the policy definition.
     *
     * @param policyDefinitionName The name of the policy definition to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;RestResponse&lt;Void, PolicyDefinitionInner&gt;&gt;} object if successful.
     */
    public Single<RestResponse<Void, PolicyDefinitionInner>> getWithRestResponseAsync(String policyDefinitionName) {
        if (policyDefinitionName == null) {
            throw new IllegalArgumentException("Parameter policyDefinitionName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(policyDefinitionName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage());
    }

    /**
     * Gets the policy definition.
     *
     * @param policyDefinitionName The name of the policy definition to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Maybe&lt;PolicyDefinitionInner&gt;} object if successful.
     */
    public Maybe<PolicyDefinitionInner> getAsync(String policyDefinitionName) {
        return getWithRestResponseAsync(policyDefinitionName)
            .flatMapMaybe(new Function<RestResponse<Void, PolicyDefinitionInner>, Maybe<PolicyDefinitionInner>>() {
                public Maybe<PolicyDefinitionInner> apply(RestResponse<Void, PolicyDefinitionInner> restResponse) {
                    if (restResponse.body() == null) {
                        return Maybe.empty();
                    } else {
                        return Maybe.just(restResponse.body());
                    }
                }
            });
    }

    /**
     * Gets all the policy definitions for a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;PolicyDefinitionInner&gt; object if successful.
     */
    public PagedList<PolicyDefinitionInner> list() {
        Page<PolicyDefinitionInner> response = listSinglePageAsync().blockingGet();
        return new PagedList<PolicyDefinitionInner>(response) {
            @Override
            public Page<PolicyDefinitionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Gets all the policy definitions for a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;PolicyDefinitionInner&gt; object.
     */
    public Observable<Page<PolicyDefinitionInner>> listAsync() {
        return listSinglePageAsync()
            .toObservable()
            .concatMap(new Function<Page<PolicyDefinitionInner>, Observable<Page<PolicyDefinitionInner>>>() {
                @Override
                public Observable<Page<PolicyDefinitionInner>> apply(Page<PolicyDefinitionInner> page) {
                    String nextPageLink = page.nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the policy definitions for a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;Page&lt;PolicyDefinitionInner&gt;&gt;} object if successful.
     */
    public Single<Page<PolicyDefinitionInner>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        return service.list(this.client.subscriptionId(), filter, this.client.apiVersion(), this.client.acceptLanguage()).map(new Function<RestResponse<Void, PageImpl<PolicyDefinitionInner>>, Page<PolicyDefinitionInner>>() {
            @Override
            public Page<PolicyDefinitionInner> apply(RestResponse<Void, PageImpl<PolicyDefinitionInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets all the policy definitions for a subscription.
     *
     * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;PolicyDefinitionInner&gt; object if successful.
     */
    public PagedList<PolicyDefinitionInner> list(final String filter) {
        Page<PolicyDefinitionInner> response = listSinglePageAsync(filter).blockingGet();
        return new PagedList<PolicyDefinitionInner>(response) {
            @Override
            public Page<PolicyDefinitionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Gets all the policy definitions for a subscription.
     *
     * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;PolicyDefinitionInner&gt; object.
     */
    public Observable<Page<PolicyDefinitionInner>> listAsync(final String filter) {
        return listSinglePageAsync(filter)
            .toObservable()
            .concatMap(new Function<Page<PolicyDefinitionInner>, Observable<Page<PolicyDefinitionInner>>>() {
                @Override
                public Observable<Page<PolicyDefinitionInner>> apply(Page<PolicyDefinitionInner> page) {
                    String nextPageLink = page.nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the policy definitions for a subscription.
     *
     * @param filter The filter to apply on the operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;Page&lt;PolicyDefinitionInner&gt;&gt;} object if successful.
     */
    public Single<Page<PolicyDefinitionInner>> listSinglePageAsync(final String filter) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), filter, this.client.apiVersion(), this.client.acceptLanguage()).map(new Function<RestResponse<Void, PageImpl<PolicyDefinitionInner>>, Page<PolicyDefinitionInner>>() {
            @Override
            public Page<PolicyDefinitionInner> apply(RestResponse<Void, PageImpl<PolicyDefinitionInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets all the policy definitions for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;PolicyDefinitionInner&gt; object if successful.
     */
    public PagedList<PolicyDefinitionInner> listNext(final String nextPageLink) {
        Page<PolicyDefinitionInner> response = listNextSinglePageAsync(nextPageLink).blockingGet();
        return new PagedList<PolicyDefinitionInner>(response) {
            @Override
            public Page<PolicyDefinitionInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Gets all the policy definitions for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;PolicyDefinitionInner&gt; object.
     */
    public Observable<Page<PolicyDefinitionInner>> listNextAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .toObservable()
            .concatMap(new Function<Page<PolicyDefinitionInner>, Observable<Page<PolicyDefinitionInner>>>() {
                @Override
                public Observable<Page<PolicyDefinitionInner>> apply(Page<PolicyDefinitionInner> page) {
                    String nextPageLink = page.nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextAsync(nextPageLink));
                }
            });
    }

    /**
     * Gets all the policy definitions for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the {@link Single&lt;Page&lt;PolicyDefinitionInner&gt;&gt;} object if successful.
     */
    public Single<Page<PolicyDefinitionInner>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage()).map(new Function<RestResponse<Void, PageImpl<PolicyDefinitionInner>>, Page<PolicyDefinitionInner>>() {
            @Override
            public Page<PolicyDefinitionInner> apply(RestResponse<Void, PageImpl<PolicyDefinitionInner>> response) {
                return response.body();
            }
        });
    }
}
