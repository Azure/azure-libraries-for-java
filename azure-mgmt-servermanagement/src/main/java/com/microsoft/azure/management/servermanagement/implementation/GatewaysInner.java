/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servermanagement.implementation;

import com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsGet;
import com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsDelete;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.servermanagement.ErrorException;
import com.microsoft.azure.management.servermanagement.GatewayExpandOption;
import com.microsoft.azure.management.servermanagement.GatewayParameters;
import com.microsoft.azure.management.servermanagement.UpgradeMode;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Gateways.
 */
public class GatewaysInner implements InnerSupportsGet<GatewayResourceInner>, InnerSupportsDelete<Void> {
    /** The Retrofit service to perform REST calls. */
    private GatewaysService service;
    /** The service client containing this operation class. */
    private ServerManagementImpl client;

    /**
     * Initializes an instance of GatewaysInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public GatewaysInner(Retrofit retrofit, ServerManagementImpl client) {
        this.service = retrofit.create(GatewaysService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Gateways to be
     * used by Retrofit to perform actually REST calls.
     */
    interface GatewaysService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.Gateways create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/gateways/{gatewayName}")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("gatewayName") String gatewayName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body GatewayParameters gatewayParameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.Gateways beginCreate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/gateways/{gatewayName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("gatewayName") String gatewayName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body GatewayParameters gatewayParameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.Gateways update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/gateways/{gatewayName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("gatewayName") String gatewayName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body GatewayParameters gatewayParameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.Gateways beginUpdate" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/gateways/{gatewayName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("gatewayName") String gatewayName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body GatewayParameters gatewayParameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.Gateways delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/gateways/{gatewayName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("gatewayName") String gatewayName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.Gateways getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/gateways/{gatewayName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("gatewayName") String gatewayName, @Query("api-version") String apiVersion, @Query("$expand") GatewayExpandOption expand, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.Gateways list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.ServerManagement/gateways")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.Gateways listForResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/gateways")
        Observable<Response<ResponseBody>> listForResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.Gateways upgrade" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/gateways/{gatewayName}/upgradetolatest")
        Observable<Response<ResponseBody>> upgrade(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("gatewayName") String gatewayName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.Gateways beginUpgrade" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/gateways/{gatewayName}/upgradetolatest")
        Observable<Response<ResponseBody>> beginUpgrade(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("gatewayName") String gatewayName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.Gateways regenerateProfile" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/gateways/{gatewayName}/regenerateprofile")
        Observable<Response<ResponseBody>> regenerateProfile(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("gatewayName") String gatewayName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.Gateways beginRegenerateProfile" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/gateways/{gatewayName}/regenerateprofile")
        Observable<Response<ResponseBody>> beginRegenerateProfile(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("gatewayName") String gatewayName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.Gateways getProfile" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/gateways/{gatewayName}/profile")
        Observable<Response<ResponseBody>> getProfile(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("gatewayName") String gatewayName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.Gateways beginGetProfile" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/gateways/{gatewayName}/profile")
        Observable<Response<ResponseBody>> beginGetProfile(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("gatewayName") String gatewayName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.Gateways listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.Gateways listForResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listForResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Creates or updates a ManagementService gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GatewayResourceInner object if successful.
     */
    public GatewayResourceInner create(String resourceGroupName, String gatewayName) {
        return createWithServiceResponseAsync(resourceGroupName, gatewayName).toBlocking().last().body();
    }

    /**
     * Creates or updates a ManagementService gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<GatewayResourceInner> createAsync(String resourceGroupName, String gatewayName, final ServiceCallback<GatewayResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, gatewayName), serviceCallback);
    }

    /**
     * Creates or updates a ManagementService gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<GatewayResourceInner> createAsync(String resourceGroupName, String gatewayName) {
        return createWithServiceResponseAsync(resourceGroupName, gatewayName).map(new Func1<ServiceResponse<GatewayResourceInner>, GatewayResourceInner>() {
            @Override
            public GatewayResourceInner call(ServiceResponse<GatewayResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a ManagementService gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<GatewayResourceInner>> createWithServiceResponseAsync(String resourceGroupName, String gatewayName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (gatewayName == null) {
            throw new IllegalArgumentException("Parameter gatewayName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String location = null;
        final Object tags = null;
        final UpgradeMode upgradeMode = null;
        GatewayParameters gatewayParameters = new GatewayParameters();
        gatewayParameters.withLocation(null);
        gatewayParameters.withTags(null);
        gatewayParameters.withUpgradeMode(null);
        Observable<Response<ResponseBody>> observable = service.create(this.client.subscriptionId(), resourceGroupName, gatewayName, this.client.apiVersion(), this.client.acceptLanguage(), gatewayParameters, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<GatewayResourceInner>() { }.getType());
    }
    /**
     * Creates or updates a ManagementService gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param upgradeMode The upgradeMode property gives the flexibility to gateway to auto upgrade itself. If properties value not specified, then we assume upgradeMode = Automatic. Possible values include: 'Manual', 'Automatic'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GatewayResourceInner object if successful.
     */
    public GatewayResourceInner create(String resourceGroupName, String gatewayName, String location, Object tags, UpgradeMode upgradeMode) {
        return createWithServiceResponseAsync(resourceGroupName, gatewayName, location, tags, upgradeMode).toBlocking().last().body();
    }

    /**
     * Creates or updates a ManagementService gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param upgradeMode The upgradeMode property gives the flexibility to gateway to auto upgrade itself. If properties value not specified, then we assume upgradeMode = Automatic. Possible values include: 'Manual', 'Automatic'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<GatewayResourceInner> createAsync(String resourceGroupName, String gatewayName, String location, Object tags, UpgradeMode upgradeMode, final ServiceCallback<GatewayResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, gatewayName, location, tags, upgradeMode), serviceCallback);
    }

    /**
     * Creates or updates a ManagementService gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param upgradeMode The upgradeMode property gives the flexibility to gateway to auto upgrade itself. If properties value not specified, then we assume upgradeMode = Automatic. Possible values include: 'Manual', 'Automatic'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<GatewayResourceInner> createAsync(String resourceGroupName, String gatewayName, String location, Object tags, UpgradeMode upgradeMode) {
        return createWithServiceResponseAsync(resourceGroupName, gatewayName, location, tags, upgradeMode).map(new Func1<ServiceResponse<GatewayResourceInner>, GatewayResourceInner>() {
            @Override
            public GatewayResourceInner call(ServiceResponse<GatewayResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a ManagementService gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param upgradeMode The upgradeMode property gives the flexibility to gateway to auto upgrade itself. If properties value not specified, then we assume upgradeMode = Automatic. Possible values include: 'Manual', 'Automatic'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<GatewayResourceInner>> createWithServiceResponseAsync(String resourceGroupName, String gatewayName, String location, Object tags, UpgradeMode upgradeMode) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (gatewayName == null) {
            throw new IllegalArgumentException("Parameter gatewayName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        GatewayParameters gatewayParameters = new GatewayParameters();
        gatewayParameters.withLocation(location);
        gatewayParameters.withTags(tags);
        gatewayParameters.withUpgradeMode(upgradeMode);
        Observable<Response<ResponseBody>> observable = service.create(this.client.subscriptionId(), resourceGroupName, gatewayName, this.client.apiVersion(), this.client.acceptLanguage(), gatewayParameters, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<GatewayResourceInner>() { }.getType());
    }

    /**
     * Creates or updates a ManagementService gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GatewayResourceInner object if successful.
     */
    public GatewayResourceInner beginCreate(String resourceGroupName, String gatewayName) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, gatewayName).toBlocking().single().body();
    }

    /**
     * Creates or updates a ManagementService gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<GatewayResourceInner> beginCreateAsync(String resourceGroupName, String gatewayName, final ServiceCallback<GatewayResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(resourceGroupName, gatewayName), serviceCallback);
    }

    /**
     * Creates or updates a ManagementService gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GatewayResourceInner object
     */
    public Observable<GatewayResourceInner> beginCreateAsync(String resourceGroupName, String gatewayName) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, gatewayName).map(new Func1<ServiceResponse<GatewayResourceInner>, GatewayResourceInner>() {
            @Override
            public GatewayResourceInner call(ServiceResponse<GatewayResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a ManagementService gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GatewayResourceInner object
     */
    public Observable<ServiceResponse<GatewayResourceInner>> beginCreateWithServiceResponseAsync(String resourceGroupName, String gatewayName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (gatewayName == null) {
            throw new IllegalArgumentException("Parameter gatewayName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String location = null;
        final Object tags = null;
        final UpgradeMode upgradeMode = null;
        GatewayParameters gatewayParameters = new GatewayParameters();
        gatewayParameters.withLocation(null);
        gatewayParameters.withTags(null);
        gatewayParameters.withUpgradeMode(null);
        return service.beginCreate(this.client.subscriptionId(), resourceGroupName, gatewayName, this.client.apiVersion(), this.client.acceptLanguage(), gatewayParameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<GatewayResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<GatewayResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<GatewayResourceInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates or updates a ManagementService gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param upgradeMode The upgradeMode property gives the flexibility to gateway to auto upgrade itself. If properties value not specified, then we assume upgradeMode = Automatic. Possible values include: 'Manual', 'Automatic'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GatewayResourceInner object if successful.
     */
    public GatewayResourceInner beginCreate(String resourceGroupName, String gatewayName, String location, Object tags, UpgradeMode upgradeMode) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, gatewayName, location, tags, upgradeMode).toBlocking().single().body();
    }

    /**
     * Creates or updates a ManagementService gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param upgradeMode The upgradeMode property gives the flexibility to gateway to auto upgrade itself. If properties value not specified, then we assume upgradeMode = Automatic. Possible values include: 'Manual', 'Automatic'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<GatewayResourceInner> beginCreateAsync(String resourceGroupName, String gatewayName, String location, Object tags, UpgradeMode upgradeMode, final ServiceCallback<GatewayResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(resourceGroupName, gatewayName, location, tags, upgradeMode), serviceCallback);
    }

    /**
     * Creates or updates a ManagementService gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param upgradeMode The upgradeMode property gives the flexibility to gateway to auto upgrade itself. If properties value not specified, then we assume upgradeMode = Automatic. Possible values include: 'Manual', 'Automatic'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GatewayResourceInner object
     */
    public Observable<GatewayResourceInner> beginCreateAsync(String resourceGroupName, String gatewayName, String location, Object tags, UpgradeMode upgradeMode) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, gatewayName, location, tags, upgradeMode).map(new Func1<ServiceResponse<GatewayResourceInner>, GatewayResourceInner>() {
            @Override
            public GatewayResourceInner call(ServiceResponse<GatewayResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a ManagementService gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param upgradeMode The upgradeMode property gives the flexibility to gateway to auto upgrade itself. If properties value not specified, then we assume upgradeMode = Automatic. Possible values include: 'Manual', 'Automatic'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GatewayResourceInner object
     */
    public Observable<ServiceResponse<GatewayResourceInner>> beginCreateWithServiceResponseAsync(String resourceGroupName, String gatewayName, String location, Object tags, UpgradeMode upgradeMode) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (gatewayName == null) {
            throw new IllegalArgumentException("Parameter gatewayName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        GatewayParameters gatewayParameters = new GatewayParameters();
        gatewayParameters.withLocation(location);
        gatewayParameters.withTags(tags);
        gatewayParameters.withUpgradeMode(upgradeMode);
        return service.beginCreate(this.client.subscriptionId(), resourceGroupName, gatewayName, this.client.apiVersion(), this.client.acceptLanguage(), gatewayParameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<GatewayResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<GatewayResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<GatewayResourceInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<GatewayResourceInner> beginCreateDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<GatewayResourceInner, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<GatewayResourceInner>() { }.getType())
                .register(201, new TypeToken<GatewayResourceInner>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Updates a gateway belonging to a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GatewayResourceInner object if successful.
     */
    public GatewayResourceInner update(String resourceGroupName, String gatewayName) {
        return updateWithServiceResponseAsync(resourceGroupName, gatewayName).toBlocking().last().body();
    }

    /**
     * Updates a gateway belonging to a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<GatewayResourceInner> updateAsync(String resourceGroupName, String gatewayName, final ServiceCallback<GatewayResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, gatewayName), serviceCallback);
    }

    /**
     * Updates a gateway belonging to a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<GatewayResourceInner> updateAsync(String resourceGroupName, String gatewayName) {
        return updateWithServiceResponseAsync(resourceGroupName, gatewayName).map(new Func1<ServiceResponse<GatewayResourceInner>, GatewayResourceInner>() {
            @Override
            public GatewayResourceInner call(ServiceResponse<GatewayResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates a gateway belonging to a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<GatewayResourceInner>> updateWithServiceResponseAsync(String resourceGroupName, String gatewayName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (gatewayName == null) {
            throw new IllegalArgumentException("Parameter gatewayName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String location = null;
        final Object tags = null;
        final UpgradeMode upgradeMode = null;
        GatewayParameters gatewayParameters = new GatewayParameters();
        gatewayParameters.withLocation(null);
        gatewayParameters.withTags(null);
        gatewayParameters.withUpgradeMode(null);
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, gatewayName, this.client.apiVersion(), this.client.acceptLanguage(), gatewayParameters, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<GatewayResourceInner>() { }.getType());
    }
    /**
     * Updates a gateway belonging to a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param upgradeMode The upgradeMode property gives the flexibility to gateway to auto upgrade itself. If properties value not specified, then we assume upgradeMode = Automatic. Possible values include: 'Manual', 'Automatic'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GatewayResourceInner object if successful.
     */
    public GatewayResourceInner update(String resourceGroupName, String gatewayName, String location, Object tags, UpgradeMode upgradeMode) {
        return updateWithServiceResponseAsync(resourceGroupName, gatewayName, location, tags, upgradeMode).toBlocking().last().body();
    }

    /**
     * Updates a gateway belonging to a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param upgradeMode The upgradeMode property gives the flexibility to gateway to auto upgrade itself. If properties value not specified, then we assume upgradeMode = Automatic. Possible values include: 'Manual', 'Automatic'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<GatewayResourceInner> updateAsync(String resourceGroupName, String gatewayName, String location, Object tags, UpgradeMode upgradeMode, final ServiceCallback<GatewayResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, gatewayName, location, tags, upgradeMode), serviceCallback);
    }

    /**
     * Updates a gateway belonging to a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param upgradeMode The upgradeMode property gives the flexibility to gateway to auto upgrade itself. If properties value not specified, then we assume upgradeMode = Automatic. Possible values include: 'Manual', 'Automatic'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<GatewayResourceInner> updateAsync(String resourceGroupName, String gatewayName, String location, Object tags, UpgradeMode upgradeMode) {
        return updateWithServiceResponseAsync(resourceGroupName, gatewayName, location, tags, upgradeMode).map(new Func1<ServiceResponse<GatewayResourceInner>, GatewayResourceInner>() {
            @Override
            public GatewayResourceInner call(ServiceResponse<GatewayResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates a gateway belonging to a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param upgradeMode The upgradeMode property gives the flexibility to gateway to auto upgrade itself. If properties value not specified, then we assume upgradeMode = Automatic. Possible values include: 'Manual', 'Automatic'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<GatewayResourceInner>> updateWithServiceResponseAsync(String resourceGroupName, String gatewayName, String location, Object tags, UpgradeMode upgradeMode) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (gatewayName == null) {
            throw new IllegalArgumentException("Parameter gatewayName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        GatewayParameters gatewayParameters = new GatewayParameters();
        gatewayParameters.withLocation(location);
        gatewayParameters.withTags(tags);
        gatewayParameters.withUpgradeMode(upgradeMode);
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, gatewayName, this.client.apiVersion(), this.client.acceptLanguage(), gatewayParameters, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<GatewayResourceInner>() { }.getType());
    }

    /**
     * Updates a gateway belonging to a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GatewayResourceInner object if successful.
     */
    public GatewayResourceInner beginUpdate(String resourceGroupName, String gatewayName) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, gatewayName).toBlocking().single().body();
    }

    /**
     * Updates a gateway belonging to a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<GatewayResourceInner> beginUpdateAsync(String resourceGroupName, String gatewayName, final ServiceCallback<GatewayResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, gatewayName), serviceCallback);
    }

    /**
     * Updates a gateway belonging to a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GatewayResourceInner object
     */
    public Observable<GatewayResourceInner> beginUpdateAsync(String resourceGroupName, String gatewayName) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, gatewayName).map(new Func1<ServiceResponse<GatewayResourceInner>, GatewayResourceInner>() {
            @Override
            public GatewayResourceInner call(ServiceResponse<GatewayResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates a gateway belonging to a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GatewayResourceInner object
     */
    public Observable<ServiceResponse<GatewayResourceInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String gatewayName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (gatewayName == null) {
            throw new IllegalArgumentException("Parameter gatewayName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String location = null;
        final Object tags = null;
        final UpgradeMode upgradeMode = null;
        GatewayParameters gatewayParameters = new GatewayParameters();
        gatewayParameters.withLocation(null);
        gatewayParameters.withTags(null);
        gatewayParameters.withUpgradeMode(null);
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, gatewayName, this.client.apiVersion(), this.client.acceptLanguage(), gatewayParameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<GatewayResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<GatewayResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<GatewayResourceInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Updates a gateway belonging to a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param upgradeMode The upgradeMode property gives the flexibility to gateway to auto upgrade itself. If properties value not specified, then we assume upgradeMode = Automatic. Possible values include: 'Manual', 'Automatic'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GatewayResourceInner object if successful.
     */
    public GatewayResourceInner beginUpdate(String resourceGroupName, String gatewayName, String location, Object tags, UpgradeMode upgradeMode) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, gatewayName, location, tags, upgradeMode).toBlocking().single().body();
    }

    /**
     * Updates a gateway belonging to a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param upgradeMode The upgradeMode property gives the flexibility to gateway to auto upgrade itself. If properties value not specified, then we assume upgradeMode = Automatic. Possible values include: 'Manual', 'Automatic'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<GatewayResourceInner> beginUpdateAsync(String resourceGroupName, String gatewayName, String location, Object tags, UpgradeMode upgradeMode, final ServiceCallback<GatewayResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, gatewayName, location, tags, upgradeMode), serviceCallback);
    }

    /**
     * Updates a gateway belonging to a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param upgradeMode The upgradeMode property gives the flexibility to gateway to auto upgrade itself. If properties value not specified, then we assume upgradeMode = Automatic. Possible values include: 'Manual', 'Automatic'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GatewayResourceInner object
     */
    public Observable<GatewayResourceInner> beginUpdateAsync(String resourceGroupName, String gatewayName, String location, Object tags, UpgradeMode upgradeMode) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, gatewayName, location, tags, upgradeMode).map(new Func1<ServiceResponse<GatewayResourceInner>, GatewayResourceInner>() {
            @Override
            public GatewayResourceInner call(ServiceResponse<GatewayResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates a gateway belonging to a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param upgradeMode The upgradeMode property gives the flexibility to gateway to auto upgrade itself. If properties value not specified, then we assume upgradeMode = Automatic. Possible values include: 'Manual', 'Automatic'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GatewayResourceInner object
     */
    public Observable<ServiceResponse<GatewayResourceInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String gatewayName, String location, Object tags, UpgradeMode upgradeMode) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (gatewayName == null) {
            throw new IllegalArgumentException("Parameter gatewayName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        GatewayParameters gatewayParameters = new GatewayParameters();
        gatewayParameters.withLocation(location);
        gatewayParameters.withTags(tags);
        gatewayParameters.withUpgradeMode(upgradeMode);
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, gatewayName, this.client.apiVersion(), this.client.acceptLanguage(), gatewayParameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<GatewayResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<GatewayResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<GatewayResourceInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<GatewayResourceInner> beginUpdateDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<GatewayResourceInner, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<GatewayResourceInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Deletes a gateway from a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String gatewayName) {
        deleteWithServiceResponseAsync(resourceGroupName, gatewayName).toBlocking().single().body();
    }

    /**
     * Deletes a gateway from a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String gatewayName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, gatewayName), serviceCallback);
    }

    /**
     * Deletes a gateway from a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String gatewayName) {
        return deleteWithServiceResponseAsync(resourceGroupName, gatewayName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a gateway from a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String gatewayName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (gatewayName == null) {
            throw new IllegalArgumentException("Parameter gatewayName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, gatewayName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Gets a gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GatewayResourceInner object if successful.
     */
    public GatewayResourceInner getByResourceGroup(String resourceGroupName, String gatewayName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, gatewayName).toBlocking().single().body();
    }

    /**
     * Gets a gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<GatewayResourceInner> getByResourceGroupAsync(String resourceGroupName, String gatewayName, final ServiceCallback<GatewayResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, gatewayName), serviceCallback);
    }

    /**
     * Gets a gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GatewayResourceInner object
     */
    public Observable<GatewayResourceInner> getByResourceGroupAsync(String resourceGroupName, String gatewayName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, gatewayName).map(new Func1<ServiceResponse<GatewayResourceInner>, GatewayResourceInner>() {
            @Override
            public GatewayResourceInner call(ServiceResponse<GatewayResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GatewayResourceInner object
     */
    public Observable<ServiceResponse<GatewayResourceInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String gatewayName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (gatewayName == null) {
            throw new IllegalArgumentException("Parameter gatewayName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final GatewayExpandOption expand = null;
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, gatewayName, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<GatewayResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<GatewayResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<GatewayResourceInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets a gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum)
     * @param expand Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. Possible values include: 'status', 'download'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GatewayResourceInner object if successful.
     */
    public GatewayResourceInner getByResourceGroup(String resourceGroupName, String gatewayName, GatewayExpandOption expand) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, gatewayName, expand).toBlocking().single().body();
    }

    /**
     * Gets a gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum)
     * @param expand Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. Possible values include: 'status', 'download'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<GatewayResourceInner> getByResourceGroupAsync(String resourceGroupName, String gatewayName, GatewayExpandOption expand, final ServiceCallback<GatewayResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, gatewayName, expand), serviceCallback);
    }

    /**
     * Gets a gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum)
     * @param expand Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. Possible values include: 'status', 'download'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GatewayResourceInner object
     */
    public Observable<GatewayResourceInner> getByResourceGroupAsync(String resourceGroupName, String gatewayName, GatewayExpandOption expand) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, gatewayName, expand).map(new Func1<ServiceResponse<GatewayResourceInner>, GatewayResourceInner>() {
            @Override
            public GatewayResourceInner call(ServiceResponse<GatewayResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum)
     * @param expand Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. Possible values include: 'status', 'download'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GatewayResourceInner object
     */
    public Observable<ServiceResponse<GatewayResourceInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String gatewayName, GatewayExpandOption expand) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (gatewayName == null) {
            throw new IllegalArgumentException("Parameter gatewayName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, gatewayName, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<GatewayResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<GatewayResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<GatewayResourceInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<GatewayResourceInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<GatewayResourceInner, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<GatewayResourceInner>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Returns gateways in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;GatewayResourceInner&gt; object if successful.
     */
    public PagedList<GatewayResourceInner> list() {
        ServiceResponse<Page<GatewayResourceInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<GatewayResourceInner>(response.body()) {
            @Override
            public Page<GatewayResourceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Returns gateways in a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<GatewayResourceInner>> listAsync(final ListOperationCallback<GatewayResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<GatewayResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GatewayResourceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Returns gateways in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;GatewayResourceInner&gt; object
     */
    public Observable<Page<GatewayResourceInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<GatewayResourceInner>>, Page<GatewayResourceInner>>() {
                @Override
                public Page<GatewayResourceInner> call(ServiceResponse<Page<GatewayResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Returns gateways in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;GatewayResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<GatewayResourceInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<GatewayResourceInner>>, Observable<ServiceResponse<Page<GatewayResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GatewayResourceInner>>> call(ServiceResponse<Page<GatewayResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Returns gateways in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;GatewayResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<GatewayResourceInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<GatewayResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GatewayResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<GatewayResourceInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<GatewayResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<GatewayResourceInner>> listDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<GatewayResourceInner>, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<GatewayResourceInner>>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Returns gateways in a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;GatewayResourceInner&gt; object if successful.
     */
    public PagedList<GatewayResourceInner> listForResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<GatewayResourceInner>> response = listForResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<GatewayResourceInner>(response.body()) {
            @Override
            public Page<GatewayResourceInner> nextPage(String nextPageLink) {
                return listForResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Returns gateways in a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<GatewayResourceInner>> listForResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<GatewayResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listForResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<GatewayResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GatewayResourceInner>>> call(String nextPageLink) {
                    return listForResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Returns gateways in a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;GatewayResourceInner&gt; object
     */
    public Observable<Page<GatewayResourceInner>> listForResourceGroupAsync(final String resourceGroupName) {
        return listForResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<GatewayResourceInner>>, Page<GatewayResourceInner>>() {
                @Override
                public Page<GatewayResourceInner> call(ServiceResponse<Page<GatewayResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Returns gateways in a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;GatewayResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<GatewayResourceInner>>> listForResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listForResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<GatewayResourceInner>>, Observable<ServiceResponse<Page<GatewayResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GatewayResourceInner>>> call(ServiceResponse<Page<GatewayResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listForResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Returns gateways in a resource group.
     *
    ServiceResponse<PageImpl<GatewayResourceInner>> * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;GatewayResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<GatewayResourceInner>>> listForResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listForResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<GatewayResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GatewayResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<GatewayResourceInner>> result = listForResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<GatewayResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<GatewayResourceInner>> listForResourceGroupDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<GatewayResourceInner>, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<GatewayResourceInner>>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Upgrades a gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void upgrade(String resourceGroupName, String gatewayName) {
        upgradeWithServiceResponseAsync(resourceGroupName, gatewayName).toBlocking().last().body();
    }

    /**
     * Upgrades a gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> upgradeAsync(String resourceGroupName, String gatewayName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(upgradeWithServiceResponseAsync(resourceGroupName, gatewayName), serviceCallback);
    }

    /**
     * Upgrades a gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> upgradeAsync(String resourceGroupName, String gatewayName) {
        return upgradeWithServiceResponseAsync(resourceGroupName, gatewayName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Upgrades a gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> upgradeWithServiceResponseAsync(String resourceGroupName, String gatewayName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (gatewayName == null) {
            throw new IllegalArgumentException("Parameter gatewayName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.upgrade(this.client.subscriptionId(), resourceGroupName, gatewayName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Upgrades a gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginUpgrade(String resourceGroupName, String gatewayName) {
        beginUpgradeWithServiceResponseAsync(resourceGroupName, gatewayName).toBlocking().single().body();
    }

    /**
     * Upgrades a gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginUpgradeAsync(String resourceGroupName, String gatewayName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpgradeWithServiceResponseAsync(resourceGroupName, gatewayName), serviceCallback);
    }

    /**
     * Upgrades a gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginUpgradeAsync(String resourceGroupName, String gatewayName) {
        return beginUpgradeWithServiceResponseAsync(resourceGroupName, gatewayName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Upgrades a gateway.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginUpgradeWithServiceResponseAsync(String resourceGroupName, String gatewayName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (gatewayName == null) {
            throw new IllegalArgumentException("Parameter gatewayName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginUpgrade(this.client.subscriptionId(), resourceGroupName, gatewayName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginUpgradeDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginUpgradeDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Regenerate a gateway's profile.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void regenerateProfile(String resourceGroupName, String gatewayName) {
        regenerateProfileWithServiceResponseAsync(resourceGroupName, gatewayName).toBlocking().last().body();
    }

    /**
     * Regenerate a gateway's profile.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> regenerateProfileAsync(String resourceGroupName, String gatewayName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(regenerateProfileWithServiceResponseAsync(resourceGroupName, gatewayName), serviceCallback);
    }

    /**
     * Regenerate a gateway's profile.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> regenerateProfileAsync(String resourceGroupName, String gatewayName) {
        return regenerateProfileWithServiceResponseAsync(resourceGroupName, gatewayName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Regenerate a gateway's profile.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> regenerateProfileWithServiceResponseAsync(String resourceGroupName, String gatewayName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (gatewayName == null) {
            throw new IllegalArgumentException("Parameter gatewayName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.regenerateProfile(this.client.subscriptionId(), resourceGroupName, gatewayName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Regenerate a gateway's profile.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginRegenerateProfile(String resourceGroupName, String gatewayName) {
        beginRegenerateProfileWithServiceResponseAsync(resourceGroupName, gatewayName).toBlocking().single().body();
    }

    /**
     * Regenerate a gateway's profile.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginRegenerateProfileAsync(String resourceGroupName, String gatewayName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginRegenerateProfileWithServiceResponseAsync(resourceGroupName, gatewayName), serviceCallback);
    }

    /**
     * Regenerate a gateway's profile.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginRegenerateProfileAsync(String resourceGroupName, String gatewayName) {
        return beginRegenerateProfileWithServiceResponseAsync(resourceGroupName, gatewayName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Regenerate a gateway's profile.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginRegenerateProfileWithServiceResponseAsync(String resourceGroupName, String gatewayName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (gatewayName == null) {
            throw new IllegalArgumentException("Parameter gatewayName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginRegenerateProfile(this.client.subscriptionId(), resourceGroupName, gatewayName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginRegenerateProfileDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginRegenerateProfileDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Gets a gateway profile.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GatewayProfileInner object if successful.
     */
    public GatewayProfileInner getProfile(String resourceGroupName, String gatewayName) {
        return getProfileWithServiceResponseAsync(resourceGroupName, gatewayName).toBlocking().last().body();
    }

    /**
     * Gets a gateway profile.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<GatewayProfileInner> getProfileAsync(String resourceGroupName, String gatewayName, final ServiceCallback<GatewayProfileInner> serviceCallback) {
        return ServiceFuture.fromResponse(getProfileWithServiceResponseAsync(resourceGroupName, gatewayName), serviceCallback);
    }

    /**
     * Gets a gateway profile.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<GatewayProfileInner> getProfileAsync(String resourceGroupName, String gatewayName) {
        return getProfileWithServiceResponseAsync(resourceGroupName, gatewayName).map(new Func1<ServiceResponse<GatewayProfileInner>, GatewayProfileInner>() {
            @Override
            public GatewayProfileInner call(ServiceResponse<GatewayProfileInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a gateway profile.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<GatewayProfileInner>> getProfileWithServiceResponseAsync(String resourceGroupName, String gatewayName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (gatewayName == null) {
            throw new IllegalArgumentException("Parameter gatewayName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.getProfile(this.client.subscriptionId(), resourceGroupName, gatewayName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<GatewayProfileInner>() { }.getType());
    }

    /**
     * Gets a gateway profile.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GatewayProfileInner object if successful.
     */
    public GatewayProfileInner beginGetProfile(String resourceGroupName, String gatewayName) {
        return beginGetProfileWithServiceResponseAsync(resourceGroupName, gatewayName).toBlocking().single().body();
    }

    /**
     * Gets a gateway profile.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<GatewayProfileInner> beginGetProfileAsync(String resourceGroupName, String gatewayName, final ServiceCallback<GatewayProfileInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginGetProfileWithServiceResponseAsync(resourceGroupName, gatewayName), serviceCallback);
    }

    /**
     * Gets a gateway profile.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GatewayProfileInner object
     */
    public Observable<GatewayProfileInner> beginGetProfileAsync(String resourceGroupName, String gatewayName) {
        return beginGetProfileWithServiceResponseAsync(resourceGroupName, gatewayName).map(new Func1<ServiceResponse<GatewayProfileInner>, GatewayProfileInner>() {
            @Override
            public GatewayProfileInner call(ServiceResponse<GatewayProfileInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a gateway profile.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param gatewayName The gateway name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GatewayProfileInner object
     */
    public Observable<ServiceResponse<GatewayProfileInner>> beginGetProfileWithServiceResponseAsync(String resourceGroupName, String gatewayName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (gatewayName == null) {
            throw new IllegalArgumentException("Parameter gatewayName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginGetProfile(this.client.subscriptionId(), resourceGroupName, gatewayName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<GatewayProfileInner>>>() {
                @Override
                public Observable<ServiceResponse<GatewayProfileInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<GatewayProfileInner> clientResponse = beginGetProfileDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<GatewayProfileInner> beginGetProfileDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<GatewayProfileInner, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<GatewayProfileInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Returns gateways in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;GatewayResourceInner&gt; object if successful.
     */
    public PagedList<GatewayResourceInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<GatewayResourceInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<GatewayResourceInner>(response.body()) {
            @Override
            public Page<GatewayResourceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Returns gateways in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<GatewayResourceInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<GatewayResourceInner>> serviceFuture, final ListOperationCallback<GatewayResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<GatewayResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GatewayResourceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Returns gateways in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;GatewayResourceInner&gt; object
     */
    public Observable<Page<GatewayResourceInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<GatewayResourceInner>>, Page<GatewayResourceInner>>() {
                @Override
                public Page<GatewayResourceInner> call(ServiceResponse<Page<GatewayResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Returns gateways in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;GatewayResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<GatewayResourceInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<GatewayResourceInner>>, Observable<ServiceResponse<Page<GatewayResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GatewayResourceInner>>> call(ServiceResponse<Page<GatewayResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Returns gateways in a subscription.
     *
    ServiceResponse<PageImpl<GatewayResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;GatewayResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<GatewayResourceInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<GatewayResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GatewayResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<GatewayResourceInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<GatewayResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<GatewayResourceInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<GatewayResourceInner>, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<GatewayResourceInner>>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Returns gateways in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;GatewayResourceInner&gt; object if successful.
     */
    public PagedList<GatewayResourceInner> listForResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<GatewayResourceInner>> response = listForResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<GatewayResourceInner>(response.body()) {
            @Override
            public Page<GatewayResourceInner> nextPage(String nextPageLink) {
                return listForResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Returns gateways in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<GatewayResourceInner>> listForResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<GatewayResourceInner>> serviceFuture, final ListOperationCallback<GatewayResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listForResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<GatewayResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GatewayResourceInner>>> call(String nextPageLink) {
                    return listForResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Returns gateways in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;GatewayResourceInner&gt; object
     */
    public Observable<Page<GatewayResourceInner>> listForResourceGroupNextAsync(final String nextPageLink) {
        return listForResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<GatewayResourceInner>>, Page<GatewayResourceInner>>() {
                @Override
                public Page<GatewayResourceInner> call(ServiceResponse<Page<GatewayResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Returns gateways in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;GatewayResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<GatewayResourceInner>>> listForResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listForResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<GatewayResourceInner>>, Observable<ServiceResponse<Page<GatewayResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GatewayResourceInner>>> call(ServiceResponse<Page<GatewayResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listForResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Returns gateways in a resource group.
     *
    ServiceResponse<PageImpl<GatewayResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;GatewayResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<GatewayResourceInner>>> listForResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listForResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<GatewayResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<GatewayResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<GatewayResourceInner>> result = listForResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<GatewayResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<GatewayResourceInner>> listForResourceGroupNextDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<GatewayResourceInner>, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<GatewayResourceInner>>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

}
