/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servermanagement.implementation;

import com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsGet;
import com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsDelete;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.servermanagement.ErrorException;
import com.microsoft.azure.management.servermanagement.NodeParameters;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Nodes.
 */
public class NodesInner implements InnerSupportsGet<NodeResourceInner>, InnerSupportsDelete<Void> {
    /** The Retrofit service to perform REST calls. */
    private NodesService service;
    /** The service client containing this operation class. */
    private ServerManagementImpl client;

    /**
     * Initializes an instance of NodesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public NodesInner(Retrofit retrofit, ServerManagementImpl client) {
        this.service = retrofit.create(NodesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Nodes to be
     * used by Retrofit to perform actually REST calls.
     */
    interface NodesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.Nodes create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("nodeName") String nodeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body NodeParameters gatewayParameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.Nodes beginCreate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}")
        Observable<Response<ResponseBody>> beginCreate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("nodeName") String nodeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body NodeParameters gatewayParameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.Nodes update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("nodeName") String nodeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body NodeParameters nodeParameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.Nodes beginUpdate" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("nodeName") String nodeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body NodeParameters nodeParameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.Nodes delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("nodeName") String nodeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.Nodes getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("nodeName") String nodeName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.Nodes list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.ServerManagement/nodes")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.Nodes listForResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes")
        Observable<Response<ResponseBody>> listForResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.Nodes listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.Nodes listForResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listForResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Creates or updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the NodeResourceInner object if successful.
     */
    public NodeResourceInner create(String resourceGroupName, String nodeName) {
        return createWithServiceResponseAsync(resourceGroupName, nodeName).toBlocking().last().body();
    }

    /**
     * Creates or updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<NodeResourceInner> createAsync(String resourceGroupName, String nodeName, final ServiceCallback<NodeResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, nodeName), serviceCallback);
    }

    /**
     * Creates or updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<NodeResourceInner> createAsync(String resourceGroupName, String nodeName) {
        return createWithServiceResponseAsync(resourceGroupName, nodeName).map(new Func1<ServiceResponse<NodeResourceInner>, NodeResourceInner>() {
            @Override
            public NodeResourceInner call(ServiceResponse<NodeResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<NodeResourceInner>> createWithServiceResponseAsync(String resourceGroupName, String nodeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String location = null;
        final Object tags = null;
        final String gatewayId = null;
        final String connectionName = null;
        final String userName = null;
        final String password = null;
        NodeParameters gatewayParameters = new NodeParameters();
        gatewayParameters.withLocation(null);
        gatewayParameters.withTags(null);
        gatewayParameters.withGatewayId(null);
        gatewayParameters.withConnectionName(null);
        gatewayParameters.withUserName(null);
        gatewayParameters.withPassword(null);
        Observable<Response<ResponseBody>> observable = service.create(this.client.subscriptionId(), resourceGroupName, nodeName, this.client.apiVersion(), this.client.acceptLanguage(), gatewayParameters, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<NodeResourceInner>() { }.getType());
    }
    /**
     * Creates or updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param gatewayId Gateway ID which will manage this node.
     * @param connectionName myhost.domain.com
     * @param userName User name to be used to connect to node.
     * @param password Password associated with user name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the NodeResourceInner object if successful.
     */
    public NodeResourceInner create(String resourceGroupName, String nodeName, String location, Object tags, String gatewayId, String connectionName, String userName, String password) {
        return createWithServiceResponseAsync(resourceGroupName, nodeName, location, tags, gatewayId, connectionName, userName, password).toBlocking().last().body();
    }

    /**
     * Creates or updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param gatewayId Gateway ID which will manage this node.
     * @param connectionName myhost.domain.com
     * @param userName User name to be used to connect to node.
     * @param password Password associated with user name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<NodeResourceInner> createAsync(String resourceGroupName, String nodeName, String location, Object tags, String gatewayId, String connectionName, String userName, String password, final ServiceCallback<NodeResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, nodeName, location, tags, gatewayId, connectionName, userName, password), serviceCallback);
    }

    /**
     * Creates or updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param gatewayId Gateway ID which will manage this node.
     * @param connectionName myhost.domain.com
     * @param userName User name to be used to connect to node.
     * @param password Password associated with user name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<NodeResourceInner> createAsync(String resourceGroupName, String nodeName, String location, Object tags, String gatewayId, String connectionName, String userName, String password) {
        return createWithServiceResponseAsync(resourceGroupName, nodeName, location, tags, gatewayId, connectionName, userName, password).map(new Func1<ServiceResponse<NodeResourceInner>, NodeResourceInner>() {
            @Override
            public NodeResourceInner call(ServiceResponse<NodeResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param gatewayId Gateway ID which will manage this node.
     * @param connectionName myhost.domain.com
     * @param userName User name to be used to connect to node.
     * @param password Password associated with user name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<NodeResourceInner>> createWithServiceResponseAsync(String resourceGroupName, String nodeName, String location, Object tags, String gatewayId, String connectionName, String userName, String password) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        NodeParameters gatewayParameters = new NodeParameters();
        gatewayParameters.withLocation(location);
        gatewayParameters.withTags(tags);
        gatewayParameters.withGatewayId(gatewayId);
        gatewayParameters.withConnectionName(connectionName);
        gatewayParameters.withUserName(userName);
        gatewayParameters.withPassword(password);
        Observable<Response<ResponseBody>> observable = service.create(this.client.subscriptionId(), resourceGroupName, nodeName, this.client.apiVersion(), this.client.acceptLanguage(), gatewayParameters, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<NodeResourceInner>() { }.getType());
    }

    /**
     * Creates or updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the NodeResourceInner object if successful.
     */
    public NodeResourceInner beginCreate(String resourceGroupName, String nodeName) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, nodeName).toBlocking().single().body();
    }

    /**
     * Creates or updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<NodeResourceInner> beginCreateAsync(String resourceGroupName, String nodeName, final ServiceCallback<NodeResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(resourceGroupName, nodeName), serviceCallback);
    }

    /**
     * Creates or updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NodeResourceInner object
     */
    public Observable<NodeResourceInner> beginCreateAsync(String resourceGroupName, String nodeName) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, nodeName).map(new Func1<ServiceResponse<NodeResourceInner>, NodeResourceInner>() {
            @Override
            public NodeResourceInner call(ServiceResponse<NodeResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NodeResourceInner object
     */
    public Observable<ServiceResponse<NodeResourceInner>> beginCreateWithServiceResponseAsync(String resourceGroupName, String nodeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String location = null;
        final Object tags = null;
        final String gatewayId = null;
        final String connectionName = null;
        final String userName = null;
        final String password = null;
        NodeParameters gatewayParameters = new NodeParameters();
        gatewayParameters.withLocation(null);
        gatewayParameters.withTags(null);
        gatewayParameters.withGatewayId(null);
        gatewayParameters.withConnectionName(null);
        gatewayParameters.withUserName(null);
        gatewayParameters.withPassword(null);
        return service.beginCreate(this.client.subscriptionId(), resourceGroupName, nodeName, this.client.apiVersion(), this.client.acceptLanguage(), gatewayParameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<NodeResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<NodeResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<NodeResourceInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates or updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param gatewayId Gateway ID which will manage this node.
     * @param connectionName myhost.domain.com
     * @param userName User name to be used to connect to node.
     * @param password Password associated with user name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the NodeResourceInner object if successful.
     */
    public NodeResourceInner beginCreate(String resourceGroupName, String nodeName, String location, Object tags, String gatewayId, String connectionName, String userName, String password) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, nodeName, location, tags, gatewayId, connectionName, userName, password).toBlocking().single().body();
    }

    /**
     * Creates or updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param gatewayId Gateway ID which will manage this node.
     * @param connectionName myhost.domain.com
     * @param userName User name to be used to connect to node.
     * @param password Password associated with user name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<NodeResourceInner> beginCreateAsync(String resourceGroupName, String nodeName, String location, Object tags, String gatewayId, String connectionName, String userName, String password, final ServiceCallback<NodeResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(resourceGroupName, nodeName, location, tags, gatewayId, connectionName, userName, password), serviceCallback);
    }

    /**
     * Creates or updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param gatewayId Gateway ID which will manage this node.
     * @param connectionName myhost.domain.com
     * @param userName User name to be used to connect to node.
     * @param password Password associated with user name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NodeResourceInner object
     */
    public Observable<NodeResourceInner> beginCreateAsync(String resourceGroupName, String nodeName, String location, Object tags, String gatewayId, String connectionName, String userName, String password) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, nodeName, location, tags, gatewayId, connectionName, userName, password).map(new Func1<ServiceResponse<NodeResourceInner>, NodeResourceInner>() {
            @Override
            public NodeResourceInner call(ServiceResponse<NodeResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates or updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param gatewayId Gateway ID which will manage this node.
     * @param connectionName myhost.domain.com
     * @param userName User name to be used to connect to node.
     * @param password Password associated with user name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NodeResourceInner object
     */
    public Observable<ServiceResponse<NodeResourceInner>> beginCreateWithServiceResponseAsync(String resourceGroupName, String nodeName, String location, Object tags, String gatewayId, String connectionName, String userName, String password) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        NodeParameters gatewayParameters = new NodeParameters();
        gatewayParameters.withLocation(location);
        gatewayParameters.withTags(tags);
        gatewayParameters.withGatewayId(gatewayId);
        gatewayParameters.withConnectionName(connectionName);
        gatewayParameters.withUserName(userName);
        gatewayParameters.withPassword(password);
        return service.beginCreate(this.client.subscriptionId(), resourceGroupName, nodeName, this.client.apiVersion(), this.client.acceptLanguage(), gatewayParameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<NodeResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<NodeResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<NodeResourceInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<NodeResourceInner> beginCreateDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<NodeResourceInner, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<NodeResourceInner>() { }.getType())
                .register(201, new TypeToken<NodeResourceInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the NodeResourceInner object if successful.
     */
    public NodeResourceInner update(String resourceGroupName, String nodeName) {
        return updateWithServiceResponseAsync(resourceGroupName, nodeName).toBlocking().last().body();
    }

    /**
     * Updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<NodeResourceInner> updateAsync(String resourceGroupName, String nodeName, final ServiceCallback<NodeResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, nodeName), serviceCallback);
    }

    /**
     * Updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<NodeResourceInner> updateAsync(String resourceGroupName, String nodeName) {
        return updateWithServiceResponseAsync(resourceGroupName, nodeName).map(new Func1<ServiceResponse<NodeResourceInner>, NodeResourceInner>() {
            @Override
            public NodeResourceInner call(ServiceResponse<NodeResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<NodeResourceInner>> updateWithServiceResponseAsync(String resourceGroupName, String nodeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String location = null;
        final Object tags = null;
        final String gatewayId = null;
        final String connectionName = null;
        final String userName = null;
        final String password = null;
        NodeParameters nodeParameters = new NodeParameters();
        nodeParameters.withLocation(null);
        nodeParameters.withTags(null);
        nodeParameters.withGatewayId(null);
        nodeParameters.withConnectionName(null);
        nodeParameters.withUserName(null);
        nodeParameters.withPassword(null);
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, nodeName, this.client.apiVersion(), this.client.acceptLanguage(), nodeParameters, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<NodeResourceInner>() { }.getType());
    }
    /**
     * Updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param gatewayId Gateway ID which will manage this node.
     * @param connectionName myhost.domain.com
     * @param userName User name to be used to connect to node.
     * @param password Password associated with user name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the NodeResourceInner object if successful.
     */
    public NodeResourceInner update(String resourceGroupName, String nodeName, String location, Object tags, String gatewayId, String connectionName, String userName, String password) {
        return updateWithServiceResponseAsync(resourceGroupName, nodeName, location, tags, gatewayId, connectionName, userName, password).toBlocking().last().body();
    }

    /**
     * Updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param gatewayId Gateway ID which will manage this node.
     * @param connectionName myhost.domain.com
     * @param userName User name to be used to connect to node.
     * @param password Password associated with user name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<NodeResourceInner> updateAsync(String resourceGroupName, String nodeName, String location, Object tags, String gatewayId, String connectionName, String userName, String password, final ServiceCallback<NodeResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, nodeName, location, tags, gatewayId, connectionName, userName, password), serviceCallback);
    }

    /**
     * Updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param gatewayId Gateway ID which will manage this node.
     * @param connectionName myhost.domain.com
     * @param userName User name to be used to connect to node.
     * @param password Password associated with user name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<NodeResourceInner> updateAsync(String resourceGroupName, String nodeName, String location, Object tags, String gatewayId, String connectionName, String userName, String password) {
        return updateWithServiceResponseAsync(resourceGroupName, nodeName, location, tags, gatewayId, connectionName, userName, password).map(new Func1<ServiceResponse<NodeResourceInner>, NodeResourceInner>() {
            @Override
            public NodeResourceInner call(ServiceResponse<NodeResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param gatewayId Gateway ID which will manage this node.
     * @param connectionName myhost.domain.com
     * @param userName User name to be used to connect to node.
     * @param password Password associated with user name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<NodeResourceInner>> updateWithServiceResponseAsync(String resourceGroupName, String nodeName, String location, Object tags, String gatewayId, String connectionName, String userName, String password) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        NodeParameters nodeParameters = new NodeParameters();
        nodeParameters.withLocation(location);
        nodeParameters.withTags(tags);
        nodeParameters.withGatewayId(gatewayId);
        nodeParameters.withConnectionName(connectionName);
        nodeParameters.withUserName(userName);
        nodeParameters.withPassword(password);
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, nodeName, this.client.apiVersion(), this.client.acceptLanguage(), nodeParameters, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<NodeResourceInner>() { }.getType());
    }

    /**
     * Updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the NodeResourceInner object if successful.
     */
    public NodeResourceInner beginUpdate(String resourceGroupName, String nodeName) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, nodeName).toBlocking().single().body();
    }

    /**
     * Updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<NodeResourceInner> beginUpdateAsync(String resourceGroupName, String nodeName, final ServiceCallback<NodeResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, nodeName), serviceCallback);
    }

    /**
     * Updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NodeResourceInner object
     */
    public Observable<NodeResourceInner> beginUpdateAsync(String resourceGroupName, String nodeName) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, nodeName).map(new Func1<ServiceResponse<NodeResourceInner>, NodeResourceInner>() {
            @Override
            public NodeResourceInner call(ServiceResponse<NodeResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NodeResourceInner object
     */
    public Observable<ServiceResponse<NodeResourceInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String nodeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String location = null;
        final Object tags = null;
        final String gatewayId = null;
        final String connectionName = null;
        final String userName = null;
        final String password = null;
        NodeParameters nodeParameters = new NodeParameters();
        nodeParameters.withLocation(null);
        nodeParameters.withTags(null);
        nodeParameters.withGatewayId(null);
        nodeParameters.withConnectionName(null);
        nodeParameters.withUserName(null);
        nodeParameters.withPassword(null);
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, nodeName, this.client.apiVersion(), this.client.acceptLanguage(), nodeParameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<NodeResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<NodeResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<NodeResourceInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param gatewayId Gateway ID which will manage this node.
     * @param connectionName myhost.domain.com
     * @param userName User name to be used to connect to node.
     * @param password Password associated with user name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the NodeResourceInner object if successful.
     */
    public NodeResourceInner beginUpdate(String resourceGroupName, String nodeName, String location, Object tags, String gatewayId, String connectionName, String userName, String password) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, nodeName, location, tags, gatewayId, connectionName, userName, password).toBlocking().single().body();
    }

    /**
     * Updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param gatewayId Gateway ID which will manage this node.
     * @param connectionName myhost.domain.com
     * @param userName User name to be used to connect to node.
     * @param password Password associated with user name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<NodeResourceInner> beginUpdateAsync(String resourceGroupName, String nodeName, String location, Object tags, String gatewayId, String connectionName, String userName, String password, final ServiceCallback<NodeResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, nodeName, location, tags, gatewayId, connectionName, userName, password), serviceCallback);
    }

    /**
     * Updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param gatewayId Gateway ID which will manage this node.
     * @param connectionName myhost.domain.com
     * @param userName User name to be used to connect to node.
     * @param password Password associated with user name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NodeResourceInner object
     */
    public Observable<NodeResourceInner> beginUpdateAsync(String resourceGroupName, String nodeName, String location, Object tags, String gatewayId, String connectionName, String userName, String password) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, nodeName, location, tags, gatewayId, connectionName, userName, password).map(new Func1<ServiceResponse<NodeResourceInner>, NodeResourceInner>() {
            @Override
            public NodeResourceInner call(ServiceResponse<NodeResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param location Location of the resource.
     * @param tags Resource tags.
     * @param gatewayId Gateway ID which will manage this node.
     * @param connectionName myhost.domain.com
     * @param userName User name to be used to connect to node.
     * @param password Password associated with user name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NodeResourceInner object
     */
    public Observable<ServiceResponse<NodeResourceInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String nodeName, String location, Object tags, String gatewayId, String connectionName, String userName, String password) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        NodeParameters nodeParameters = new NodeParameters();
        nodeParameters.withLocation(location);
        nodeParameters.withTags(tags);
        nodeParameters.withGatewayId(gatewayId);
        nodeParameters.withConnectionName(connectionName);
        nodeParameters.withUserName(userName);
        nodeParameters.withPassword(password);
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, nodeName, this.client.apiVersion(), this.client.acceptLanguage(), nodeParameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<NodeResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<NodeResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<NodeResourceInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<NodeResourceInner> beginUpdateDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<NodeResourceInner, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<NodeResourceInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * deletes a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String nodeName) {
        deleteWithServiceResponseAsync(resourceGroupName, nodeName).toBlocking().single().body();
    }

    /**
     * deletes a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String nodeName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, nodeName), serviceCallback);
    }

    /**
     * deletes a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String nodeName) {
        return deleteWithServiceResponseAsync(resourceGroupName, nodeName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * deletes a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String nodeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, nodeName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Gets a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the NodeResourceInner object if successful.
     */
    public NodeResourceInner getByResourceGroup(String resourceGroupName, String nodeName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, nodeName).toBlocking().single().body();
    }

    /**
     * Gets a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<NodeResourceInner> getByResourceGroupAsync(String resourceGroupName, String nodeName, final ServiceCallback<NodeResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, nodeName), serviceCallback);
    }

    /**
     * Gets a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NodeResourceInner object
     */
    public Observable<NodeResourceInner> getByResourceGroupAsync(String resourceGroupName, String nodeName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, nodeName).map(new Func1<ServiceResponse<NodeResourceInner>, NodeResourceInner>() {
            @Override
            public NodeResourceInner call(ServiceResponse<NodeResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a management node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the NodeResourceInner object
     */
    public Observable<ServiceResponse<NodeResourceInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String nodeName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, nodeName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<NodeResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<NodeResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<NodeResourceInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<NodeResourceInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<NodeResourceInner, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<NodeResourceInner>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Lists nodes in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;NodeResourceInner&gt; object if successful.
     */
    public PagedList<NodeResourceInner> list() {
        ServiceResponse<Page<NodeResourceInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<NodeResourceInner>(response.body()) {
            @Override
            public Page<NodeResourceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists nodes in a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<NodeResourceInner>> listAsync(final ListOperationCallback<NodeResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<NodeResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NodeResourceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists nodes in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;NodeResourceInner&gt; object
     */
    public Observable<Page<NodeResourceInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<NodeResourceInner>>, Page<NodeResourceInner>>() {
                @Override
                public Page<NodeResourceInner> call(ServiceResponse<Page<NodeResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists nodes in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;NodeResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<NodeResourceInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<NodeResourceInner>>, Observable<ServiceResponse<Page<NodeResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NodeResourceInner>>> call(ServiceResponse<Page<NodeResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists nodes in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;NodeResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<NodeResourceInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<NodeResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NodeResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<NodeResourceInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<NodeResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<NodeResourceInner>> listDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<NodeResourceInner>, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<NodeResourceInner>>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Lists nodes in a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;NodeResourceInner&gt; object if successful.
     */
    public PagedList<NodeResourceInner> listForResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<NodeResourceInner>> response = listForResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<NodeResourceInner>(response.body()) {
            @Override
            public Page<NodeResourceInner> nextPage(String nextPageLink) {
                return listForResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists nodes in a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<NodeResourceInner>> listForResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<NodeResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listForResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<NodeResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NodeResourceInner>>> call(String nextPageLink) {
                    return listForResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists nodes in a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;NodeResourceInner&gt; object
     */
    public Observable<Page<NodeResourceInner>> listForResourceGroupAsync(final String resourceGroupName) {
        return listForResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<NodeResourceInner>>, Page<NodeResourceInner>>() {
                @Override
                public Page<NodeResourceInner> call(ServiceResponse<Page<NodeResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists nodes in a resource group.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;NodeResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<NodeResourceInner>>> listForResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listForResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<NodeResourceInner>>, Observable<ServiceResponse<Page<NodeResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NodeResourceInner>>> call(ServiceResponse<Page<NodeResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listForResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists nodes in a resource group.
     *
    ServiceResponse<PageImpl<NodeResourceInner>> * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;NodeResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<NodeResourceInner>>> listForResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listForResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<NodeResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NodeResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<NodeResourceInner>> result = listForResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<NodeResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<NodeResourceInner>> listForResourceGroupDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<NodeResourceInner>, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<NodeResourceInner>>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Lists nodes in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;NodeResourceInner&gt; object if successful.
     */
    public PagedList<NodeResourceInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<NodeResourceInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<NodeResourceInner>(response.body()) {
            @Override
            public Page<NodeResourceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists nodes in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<NodeResourceInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<NodeResourceInner>> serviceFuture, final ListOperationCallback<NodeResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<NodeResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NodeResourceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists nodes in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;NodeResourceInner&gt; object
     */
    public Observable<Page<NodeResourceInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<NodeResourceInner>>, Page<NodeResourceInner>>() {
                @Override
                public Page<NodeResourceInner> call(ServiceResponse<Page<NodeResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists nodes in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;NodeResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<NodeResourceInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<NodeResourceInner>>, Observable<ServiceResponse<Page<NodeResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NodeResourceInner>>> call(ServiceResponse<Page<NodeResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists nodes in a subscription.
     *
    ServiceResponse<PageImpl<NodeResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;NodeResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<NodeResourceInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<NodeResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NodeResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<NodeResourceInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<NodeResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<NodeResourceInner>> listNextDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<NodeResourceInner>, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<NodeResourceInner>>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Lists nodes in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;NodeResourceInner&gt; object if successful.
     */
    public PagedList<NodeResourceInner> listForResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<NodeResourceInner>> response = listForResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<NodeResourceInner>(response.body()) {
            @Override
            public Page<NodeResourceInner> nextPage(String nextPageLink) {
                return listForResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * Lists nodes in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<NodeResourceInner>> listForResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<NodeResourceInner>> serviceFuture, final ListOperationCallback<NodeResourceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listForResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<NodeResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NodeResourceInner>>> call(String nextPageLink) {
                    return listForResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Lists nodes in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;NodeResourceInner&gt; object
     */
    public Observable<Page<NodeResourceInner>> listForResourceGroupNextAsync(final String nextPageLink) {
        return listForResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<NodeResourceInner>>, Page<NodeResourceInner>>() {
                @Override
                public Page<NodeResourceInner> call(ServiceResponse<Page<NodeResourceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * Lists nodes in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;NodeResourceInner&gt; object
     */
    public Observable<ServiceResponse<Page<NodeResourceInner>>> listForResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listForResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<NodeResourceInner>>, Observable<ServiceResponse<Page<NodeResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NodeResourceInner>>> call(ServiceResponse<Page<NodeResourceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listForResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Lists nodes in a resource group.
     *
    ServiceResponse<PageImpl<NodeResourceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;NodeResourceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<NodeResourceInner>>> listForResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listForResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<NodeResourceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<NodeResourceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<NodeResourceInner>> result = listForResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<NodeResourceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<NodeResourceInner>> listForResourceGroupNextDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<NodeResourceInner>, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<NodeResourceInner>>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

}
