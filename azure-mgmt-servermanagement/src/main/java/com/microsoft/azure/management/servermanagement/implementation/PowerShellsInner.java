/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servermanagement.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.servermanagement.ErrorException;
import com.microsoft.azure.management.servermanagement.PowerShellCommandParameters;
import com.microsoft.azure.management.servermanagement.PowerShellExpandOption;
import com.microsoft.azure.management.servermanagement.PowerShellTabCompletionParameters;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in PowerShells.
 */
public class PowerShellsInner {
    /** The Retrofit service to perform REST calls. */
    private PowerShellsService service;
    /** The service client containing this operation class. */
    private ServerManagementImpl client;

    /**
     * Initializes an instance of PowerShellsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public PowerShellsInner(Retrofit retrofit, ServerManagementImpl client) {
        this.service = retrofit.create(PowerShellsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for PowerShells to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PowerShellsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.PowerShells listSession" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}/sessions/{session}/features/powerShellConsole/pssessions")
        Observable<Response<ResponseBody>> listSession(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("nodeName") String nodeName, @Path("session") String session, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.PowerShells createSession" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}/sessions/{session}/features/powerShellConsole/pssessions/{pssession}")
        Observable<Response<ResponseBody>> createSession(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("nodeName") String nodeName, @Path("session") String session, @Path("pssession") String pssession, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.PowerShells beginCreateSession" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}/sessions/{session}/features/powerShellConsole/pssessions/{pssession}")
        Observable<Response<ResponseBody>> beginCreateSession(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("nodeName") String nodeName, @Path("session") String session, @Path("pssession") String pssession, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.PowerShells getCommandStatus" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}/sessions/{session}/features/powerShellConsole/pssessions/{pssession}")
        Observable<Response<ResponseBody>> getCommandStatus(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("nodeName") String nodeName, @Path("session") String session, @Path("pssession") String pssession, @Query("api-version") String apiVersion, @Query("$expand") PowerShellExpandOption expand, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.PowerShells updateCommand" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}/sessions/{session}/features/powerShellConsole/pssessions/{pssession}")
        Observable<Response<ResponseBody>> updateCommand(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("nodeName") String nodeName, @Path("session") String session, @Path("pssession") String pssession, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.PowerShells beginUpdateCommand" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}/sessions/{session}/features/powerShellConsole/pssessions/{pssession}")
        Observable<Response<ResponseBody>> beginUpdateCommand(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("nodeName") String nodeName, @Path("session") String session, @Path("pssession") String pssession, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.PowerShells invokeCommand" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}/sessions/{session}/features/powerShellConsole/pssessions/{pssession}/invokeCommand")
        Observable<Response<ResponseBody>> invokeCommand(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("nodeName") String nodeName, @Path("session") String session, @Path("pssession") String pssession, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body PowerShellCommandParameters powerShellCommandParameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.PowerShells beginInvokeCommand" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}/sessions/{session}/features/powerShellConsole/pssessions/{pssession}/invokeCommand")
        Observable<Response<ResponseBody>> beginInvokeCommand(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("nodeName") String nodeName, @Path("session") String session, @Path("pssession") String pssession, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body PowerShellCommandParameters powerShellCommandParameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.PowerShells cancelCommand" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}/sessions/{session}/features/powerShellConsole/pssessions/{pssession}/cancel")
        Observable<Response<ResponseBody>> cancelCommand(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("nodeName") String nodeName, @Path("session") String session, @Path("pssession") String pssession, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.PowerShells beginCancelCommand" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}/sessions/{session}/features/powerShellConsole/pssessions/{pssession}/cancel")
        Observable<Response<ResponseBody>> beginCancelCommand(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("nodeName") String nodeName, @Path("session") String session, @Path("pssession") String pssession, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.PowerShells tabCompletion" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}/sessions/{session}/features/powerShellConsole/pssessions/{pssession}/tab")
        Observable<Response<ResponseBody>> tabCompletion(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("nodeName") String nodeName, @Path("session") String session, @Path("pssession") String pssession, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body PowerShellTabCompletionParameters powerShellTabCompletionParamters, @Header("User-Agent") String userAgent);

    }

    /**
     * Gets a list of the active sessions.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PowerShellSessionResourcesInner object if successful.
     */
    public PowerShellSessionResourcesInner listSession(String resourceGroupName, String nodeName, String session) {
        return listSessionWithServiceResponseAsync(resourceGroupName, nodeName, session).toBlocking().single().body();
    }

    /**
     * Gets a list of the active sessions.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PowerShellSessionResourcesInner> listSessionAsync(String resourceGroupName, String nodeName, String session, final ServiceCallback<PowerShellSessionResourcesInner> serviceCallback) {
        return ServiceFuture.fromResponse(listSessionWithServiceResponseAsync(resourceGroupName, nodeName, session), serviceCallback);
    }

    /**
     * Gets a list of the active sessions.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PowerShellSessionResourcesInner object
     */
    public Observable<PowerShellSessionResourcesInner> listSessionAsync(String resourceGroupName, String nodeName, String session) {
        return listSessionWithServiceResponseAsync(resourceGroupName, nodeName, session).map(new Func1<ServiceResponse<PowerShellSessionResourcesInner>, PowerShellSessionResourcesInner>() {
            @Override
            public PowerShellSessionResourcesInner call(ServiceResponse<PowerShellSessionResourcesInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a list of the active sessions.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PowerShellSessionResourcesInner object
     */
    public Observable<ServiceResponse<PowerShellSessionResourcesInner>> listSessionWithServiceResponseAsync(String resourceGroupName, String nodeName, String session) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (session == null) {
            throw new IllegalArgumentException("Parameter session is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listSession(this.client.subscriptionId(), resourceGroupName, nodeName, session, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PowerShellSessionResourcesInner>>>() {
                @Override
                public Observable<ServiceResponse<PowerShellSessionResourcesInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PowerShellSessionResourcesInner> clientResponse = listSessionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PowerShellSessionResourcesInner> listSessionDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PowerShellSessionResourcesInner, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PowerShellSessionResourcesInner>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Creates a PowerShell session.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PowerShellSessionResourceInner object if successful.
     */
    public PowerShellSessionResourceInner createSession(String resourceGroupName, String nodeName, String session, String pssession) {
        return createSessionWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession).toBlocking().last().body();
    }

    /**
     * Creates a PowerShell session.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PowerShellSessionResourceInner> createSessionAsync(String resourceGroupName, String nodeName, String session, String pssession, final ServiceCallback<PowerShellSessionResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createSessionWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession), serviceCallback);
    }

    /**
     * Creates a PowerShell session.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<PowerShellSessionResourceInner> createSessionAsync(String resourceGroupName, String nodeName, String session, String pssession) {
        return createSessionWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession).map(new Func1<ServiceResponse<PowerShellSessionResourceInner>, PowerShellSessionResourceInner>() {
            @Override
            public PowerShellSessionResourceInner call(ServiceResponse<PowerShellSessionResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a PowerShell session.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<PowerShellSessionResourceInner>> createSessionWithServiceResponseAsync(String resourceGroupName, String nodeName, String session, String pssession) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (session == null) {
            throw new IllegalArgumentException("Parameter session is required and cannot be null.");
        }
        if (pssession == null) {
            throw new IllegalArgumentException("Parameter pssession is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.createSession(this.client.subscriptionId(), resourceGroupName, nodeName, session, pssession, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<PowerShellSessionResourceInner>() { }.getType());
    }

    /**
     * Creates a PowerShell session.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PowerShellSessionResourceInner object if successful.
     */
    public PowerShellSessionResourceInner beginCreateSession(String resourceGroupName, String nodeName, String session, String pssession) {
        return beginCreateSessionWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession).toBlocking().single().body();
    }

    /**
     * Creates a PowerShell session.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PowerShellSessionResourceInner> beginCreateSessionAsync(String resourceGroupName, String nodeName, String session, String pssession, final ServiceCallback<PowerShellSessionResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateSessionWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession), serviceCallback);
    }

    /**
     * Creates a PowerShell session.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PowerShellSessionResourceInner object
     */
    public Observable<PowerShellSessionResourceInner> beginCreateSessionAsync(String resourceGroupName, String nodeName, String session, String pssession) {
        return beginCreateSessionWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession).map(new Func1<ServiceResponse<PowerShellSessionResourceInner>, PowerShellSessionResourceInner>() {
            @Override
            public PowerShellSessionResourceInner call(ServiceResponse<PowerShellSessionResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a PowerShell session.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PowerShellSessionResourceInner object
     */
    public Observable<ServiceResponse<PowerShellSessionResourceInner>> beginCreateSessionWithServiceResponseAsync(String resourceGroupName, String nodeName, String session, String pssession) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (session == null) {
            throw new IllegalArgumentException("Parameter session is required and cannot be null.");
        }
        if (pssession == null) {
            throw new IllegalArgumentException("Parameter pssession is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginCreateSession(this.client.subscriptionId(), resourceGroupName, nodeName, session, pssession, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PowerShellSessionResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<PowerShellSessionResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PowerShellSessionResourceInner> clientResponse = beginCreateSessionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PowerShellSessionResourceInner> beginCreateSessionDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PowerShellSessionResourceInner, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PowerShellSessionResourceInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Gets the status of a command.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PowerShellCommandStatusInner object if successful.
     */
    public PowerShellCommandStatusInner getCommandStatus(String resourceGroupName, String nodeName, String session, String pssession) {
        return getCommandStatusWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession).toBlocking().single().body();
    }

    /**
     * Gets the status of a command.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PowerShellCommandStatusInner> getCommandStatusAsync(String resourceGroupName, String nodeName, String session, String pssession, final ServiceCallback<PowerShellCommandStatusInner> serviceCallback) {
        return ServiceFuture.fromResponse(getCommandStatusWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession), serviceCallback);
    }

    /**
     * Gets the status of a command.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PowerShellCommandStatusInner object
     */
    public Observable<PowerShellCommandStatusInner> getCommandStatusAsync(String resourceGroupName, String nodeName, String session, String pssession) {
        return getCommandStatusWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession).map(new Func1<ServiceResponse<PowerShellCommandStatusInner>, PowerShellCommandStatusInner>() {
            @Override
            public PowerShellCommandStatusInner call(ServiceResponse<PowerShellCommandStatusInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the status of a command.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PowerShellCommandStatusInner object
     */
    public Observable<ServiceResponse<PowerShellCommandStatusInner>> getCommandStatusWithServiceResponseAsync(String resourceGroupName, String nodeName, String session, String pssession) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (session == null) {
            throw new IllegalArgumentException("Parameter session is required and cannot be null.");
        }
        if (pssession == null) {
            throw new IllegalArgumentException("Parameter pssession is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final PowerShellExpandOption expand = null;
        return service.getCommandStatus(this.client.subscriptionId(), resourceGroupName, nodeName, session, pssession, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PowerShellCommandStatusInner>>>() {
                @Override
                public Observable<ServiceResponse<PowerShellCommandStatusInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PowerShellCommandStatusInner> clientResponse = getCommandStatusDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets the status of a command.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @param expand Gets current output from an ongoing call. Possible values include: 'output'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PowerShellCommandStatusInner object if successful.
     */
    public PowerShellCommandStatusInner getCommandStatus(String resourceGroupName, String nodeName, String session, String pssession, PowerShellExpandOption expand) {
        return getCommandStatusWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession, expand).toBlocking().single().body();
    }

    /**
     * Gets the status of a command.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @param expand Gets current output from an ongoing call. Possible values include: 'output'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PowerShellCommandStatusInner> getCommandStatusAsync(String resourceGroupName, String nodeName, String session, String pssession, PowerShellExpandOption expand, final ServiceCallback<PowerShellCommandStatusInner> serviceCallback) {
        return ServiceFuture.fromResponse(getCommandStatusWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession, expand), serviceCallback);
    }

    /**
     * Gets the status of a command.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @param expand Gets current output from an ongoing call. Possible values include: 'output'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PowerShellCommandStatusInner object
     */
    public Observable<PowerShellCommandStatusInner> getCommandStatusAsync(String resourceGroupName, String nodeName, String session, String pssession, PowerShellExpandOption expand) {
        return getCommandStatusWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession, expand).map(new Func1<ServiceResponse<PowerShellCommandStatusInner>, PowerShellCommandStatusInner>() {
            @Override
            public PowerShellCommandStatusInner call(ServiceResponse<PowerShellCommandStatusInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the status of a command.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @param expand Gets current output from an ongoing call. Possible values include: 'output'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PowerShellCommandStatusInner object
     */
    public Observable<ServiceResponse<PowerShellCommandStatusInner>> getCommandStatusWithServiceResponseAsync(String resourceGroupName, String nodeName, String session, String pssession, PowerShellExpandOption expand) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (session == null) {
            throw new IllegalArgumentException("Parameter session is required and cannot be null.");
        }
        if (pssession == null) {
            throw new IllegalArgumentException("Parameter pssession is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getCommandStatus(this.client.subscriptionId(), resourceGroupName, nodeName, session, pssession, this.client.apiVersion(), expand, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PowerShellCommandStatusInner>>>() {
                @Override
                public Observable<ServiceResponse<PowerShellCommandStatusInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PowerShellCommandStatusInner> clientResponse = getCommandStatusDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PowerShellCommandStatusInner> getCommandStatusDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PowerShellCommandStatusInner, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PowerShellCommandStatusInner>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Updates a running PowerShell command with more data.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PowerShellCommandResultsInner object if successful.
     */
    public PowerShellCommandResultsInner updateCommand(String resourceGroupName, String nodeName, String session, String pssession) {
        return updateCommandWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession).toBlocking().last().body();
    }

    /**
     * Updates a running PowerShell command with more data.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PowerShellCommandResultsInner> updateCommandAsync(String resourceGroupName, String nodeName, String session, String pssession, final ServiceCallback<PowerShellCommandResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateCommandWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession), serviceCallback);
    }

    /**
     * Updates a running PowerShell command with more data.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<PowerShellCommandResultsInner> updateCommandAsync(String resourceGroupName, String nodeName, String session, String pssession) {
        return updateCommandWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession).map(new Func1<ServiceResponse<PowerShellCommandResultsInner>, PowerShellCommandResultsInner>() {
            @Override
            public PowerShellCommandResultsInner call(ServiceResponse<PowerShellCommandResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates a running PowerShell command with more data.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<PowerShellCommandResultsInner>> updateCommandWithServiceResponseAsync(String resourceGroupName, String nodeName, String session, String pssession) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (session == null) {
            throw new IllegalArgumentException("Parameter session is required and cannot be null.");
        }
        if (pssession == null) {
            throw new IllegalArgumentException("Parameter pssession is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.updateCommand(this.client.subscriptionId(), resourceGroupName, nodeName, session, pssession, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<PowerShellCommandResultsInner>() { }.getType());
    }

    /**
     * Updates a running PowerShell command with more data.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PowerShellCommandResultsInner object if successful.
     */
    public PowerShellCommandResultsInner beginUpdateCommand(String resourceGroupName, String nodeName, String session, String pssession) {
        return beginUpdateCommandWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession).toBlocking().single().body();
    }

    /**
     * Updates a running PowerShell command with more data.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PowerShellCommandResultsInner> beginUpdateCommandAsync(String resourceGroupName, String nodeName, String session, String pssession, final ServiceCallback<PowerShellCommandResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateCommandWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession), serviceCallback);
    }

    /**
     * Updates a running PowerShell command with more data.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PowerShellCommandResultsInner object
     */
    public Observable<PowerShellCommandResultsInner> beginUpdateCommandAsync(String resourceGroupName, String nodeName, String session, String pssession) {
        return beginUpdateCommandWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession).map(new Func1<ServiceResponse<PowerShellCommandResultsInner>, PowerShellCommandResultsInner>() {
            @Override
            public PowerShellCommandResultsInner call(ServiceResponse<PowerShellCommandResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates a running PowerShell command with more data.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PowerShellCommandResultsInner object
     */
    public Observable<ServiceResponse<PowerShellCommandResultsInner>> beginUpdateCommandWithServiceResponseAsync(String resourceGroupName, String nodeName, String session, String pssession) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (session == null) {
            throw new IllegalArgumentException("Parameter session is required and cannot be null.");
        }
        if (pssession == null) {
            throw new IllegalArgumentException("Parameter pssession is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginUpdateCommand(this.client.subscriptionId(), resourceGroupName, nodeName, session, pssession, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PowerShellCommandResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<PowerShellCommandResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PowerShellCommandResultsInner> clientResponse = beginUpdateCommandDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PowerShellCommandResultsInner> beginUpdateCommandDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PowerShellCommandResultsInner, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PowerShellCommandResultsInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Creates a PowerShell script and invokes it.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PowerShellCommandResultsInner object if successful.
     */
    public PowerShellCommandResultsInner invokeCommand(String resourceGroupName, String nodeName, String session, String pssession) {
        return invokeCommandWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession).toBlocking().last().body();
    }

    /**
     * Creates a PowerShell script and invokes it.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PowerShellCommandResultsInner> invokeCommandAsync(String resourceGroupName, String nodeName, String session, String pssession, final ServiceCallback<PowerShellCommandResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(invokeCommandWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession), serviceCallback);
    }

    /**
     * Creates a PowerShell script and invokes it.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<PowerShellCommandResultsInner> invokeCommandAsync(String resourceGroupName, String nodeName, String session, String pssession) {
        return invokeCommandWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession).map(new Func1<ServiceResponse<PowerShellCommandResultsInner>, PowerShellCommandResultsInner>() {
            @Override
            public PowerShellCommandResultsInner call(ServiceResponse<PowerShellCommandResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a PowerShell script and invokes it.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<PowerShellCommandResultsInner>> invokeCommandWithServiceResponseAsync(String resourceGroupName, String nodeName, String session, String pssession) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (session == null) {
            throw new IllegalArgumentException("Parameter session is required and cannot be null.");
        }
        if (pssession == null) {
            throw new IllegalArgumentException("Parameter pssession is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String command = null;
        PowerShellCommandParameters powerShellCommandParameters = new PowerShellCommandParameters();
        powerShellCommandParameters.withCommand(null);
        Observable<Response<ResponseBody>> observable = service.invokeCommand(this.client.subscriptionId(), resourceGroupName, nodeName, session, pssession, this.client.apiVersion(), this.client.acceptLanguage(), powerShellCommandParameters, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<PowerShellCommandResultsInner>() { }.getType());
    }
    /**
     * Creates a PowerShell script and invokes it.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @param command Script to execute.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PowerShellCommandResultsInner object if successful.
     */
    public PowerShellCommandResultsInner invokeCommand(String resourceGroupName, String nodeName, String session, String pssession, String command) {
        return invokeCommandWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession, command).toBlocking().last().body();
    }

    /**
     * Creates a PowerShell script and invokes it.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @param command Script to execute.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PowerShellCommandResultsInner> invokeCommandAsync(String resourceGroupName, String nodeName, String session, String pssession, String command, final ServiceCallback<PowerShellCommandResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(invokeCommandWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession, command), serviceCallback);
    }

    /**
     * Creates a PowerShell script and invokes it.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @param command Script to execute.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<PowerShellCommandResultsInner> invokeCommandAsync(String resourceGroupName, String nodeName, String session, String pssession, String command) {
        return invokeCommandWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession, command).map(new Func1<ServiceResponse<PowerShellCommandResultsInner>, PowerShellCommandResultsInner>() {
            @Override
            public PowerShellCommandResultsInner call(ServiceResponse<PowerShellCommandResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a PowerShell script and invokes it.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @param command Script to execute.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<PowerShellCommandResultsInner>> invokeCommandWithServiceResponseAsync(String resourceGroupName, String nodeName, String session, String pssession, String command) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (session == null) {
            throw new IllegalArgumentException("Parameter session is required and cannot be null.");
        }
        if (pssession == null) {
            throw new IllegalArgumentException("Parameter pssession is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        PowerShellCommandParameters powerShellCommandParameters = new PowerShellCommandParameters();
        powerShellCommandParameters.withCommand(command);
        Observable<Response<ResponseBody>> observable = service.invokeCommand(this.client.subscriptionId(), resourceGroupName, nodeName, session, pssession, this.client.apiVersion(), this.client.acceptLanguage(), powerShellCommandParameters, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<PowerShellCommandResultsInner>() { }.getType());
    }

    /**
     * Creates a PowerShell script and invokes it.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PowerShellCommandResultsInner object if successful.
     */
    public PowerShellCommandResultsInner beginInvokeCommand(String resourceGroupName, String nodeName, String session, String pssession) {
        return beginInvokeCommandWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession).toBlocking().single().body();
    }

    /**
     * Creates a PowerShell script and invokes it.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PowerShellCommandResultsInner> beginInvokeCommandAsync(String resourceGroupName, String nodeName, String session, String pssession, final ServiceCallback<PowerShellCommandResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginInvokeCommandWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession), serviceCallback);
    }

    /**
     * Creates a PowerShell script and invokes it.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PowerShellCommandResultsInner object
     */
    public Observable<PowerShellCommandResultsInner> beginInvokeCommandAsync(String resourceGroupName, String nodeName, String session, String pssession) {
        return beginInvokeCommandWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession).map(new Func1<ServiceResponse<PowerShellCommandResultsInner>, PowerShellCommandResultsInner>() {
            @Override
            public PowerShellCommandResultsInner call(ServiceResponse<PowerShellCommandResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a PowerShell script and invokes it.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PowerShellCommandResultsInner object
     */
    public Observable<ServiceResponse<PowerShellCommandResultsInner>> beginInvokeCommandWithServiceResponseAsync(String resourceGroupName, String nodeName, String session, String pssession) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (session == null) {
            throw new IllegalArgumentException("Parameter session is required and cannot be null.");
        }
        if (pssession == null) {
            throw new IllegalArgumentException("Parameter pssession is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String command = null;
        PowerShellCommandParameters powerShellCommandParameters = new PowerShellCommandParameters();
        powerShellCommandParameters.withCommand(null);
        return service.beginInvokeCommand(this.client.subscriptionId(), resourceGroupName, nodeName, session, pssession, this.client.apiVersion(), this.client.acceptLanguage(), powerShellCommandParameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PowerShellCommandResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<PowerShellCommandResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PowerShellCommandResultsInner> clientResponse = beginInvokeCommandDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates a PowerShell script and invokes it.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @param command Script to execute.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PowerShellCommandResultsInner object if successful.
     */
    public PowerShellCommandResultsInner beginInvokeCommand(String resourceGroupName, String nodeName, String session, String pssession, String command) {
        return beginInvokeCommandWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession, command).toBlocking().single().body();
    }

    /**
     * Creates a PowerShell script and invokes it.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @param command Script to execute.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PowerShellCommandResultsInner> beginInvokeCommandAsync(String resourceGroupName, String nodeName, String session, String pssession, String command, final ServiceCallback<PowerShellCommandResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginInvokeCommandWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession, command), serviceCallback);
    }

    /**
     * Creates a PowerShell script and invokes it.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @param command Script to execute.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PowerShellCommandResultsInner object
     */
    public Observable<PowerShellCommandResultsInner> beginInvokeCommandAsync(String resourceGroupName, String nodeName, String session, String pssession, String command) {
        return beginInvokeCommandWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession, command).map(new Func1<ServiceResponse<PowerShellCommandResultsInner>, PowerShellCommandResultsInner>() {
            @Override
            public PowerShellCommandResultsInner call(ServiceResponse<PowerShellCommandResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a PowerShell script and invokes it.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @param command Script to execute.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PowerShellCommandResultsInner object
     */
    public Observable<ServiceResponse<PowerShellCommandResultsInner>> beginInvokeCommandWithServiceResponseAsync(String resourceGroupName, String nodeName, String session, String pssession, String command) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (session == null) {
            throw new IllegalArgumentException("Parameter session is required and cannot be null.");
        }
        if (pssession == null) {
            throw new IllegalArgumentException("Parameter pssession is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        PowerShellCommandParameters powerShellCommandParameters = new PowerShellCommandParameters();
        powerShellCommandParameters.withCommand(command);
        return service.beginInvokeCommand(this.client.subscriptionId(), resourceGroupName, nodeName, session, pssession, this.client.apiVersion(), this.client.acceptLanguage(), powerShellCommandParameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PowerShellCommandResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<PowerShellCommandResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PowerShellCommandResultsInner> clientResponse = beginInvokeCommandDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PowerShellCommandResultsInner> beginInvokeCommandDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PowerShellCommandResultsInner, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PowerShellCommandResultsInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Cancels a PowerShell command.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PowerShellCommandResultsInner object if successful.
     */
    public PowerShellCommandResultsInner cancelCommand(String resourceGroupName, String nodeName, String session, String pssession) {
        return cancelCommandWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession).toBlocking().last().body();
    }

    /**
     * Cancels a PowerShell command.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PowerShellCommandResultsInner> cancelCommandAsync(String resourceGroupName, String nodeName, String session, String pssession, final ServiceCallback<PowerShellCommandResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(cancelCommandWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession), serviceCallback);
    }

    /**
     * Cancels a PowerShell command.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<PowerShellCommandResultsInner> cancelCommandAsync(String resourceGroupName, String nodeName, String session, String pssession) {
        return cancelCommandWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession).map(new Func1<ServiceResponse<PowerShellCommandResultsInner>, PowerShellCommandResultsInner>() {
            @Override
            public PowerShellCommandResultsInner call(ServiceResponse<PowerShellCommandResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Cancels a PowerShell command.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<PowerShellCommandResultsInner>> cancelCommandWithServiceResponseAsync(String resourceGroupName, String nodeName, String session, String pssession) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (session == null) {
            throw new IllegalArgumentException("Parameter session is required and cannot be null.");
        }
        if (pssession == null) {
            throw new IllegalArgumentException("Parameter pssession is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.cancelCommand(this.client.subscriptionId(), resourceGroupName, nodeName, session, pssession, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<PowerShellCommandResultsInner>() { }.getType());
    }

    /**
     * Cancels a PowerShell command.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PowerShellCommandResultsInner object if successful.
     */
    public PowerShellCommandResultsInner beginCancelCommand(String resourceGroupName, String nodeName, String session, String pssession) {
        return beginCancelCommandWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession).toBlocking().single().body();
    }

    /**
     * Cancels a PowerShell command.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PowerShellCommandResultsInner> beginCancelCommandAsync(String resourceGroupName, String nodeName, String session, String pssession, final ServiceCallback<PowerShellCommandResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCancelCommandWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession), serviceCallback);
    }

    /**
     * Cancels a PowerShell command.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PowerShellCommandResultsInner object
     */
    public Observable<PowerShellCommandResultsInner> beginCancelCommandAsync(String resourceGroupName, String nodeName, String session, String pssession) {
        return beginCancelCommandWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession).map(new Func1<ServiceResponse<PowerShellCommandResultsInner>, PowerShellCommandResultsInner>() {
            @Override
            public PowerShellCommandResultsInner call(ServiceResponse<PowerShellCommandResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Cancels a PowerShell command.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PowerShellCommandResultsInner object
     */
    public Observable<ServiceResponse<PowerShellCommandResultsInner>> beginCancelCommandWithServiceResponseAsync(String resourceGroupName, String nodeName, String session, String pssession) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (session == null) {
            throw new IllegalArgumentException("Parameter session is required and cannot be null.");
        }
        if (pssession == null) {
            throw new IllegalArgumentException("Parameter pssession is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginCancelCommand(this.client.subscriptionId(), resourceGroupName, nodeName, session, pssession, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PowerShellCommandResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<PowerShellCommandResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PowerShellCommandResultsInner> clientResponse = beginCancelCommandDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PowerShellCommandResultsInner> beginCancelCommandDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PowerShellCommandResultsInner, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PowerShellCommandResultsInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Gets tab completion values for a command.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PowerShellTabCompletionResultsInner object if successful.
     */
    public PowerShellTabCompletionResultsInner tabCompletion(String resourceGroupName, String nodeName, String session, String pssession) {
        return tabCompletionWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession).toBlocking().single().body();
    }

    /**
     * Gets tab completion values for a command.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PowerShellTabCompletionResultsInner> tabCompletionAsync(String resourceGroupName, String nodeName, String session, String pssession, final ServiceCallback<PowerShellTabCompletionResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(tabCompletionWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession), serviceCallback);
    }

    /**
     * Gets tab completion values for a command.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PowerShellTabCompletionResultsInner object
     */
    public Observable<PowerShellTabCompletionResultsInner> tabCompletionAsync(String resourceGroupName, String nodeName, String session, String pssession) {
        return tabCompletionWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession).map(new Func1<ServiceResponse<PowerShellTabCompletionResultsInner>, PowerShellTabCompletionResultsInner>() {
            @Override
            public PowerShellTabCompletionResultsInner call(ServiceResponse<PowerShellTabCompletionResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets tab completion values for a command.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PowerShellTabCompletionResultsInner object
     */
    public Observable<ServiceResponse<PowerShellTabCompletionResultsInner>> tabCompletionWithServiceResponseAsync(String resourceGroupName, String nodeName, String session, String pssession) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (session == null) {
            throw new IllegalArgumentException("Parameter session is required and cannot be null.");
        }
        if (pssession == null) {
            throw new IllegalArgumentException("Parameter pssession is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String command = null;
        PowerShellTabCompletionParameters powerShellTabCompletionParamters = new PowerShellTabCompletionParameters();
        powerShellTabCompletionParamters.withCommand(null);
        return service.tabCompletion(this.client.subscriptionId(), resourceGroupName, nodeName, session, pssession, this.client.apiVersion(), this.client.acceptLanguage(), powerShellTabCompletionParamters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PowerShellTabCompletionResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<PowerShellTabCompletionResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PowerShellTabCompletionResultsInner> clientResponse = tabCompletionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets tab completion values for a command.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @param command Command to get tab completion for.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PowerShellTabCompletionResultsInner object if successful.
     */
    public PowerShellTabCompletionResultsInner tabCompletion(String resourceGroupName, String nodeName, String session, String pssession, String command) {
        return tabCompletionWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession, command).toBlocking().single().body();
    }

    /**
     * Gets tab completion values for a command.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @param command Command to get tab completion for.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PowerShellTabCompletionResultsInner> tabCompletionAsync(String resourceGroupName, String nodeName, String session, String pssession, String command, final ServiceCallback<PowerShellTabCompletionResultsInner> serviceCallback) {
        return ServiceFuture.fromResponse(tabCompletionWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession, command), serviceCallback);
    }

    /**
     * Gets tab completion values for a command.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @param command Command to get tab completion for.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PowerShellTabCompletionResultsInner object
     */
    public Observable<PowerShellTabCompletionResultsInner> tabCompletionAsync(String resourceGroupName, String nodeName, String session, String pssession, String command) {
        return tabCompletionWithServiceResponseAsync(resourceGroupName, nodeName, session, pssession, command).map(new Func1<ServiceResponse<PowerShellTabCompletionResultsInner>, PowerShellTabCompletionResultsInner>() {
            @Override
            public PowerShellTabCompletionResultsInner call(ServiceResponse<PowerShellTabCompletionResultsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets tab completion values for a command.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param pssession The PowerShell sessionId from the user.
     * @param command Command to get tab completion for.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PowerShellTabCompletionResultsInner object
     */
    public Observable<ServiceResponse<PowerShellTabCompletionResultsInner>> tabCompletionWithServiceResponseAsync(String resourceGroupName, String nodeName, String session, String pssession, String command) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (session == null) {
            throw new IllegalArgumentException("Parameter session is required and cannot be null.");
        }
        if (pssession == null) {
            throw new IllegalArgumentException("Parameter pssession is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        PowerShellTabCompletionParameters powerShellTabCompletionParamters = new PowerShellTabCompletionParameters();
        powerShellTabCompletionParamters.withCommand(command);
        return service.tabCompletion(this.client.subscriptionId(), resourceGroupName, nodeName, session, pssession, this.client.apiVersion(), this.client.acceptLanguage(), powerShellTabCompletionParamters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PowerShellTabCompletionResultsInner>>>() {
                @Override
                public Observable<ServiceResponse<PowerShellTabCompletionResultsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PowerShellTabCompletionResultsInner> clientResponse = tabCompletionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PowerShellTabCompletionResultsInner> tabCompletionDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PowerShellTabCompletionResultsInner, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PowerShellTabCompletionResultsInner>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

}
