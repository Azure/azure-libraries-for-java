/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.servermanagement.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.servermanagement.CredentialDataFormat;
import com.microsoft.azure.management.servermanagement.ErrorException;
import com.microsoft.azure.management.servermanagement.RetentionPeriod;
import com.microsoft.azure.management.servermanagement.SessionParameters;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Sessions.
 */
public class SessionsInner {
    /** The Retrofit service to perform REST calls. */
    private SessionsService service;
    /** The service client containing this operation class. */
    private ServerManagementImpl client;

    /**
     * Initializes an instance of SessionsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public SessionsInner(Retrofit retrofit, ServerManagementImpl client) {
        this.service = retrofit.create(SessionsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Sessions to be
     * used by Retrofit to perform actually REST calls.
     */
    interface SessionsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.Sessions create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}/sessions/{session}")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("nodeName") String nodeName, @Path("session") String session, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body SessionParameters sessionParameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.Sessions beginCreate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}/sessions/{session}")
        Observable<Response<ResponseBody>> beginCreate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("nodeName") String nodeName, @Path("session") String session, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body SessionParameters sessionParameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.Sessions delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}/sessions/{session}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("nodeName") String nodeName, @Path("session") String session, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.servermanagement.Sessions get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServerManagement/nodes/{nodeName}/sessions/{session}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("nodeName") String nodeName, @Path("session") String session, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Creates a session for a node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SessionResourceInner object if successful.
     */
    public SessionResourceInner create(String resourceGroupName, String nodeName, String session) {
        return createWithServiceResponseAsync(resourceGroupName, nodeName, session).toBlocking().last().body();
    }

    /**
     * Creates a session for a node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SessionResourceInner> createAsync(String resourceGroupName, String nodeName, String session, final ServiceCallback<SessionResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, nodeName, session), serviceCallback);
    }

    /**
     * Creates a session for a node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<SessionResourceInner> createAsync(String resourceGroupName, String nodeName, String session) {
        return createWithServiceResponseAsync(resourceGroupName, nodeName, session).map(new Func1<ServiceResponse<SessionResourceInner>, SessionResourceInner>() {
            @Override
            public SessionResourceInner call(ServiceResponse<SessionResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a session for a node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<SessionResourceInner>> createWithServiceResponseAsync(String resourceGroupName, String nodeName, String session) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (session == null) {
            throw new IllegalArgumentException("Parameter session is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String userName = null;
        final String password = null;
        final RetentionPeriod retentionPeriod = null;
        final CredentialDataFormat credentialDataFormat = null;
        final String encryptionCertificateThumbprint = null;
        SessionParameters sessionParameters = new SessionParameters();
        sessionParameters.withUserName(null);
        sessionParameters.withPassword(null);
        sessionParameters.withRetentionPeriod(null);
        sessionParameters.withCredentialDataFormat(null);
        sessionParameters.withEncryptionCertificateThumbprint(null);
        Observable<Response<ResponseBody>> observable = service.create(this.client.subscriptionId(), resourceGroupName, nodeName, session, this.client.apiVersion(), this.client.acceptLanguage(), sessionParameters, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<SessionResourceInner>() { }.getType());
    }
    /**
     * Creates a session for a node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param userName Encrypted User name to be used to connect to node.
     * @param password Encrypted Password associated with user name.
     * @param retentionPeriod Session retention period. Possible values include: 'Session', 'Persistent'
     * @param credentialDataFormat Credential data format. Possible values include: 'RsaEncrypted'
     * @param encryptionCertificateThumbprint Encryption certificate thumbprint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SessionResourceInner object if successful.
     */
    public SessionResourceInner create(String resourceGroupName, String nodeName, String session, String userName, String password, RetentionPeriod retentionPeriod, CredentialDataFormat credentialDataFormat, String encryptionCertificateThumbprint) {
        return createWithServiceResponseAsync(resourceGroupName, nodeName, session, userName, password, retentionPeriod, credentialDataFormat, encryptionCertificateThumbprint).toBlocking().last().body();
    }

    /**
     * Creates a session for a node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param userName Encrypted User name to be used to connect to node.
     * @param password Encrypted Password associated with user name.
     * @param retentionPeriod Session retention period. Possible values include: 'Session', 'Persistent'
     * @param credentialDataFormat Credential data format. Possible values include: 'RsaEncrypted'
     * @param encryptionCertificateThumbprint Encryption certificate thumbprint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SessionResourceInner> createAsync(String resourceGroupName, String nodeName, String session, String userName, String password, RetentionPeriod retentionPeriod, CredentialDataFormat credentialDataFormat, String encryptionCertificateThumbprint, final ServiceCallback<SessionResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, nodeName, session, userName, password, retentionPeriod, credentialDataFormat, encryptionCertificateThumbprint), serviceCallback);
    }

    /**
     * Creates a session for a node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param userName Encrypted User name to be used to connect to node.
     * @param password Encrypted Password associated with user name.
     * @param retentionPeriod Session retention period. Possible values include: 'Session', 'Persistent'
     * @param credentialDataFormat Credential data format. Possible values include: 'RsaEncrypted'
     * @param encryptionCertificateThumbprint Encryption certificate thumbprint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<SessionResourceInner> createAsync(String resourceGroupName, String nodeName, String session, String userName, String password, RetentionPeriod retentionPeriod, CredentialDataFormat credentialDataFormat, String encryptionCertificateThumbprint) {
        return createWithServiceResponseAsync(resourceGroupName, nodeName, session, userName, password, retentionPeriod, credentialDataFormat, encryptionCertificateThumbprint).map(new Func1<ServiceResponse<SessionResourceInner>, SessionResourceInner>() {
            @Override
            public SessionResourceInner call(ServiceResponse<SessionResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a session for a node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param userName Encrypted User name to be used to connect to node.
     * @param password Encrypted Password associated with user name.
     * @param retentionPeriod Session retention period. Possible values include: 'Session', 'Persistent'
     * @param credentialDataFormat Credential data format. Possible values include: 'RsaEncrypted'
     * @param encryptionCertificateThumbprint Encryption certificate thumbprint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<SessionResourceInner>> createWithServiceResponseAsync(String resourceGroupName, String nodeName, String session, String userName, String password, RetentionPeriod retentionPeriod, CredentialDataFormat credentialDataFormat, String encryptionCertificateThumbprint) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (session == null) {
            throw new IllegalArgumentException("Parameter session is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        SessionParameters sessionParameters = new SessionParameters();
        sessionParameters.withUserName(userName);
        sessionParameters.withPassword(password);
        sessionParameters.withRetentionPeriod(retentionPeriod);
        sessionParameters.withCredentialDataFormat(credentialDataFormat);
        sessionParameters.withEncryptionCertificateThumbprint(encryptionCertificateThumbprint);
        Observable<Response<ResponseBody>> observable = service.create(this.client.subscriptionId(), resourceGroupName, nodeName, session, this.client.apiVersion(), this.client.acceptLanguage(), sessionParameters, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<SessionResourceInner>() { }.getType());
    }

    /**
     * Creates a session for a node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SessionResourceInner object if successful.
     */
    public SessionResourceInner beginCreate(String resourceGroupName, String nodeName, String session) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, nodeName, session).toBlocking().single().body();
    }

    /**
     * Creates a session for a node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SessionResourceInner> beginCreateAsync(String resourceGroupName, String nodeName, String session, final ServiceCallback<SessionResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(resourceGroupName, nodeName, session), serviceCallback);
    }

    /**
     * Creates a session for a node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SessionResourceInner object
     */
    public Observable<SessionResourceInner> beginCreateAsync(String resourceGroupName, String nodeName, String session) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, nodeName, session).map(new Func1<ServiceResponse<SessionResourceInner>, SessionResourceInner>() {
            @Override
            public SessionResourceInner call(ServiceResponse<SessionResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a session for a node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SessionResourceInner object
     */
    public Observable<ServiceResponse<SessionResourceInner>> beginCreateWithServiceResponseAsync(String resourceGroupName, String nodeName, String session) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (session == null) {
            throw new IllegalArgumentException("Parameter session is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String userName = null;
        final String password = null;
        final RetentionPeriod retentionPeriod = null;
        final CredentialDataFormat credentialDataFormat = null;
        final String encryptionCertificateThumbprint = null;
        SessionParameters sessionParameters = new SessionParameters();
        sessionParameters.withUserName(null);
        sessionParameters.withPassword(null);
        sessionParameters.withRetentionPeriod(null);
        sessionParameters.withCredentialDataFormat(null);
        sessionParameters.withEncryptionCertificateThumbprint(null);
        return service.beginCreate(this.client.subscriptionId(), resourceGroupName, nodeName, session, this.client.apiVersion(), this.client.acceptLanguage(), sessionParameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SessionResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<SessionResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SessionResourceInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates a session for a node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param userName Encrypted User name to be used to connect to node.
     * @param password Encrypted Password associated with user name.
     * @param retentionPeriod Session retention period. Possible values include: 'Session', 'Persistent'
     * @param credentialDataFormat Credential data format. Possible values include: 'RsaEncrypted'
     * @param encryptionCertificateThumbprint Encryption certificate thumbprint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SessionResourceInner object if successful.
     */
    public SessionResourceInner beginCreate(String resourceGroupName, String nodeName, String session, String userName, String password, RetentionPeriod retentionPeriod, CredentialDataFormat credentialDataFormat, String encryptionCertificateThumbprint) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, nodeName, session, userName, password, retentionPeriod, credentialDataFormat, encryptionCertificateThumbprint).toBlocking().single().body();
    }

    /**
     * Creates a session for a node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param userName Encrypted User name to be used to connect to node.
     * @param password Encrypted Password associated with user name.
     * @param retentionPeriod Session retention period. Possible values include: 'Session', 'Persistent'
     * @param credentialDataFormat Credential data format. Possible values include: 'RsaEncrypted'
     * @param encryptionCertificateThumbprint Encryption certificate thumbprint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SessionResourceInner> beginCreateAsync(String resourceGroupName, String nodeName, String session, String userName, String password, RetentionPeriod retentionPeriod, CredentialDataFormat credentialDataFormat, String encryptionCertificateThumbprint, final ServiceCallback<SessionResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateWithServiceResponseAsync(resourceGroupName, nodeName, session, userName, password, retentionPeriod, credentialDataFormat, encryptionCertificateThumbprint), serviceCallback);
    }

    /**
     * Creates a session for a node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param userName Encrypted User name to be used to connect to node.
     * @param password Encrypted Password associated with user name.
     * @param retentionPeriod Session retention period. Possible values include: 'Session', 'Persistent'
     * @param credentialDataFormat Credential data format. Possible values include: 'RsaEncrypted'
     * @param encryptionCertificateThumbprint Encryption certificate thumbprint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SessionResourceInner object
     */
    public Observable<SessionResourceInner> beginCreateAsync(String resourceGroupName, String nodeName, String session, String userName, String password, RetentionPeriod retentionPeriod, CredentialDataFormat credentialDataFormat, String encryptionCertificateThumbprint) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, nodeName, session, userName, password, retentionPeriod, credentialDataFormat, encryptionCertificateThumbprint).map(new Func1<ServiceResponse<SessionResourceInner>, SessionResourceInner>() {
            @Override
            public SessionResourceInner call(ServiceResponse<SessionResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a session for a node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param userName Encrypted User name to be used to connect to node.
     * @param password Encrypted Password associated with user name.
     * @param retentionPeriod Session retention period. Possible values include: 'Session', 'Persistent'
     * @param credentialDataFormat Credential data format. Possible values include: 'RsaEncrypted'
     * @param encryptionCertificateThumbprint Encryption certificate thumbprint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SessionResourceInner object
     */
    public Observable<ServiceResponse<SessionResourceInner>> beginCreateWithServiceResponseAsync(String resourceGroupName, String nodeName, String session, String userName, String password, RetentionPeriod retentionPeriod, CredentialDataFormat credentialDataFormat, String encryptionCertificateThumbprint) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (session == null) {
            throw new IllegalArgumentException("Parameter session is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        SessionParameters sessionParameters = new SessionParameters();
        sessionParameters.withUserName(userName);
        sessionParameters.withPassword(password);
        sessionParameters.withRetentionPeriod(retentionPeriod);
        sessionParameters.withCredentialDataFormat(credentialDataFormat);
        sessionParameters.withEncryptionCertificateThumbprint(encryptionCertificateThumbprint);
        return service.beginCreate(this.client.subscriptionId(), resourceGroupName, nodeName, session, this.client.apiVersion(), this.client.acceptLanguage(), sessionParameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SessionResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<SessionResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SessionResourceInner> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SessionResourceInner> beginCreateDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SessionResourceInner, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SessionResourceInner>() { }.getType())
                .register(201, new TypeToken<SessionResourceInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Deletes a session for a node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String nodeName, String session) {
        deleteWithServiceResponseAsync(resourceGroupName, nodeName, session).toBlocking().single().body();
    }

    /**
     * Deletes a session for a node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String nodeName, String session, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, nodeName, session), serviceCallback);
    }

    /**
     * Deletes a session for a node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String nodeName, String session) {
        return deleteWithServiceResponseAsync(resourceGroupName, nodeName, session).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a session for a node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String nodeName, String session) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (session == null) {
            throw new IllegalArgumentException("Parameter session is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, nodeName, session, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Gets a session for a node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SessionResourceInner object if successful.
     */
    public SessionResourceInner get(String resourceGroupName, String nodeName, String session) {
        return getWithServiceResponseAsync(resourceGroupName, nodeName, session).toBlocking().single().body();
    }

    /**
     * Gets a session for a node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SessionResourceInner> getAsync(String resourceGroupName, String nodeName, String session, final ServiceCallback<SessionResourceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, nodeName, session), serviceCallback);
    }

    /**
     * Gets a session for a node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SessionResourceInner object
     */
    public Observable<SessionResourceInner> getAsync(String resourceGroupName, String nodeName, String session) {
        return getWithServiceResponseAsync(resourceGroupName, nodeName, session).map(new Func1<ServiceResponse<SessionResourceInner>, SessionResourceInner>() {
            @Override
            public SessionResourceInner call(ServiceResponse<SessionResourceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a session for a node.
     *
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscriptionId.
     * @param nodeName The node name (256 characters maximum).
     * @param session The sessionId from the user.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SessionResourceInner object
     */
    public Observable<ServiceResponse<SessionResourceInner>> getWithServiceResponseAsync(String resourceGroupName, String nodeName, String session) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (nodeName == null) {
            throw new IllegalArgumentException("Parameter nodeName is required and cannot be null.");
        }
        if (session == null) {
            throw new IllegalArgumentException("Parameter session is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, nodeName, session, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SessionResourceInner>>>() {
                @Override
                public Observable<ServiceResponse<SessionResourceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SessionResourceInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SessionResourceInner> getDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SessionResourceInner, ErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SessionResourceInner>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

}
