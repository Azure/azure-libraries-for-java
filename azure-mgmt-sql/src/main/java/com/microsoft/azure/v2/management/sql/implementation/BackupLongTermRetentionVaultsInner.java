/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.v2.management.sql.implementation;

import com.microsoft.azure.v2.AzureProxy;
import com.microsoft.azure.v2.CloudException;
import com.microsoft.azure.v2.OperationStatus;
import com.microsoft.azure.v2.util.ServiceFutureUtil;
import com.microsoft.rest.v2.BodyResponse;
import com.microsoft.rest.v2.OperationDescription;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.annotations.BodyParam;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.HeaderParam;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.PathParam;
import com.microsoft.rest.v2.annotations.PUT;
import com.microsoft.rest.v2.annotations.QueryParam;
import com.microsoft.rest.v2.annotations.ResumeOperation;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import io.reactivex.Maybe;
import io.reactivex.Observable;
import io.reactivex.Single;
import io.reactivex.annotations.NonNull;
import java.util.List;

/**
 * An instance of this class provides access to all the operations defined in
 * BackupLongTermRetentionVaults.
 */
public final class BackupLongTermRetentionVaultsInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private BackupLongTermRetentionVaultsService service;

    /**
     * The service client containing this operation class.
     */
    private SqlManagementClientImpl client;

    /**
     * Initializes an instance of BackupLongTermRetentionVaultsInner.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public BackupLongTermRetentionVaultsInner(SqlManagementClientImpl client) {
        this.service = AzureProxy.create(BackupLongTermRetentionVaultsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * BackupLongTermRetentionVaults to be used by the proxy service to perform
     * REST calls.
     */
    @Host("https://management.azure.com")
    private interface BackupLongTermRetentionVaultsService {
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/backupLongTermRetentionVaults/{backupLongTermRetentionVaultName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<BackupLongTermRetentionVaultInner>> get(@PathParam("subscriptionId") String subscriptionId, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("serverName") String serverName, @PathParam("backupLongTermRetentionVaultName") String backupLongTermRetentionVaultName, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/backupLongTermRetentionVaults/{backupLongTermRetentionVaultName}")
        @ExpectedResponses({200, 201, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Observable<OperationStatus<BackupLongTermRetentionVaultInner>> beginCreateOrUpdate(@PathParam("subscriptionId") String subscriptionId, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("serverName") String serverName, @PathParam("backupLongTermRetentionVaultName") String backupLongTermRetentionVaultName, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @BodyParam("application/json; charset=utf-8") BackupLongTermRetentionVaultInner parameters);

        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/backupLongTermRetentionVaults/{backupLongTermRetentionVaultName}")
        @ExpectedResponses({200, 201, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<BackupLongTermRetentionVaultInner>> createOrUpdate(@PathParam("subscriptionId") String subscriptionId, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("serverName") String serverName, @PathParam("backupLongTermRetentionVaultName") String backupLongTermRetentionVaultName, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @BodyParam("application/json; charset=utf-8") BackupLongTermRetentionVaultInner parameters);

        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/backupLongTermRetentionVaults/{backupLongTermRetentionVaultName}")
        @ExpectedResponses({200, 201, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Observable<OperationStatus<BackupLongTermRetentionVaultInner>> resumeCreateOrUpdate(OperationDescription operationDescription);

        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/backupLongTermRetentionVaults")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<List<BackupLongTermRetentionVaultInner>>> listByServer(@PathParam("subscriptionId") String subscriptionId, @PathParam("resourceGroupName") String resourceGroupName, @PathParam("serverName") String serverName, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);
    }

    /**
     * Gets a server backup long term retention vault.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BackupLongTermRetentionVaultInner object if successful.
     */
    public BackupLongTermRetentionVaultInner get(@NonNull String resourceGroupName, @NonNull String serverName) {
        return getAsync(resourceGroupName, serverName).blockingGet();
    }

    /**
     * Gets a server backup long term retention vault.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<BackupLongTermRetentionVaultInner> getAsync(@NonNull String resourceGroupName, @NonNull String serverName, ServiceCallback<BackupLongTermRetentionVaultInner> serviceCallback) {
        return ServiceFuture.fromBody(getAsync(resourceGroupName, serverName), serviceCallback);
    }

    /**
     * Gets a server backup long term retention vault.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<BackupLongTermRetentionVaultInner>> getWithRestResponseAsync(@NonNull String resourceGroupName, @NonNull String serverName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        final String backupLongTermRetentionVaultName = "RegisteredVault";
        final String apiVersion = "2014-04-01";
        return service.get(this.client.subscriptionId(), resourceGroupName, serverName, backupLongTermRetentionVaultName, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Gets a server backup long term retention vault.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<BackupLongTermRetentionVaultInner> getAsync(@NonNull String resourceGroupName, @NonNull String serverName) {
        return getWithRestResponseAsync(resourceGroupName, serverName)
            .flatMapMaybe((BodyResponse<BackupLongTermRetentionVaultInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Updates a server backup long term retention vault.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param recoveryServicesVaultResourceId The azure recovery services vault resource id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BackupLongTermRetentionVaultInner object if successful.
     */
    public BackupLongTermRetentionVaultInner beginCreateOrUpdate(@NonNull String resourceGroupName, @NonNull String serverName, @NonNull String recoveryServicesVaultResourceId) {
        return beginCreateOrUpdateAsync(resourceGroupName, serverName, recoveryServicesVaultResourceId).blockingLast().result();
    }

    /**
     * Updates a server backup long term retention vault.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param recoveryServicesVaultResourceId The azure recovery services vault resource id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the ServiceFuture&lt;BackupLongTermRetentionVaultInner&gt; object.
     */
    public ServiceFuture<BackupLongTermRetentionVaultInner> beginCreateOrUpdateAsync(@NonNull String resourceGroupName, @NonNull String serverName, @NonNull String recoveryServicesVaultResourceId, ServiceCallback<BackupLongTermRetentionVaultInner> serviceCallback) {
        return ServiceFutureUtil.fromLRO(beginCreateOrUpdateAsync(resourceGroupName, serverName, recoveryServicesVaultResourceId), serviceCallback);
    }

    /**
     * Updates a server backup long term retention vault.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param recoveryServicesVaultResourceId The azure recovery services vault resource id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    public Observable<OperationStatus<BackupLongTermRetentionVaultInner>> beginCreateOrUpdateAsync(@NonNull String resourceGroupName, @NonNull String serverName, @NonNull String recoveryServicesVaultResourceId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (recoveryServicesVaultResourceId == null) {
            throw new IllegalArgumentException("Parameter recoveryServicesVaultResourceId is required and cannot be null.");
        }
        final String backupLongTermRetentionVaultName = "RegisteredVault";
        final String apiVersion = "2014-04-01";
        BackupLongTermRetentionVaultInner parameters = new BackupLongTermRetentionVaultInner();
        parameters.withRecoveryServicesVaultResourceId(recoveryServicesVaultResourceId);
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, serverName, backupLongTermRetentionVaultName, apiVersion, this.client.acceptLanguage(), parameters);
    }

    /**
     * Updates a server backup long term retention vault.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param recoveryServicesVaultResourceId The azure recovery services vault resource id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the BackupLongTermRetentionVaultInner object if successful.
     */
    public BackupLongTermRetentionVaultInner createOrUpdate(@NonNull String resourceGroupName, @NonNull String serverName, @NonNull String recoveryServicesVaultResourceId) {
        return createOrUpdateAsync(resourceGroupName, serverName, recoveryServicesVaultResourceId).blockingGet();
    }

    /**
     * Updates a server backup long term retention vault.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param recoveryServicesVaultResourceId The azure recovery services vault resource id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<BackupLongTermRetentionVaultInner> createOrUpdateAsync(@NonNull String resourceGroupName, @NonNull String serverName, @NonNull String recoveryServicesVaultResourceId, ServiceCallback<BackupLongTermRetentionVaultInner> serviceCallback) {
        return ServiceFuture.fromBody(createOrUpdateAsync(resourceGroupName, serverName, recoveryServicesVaultResourceId), serviceCallback);
    }

    /**
     * Updates a server backup long term retention vault.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param recoveryServicesVaultResourceId The azure recovery services vault resource id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<BackupLongTermRetentionVaultInner>> createOrUpdateWithRestResponseAsync(@NonNull String resourceGroupName, @NonNull String serverName, @NonNull String recoveryServicesVaultResourceId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (recoveryServicesVaultResourceId == null) {
            throw new IllegalArgumentException("Parameter recoveryServicesVaultResourceId is required and cannot be null.");
        }
        final String backupLongTermRetentionVaultName = "RegisteredVault";
        final String apiVersion = "2014-04-01";
        BackupLongTermRetentionVaultInner parameters = new BackupLongTermRetentionVaultInner();
        parameters.withRecoveryServicesVaultResourceId(recoveryServicesVaultResourceId);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, serverName, backupLongTermRetentionVaultName, apiVersion, this.client.acceptLanguage(), parameters);
    }

    /**
     * Updates a server backup long term retention vault.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param recoveryServicesVaultResourceId The azure recovery services vault resource id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<BackupLongTermRetentionVaultInner> createOrUpdateAsync(@NonNull String resourceGroupName, @NonNull String serverName, @NonNull String recoveryServicesVaultResourceId) {
        return createOrUpdateWithRestResponseAsync(resourceGroupName, serverName, recoveryServicesVaultResourceId)
            .flatMapMaybe((BodyResponse<BackupLongTermRetentionVaultInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Updates a server backup long term retention vault (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    public Observable<OperationStatus<BackupLongTermRetentionVaultInner>> resumeCreateOrUpdate(OperationDescription operationDescription) {
        if (operationDescription == null) {
            throw new IllegalArgumentException("Parameter operationDescription is required and cannot be null.");
        }
        return service.resumeCreateOrUpdate(operationDescription);
    }

    /**
     * Gets server backup long term retention vaults in a server.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the List&lt;BackupLongTermRetentionVaultInner&gt; object if successful.
     */
    public List<BackupLongTermRetentionVaultInner> listByServer(@NonNull String resourceGroupName, @NonNull String serverName) {
        return listByServerAsync(resourceGroupName, serverName).blockingGet();
    }

    /**
     * Gets server backup long term retention vaults in a server.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<List<BackupLongTermRetentionVaultInner>> listByServerAsync(@NonNull String resourceGroupName, @NonNull String serverName, ServiceCallback<List<BackupLongTermRetentionVaultInner>> serviceCallback) {
        return ServiceFuture.fromBody(listByServerAsync(resourceGroupName, serverName), serviceCallback);
    }

    /**
     * Gets server backup long term retention vaults in a server.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<List<BackupLongTermRetentionVaultInner>>> listByServerWithRestResponseAsync(@NonNull String resourceGroupName, @NonNull String serverName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        final String apiVersion = "2014-04-01";
        return service.listByServer(this.client.subscriptionId(), resourceGroupName, serverName, apiVersion, this.client.acceptLanguage());
    }

    /**
     * Gets server backup long term retention vaults in a server.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<List<BackupLongTermRetentionVaultInner>> listByServerAsync(@NonNull String resourceGroupName, @NonNull String serverName) {
        return listByServerWithRestResponseAsync(resourceGroupName, serverName)
            .flatMapMaybe((BodyResponse<List<BackupLongTermRetentionVaultInner>> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }
}
