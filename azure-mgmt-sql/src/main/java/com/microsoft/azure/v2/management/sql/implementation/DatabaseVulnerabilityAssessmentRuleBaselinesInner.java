/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.v2.management.sql.implementation;

import com.microsoft.azure.v2.AzureProxy;
import com.microsoft.azure.v2.CloudException;
import com.microsoft.azure.v2.management.sql.DatabaseVulnerabilityAssessmentRuleBaselineItem;
import com.microsoft.azure.v2.management.sql.VulnerabilityAssessmentPolicyBaselineName;
import com.microsoft.rest.v2.BodyResponse;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.Validator;
import com.microsoft.rest.v2.VoidResponse;
import com.microsoft.rest.v2.annotations.BodyParam;
import com.microsoft.rest.v2.annotations.DELETE;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.HeaderParam;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.PathParam;
import com.microsoft.rest.v2.annotations.PUT;
import com.microsoft.rest.v2.annotations.QueryParam;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import io.reactivex.Completable;
import io.reactivex.Maybe;
import io.reactivex.Single;
import io.reactivex.annotations.NonNull;
import java.util.List;

/**
 * An instance of this class provides access to all the operations defined in
 * DatabaseVulnerabilityAssessmentRuleBaselines.
 */
public final class DatabaseVulnerabilityAssessmentRuleBaselinesInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private DatabaseVulnerabilityAssessmentRuleBaselinesService service;

    /**
     * The service client containing this operation class.
     */
    private SqlManagementClientImpl client;

    /**
     * Initializes an instance of DatabaseVulnerabilityAssessmentRuleBaselinesInner.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public DatabaseVulnerabilityAssessmentRuleBaselinesInner(SqlManagementClientImpl client) {
        this.service = AzureProxy.create(DatabaseVulnerabilityAssessmentRuleBaselinesService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for
     * DatabaseVulnerabilityAssessmentRuleBaselines to be used by the proxy
     * service to perform REST calls.
     */
    @Host("https://management.azure.com")
    private interface DatabaseVulnerabilityAssessmentRuleBaselinesService {
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<DatabaseVulnerabilityAssessmentRuleBaselineInner>> get(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("serverName") String serverName, @PathParam("databaseName") String databaseName, @PathParam("vulnerabilityAssessmentName") String vulnerabilityAssessmentName, @PathParam("ruleId") String ruleId, @PathParam("baselineName") VulnerabilityAssessmentPolicyBaselineName baselineName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<DatabaseVulnerabilityAssessmentRuleBaselineInner>> createOrUpdate(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("serverName") String serverName, @PathParam("databaseName") String databaseName, @PathParam("vulnerabilityAssessmentName") String vulnerabilityAssessmentName, @PathParam("ruleId") String ruleId, @PathParam("baselineName") VulnerabilityAssessmentPolicyBaselineName baselineName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage, @BodyParam("application/json; charset=utf-8") DatabaseVulnerabilityAssessmentRuleBaselineInner parameters);

        @DELETE("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<VoidResponse> delete(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("serverName") String serverName, @PathParam("databaseName") String databaseName, @PathParam("vulnerabilityAssessmentName") String vulnerabilityAssessmentName, @PathParam("ruleId") String ruleId, @PathParam("baselineName") VulnerabilityAssessmentPolicyBaselineName baselineName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);
    }

    /**
     * Gets a database's vulnerability assessment rule baseline.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database for which the vulnerability assessment rule baseline is defined.
     * @param ruleId The vulnerability assessment rule ID.
     * @param baselineName The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule). Possible values include: 'master', 'default'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DatabaseVulnerabilityAssessmentRuleBaselineInner object if successful.
     */
    public DatabaseVulnerabilityAssessmentRuleBaselineInner get(@NonNull String resourceGroupName, @NonNull String serverName, @NonNull String databaseName, @NonNull String ruleId, @NonNull VulnerabilityAssessmentPolicyBaselineName baselineName) {
        return getAsync(resourceGroupName, serverName, databaseName, ruleId, baselineName).blockingGet();
    }

    /**
     * Gets a database's vulnerability assessment rule baseline.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database for which the vulnerability assessment rule baseline is defined.
     * @param ruleId The vulnerability assessment rule ID.
     * @param baselineName The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule). Possible values include: 'master', 'default'.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<DatabaseVulnerabilityAssessmentRuleBaselineInner> getAsync(@NonNull String resourceGroupName, @NonNull String serverName, @NonNull String databaseName, @NonNull String ruleId, @NonNull VulnerabilityAssessmentPolicyBaselineName baselineName, ServiceCallback<DatabaseVulnerabilityAssessmentRuleBaselineInner> serviceCallback) {
        return ServiceFuture.fromBody(getAsync(resourceGroupName, serverName, databaseName, ruleId, baselineName), serviceCallback);
    }

    /**
     * Gets a database's vulnerability assessment rule baseline.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database for which the vulnerability assessment rule baseline is defined.
     * @param ruleId The vulnerability assessment rule ID.
     * @param baselineName The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule). Possible values include: 'master', 'default'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<DatabaseVulnerabilityAssessmentRuleBaselineInner>> getWithRestResponseAsync(@NonNull String resourceGroupName, @NonNull String serverName, @NonNull String databaseName, @NonNull String ruleId, @NonNull VulnerabilityAssessmentPolicyBaselineName baselineName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (databaseName == null) {
            throw new IllegalArgumentException("Parameter databaseName is required and cannot be null.");
        }
        if (ruleId == null) {
            throw new IllegalArgumentException("Parameter ruleId is required and cannot be null.");
        }
        if (baselineName == null) {
            throw new IllegalArgumentException("Parameter baselineName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String vulnerabilityAssessmentName = "default";
        final String apiVersion = "2017-03-01-preview";
        return service.get(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, ruleId, baselineName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage());
    }

    /**
     * Gets a database's vulnerability assessment rule baseline.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database for which the vulnerability assessment rule baseline is defined.
     * @param ruleId The vulnerability assessment rule ID.
     * @param baselineName The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule). Possible values include: 'master', 'default'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<DatabaseVulnerabilityAssessmentRuleBaselineInner> getAsync(@NonNull String resourceGroupName, @NonNull String serverName, @NonNull String databaseName, @NonNull String ruleId, @NonNull VulnerabilityAssessmentPolicyBaselineName baselineName) {
        return getWithRestResponseAsync(resourceGroupName, serverName, databaseName, ruleId, baselineName)
            .flatMapMaybe((BodyResponse<DatabaseVulnerabilityAssessmentRuleBaselineInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Creates or updates a database's vulnerability assessment rule baseline.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database for which the vulnerability assessment rule baseline is defined.
     * @param ruleId The vulnerability assessment rule ID.
     * @param baselineName The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule). Possible values include: 'master', 'default'.
     * @param baselineResults The rule baseline result.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the DatabaseVulnerabilityAssessmentRuleBaselineInner object if successful.
     */
    public DatabaseVulnerabilityAssessmentRuleBaselineInner createOrUpdate(@NonNull String resourceGroupName, @NonNull String serverName, @NonNull String databaseName, @NonNull String ruleId, @NonNull VulnerabilityAssessmentPolicyBaselineName baselineName, @NonNull List<DatabaseVulnerabilityAssessmentRuleBaselineItem> baselineResults) {
        return createOrUpdateAsync(resourceGroupName, serverName, databaseName, ruleId, baselineName, baselineResults).blockingGet();
    }

    /**
     * Creates or updates a database's vulnerability assessment rule baseline.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database for which the vulnerability assessment rule baseline is defined.
     * @param ruleId The vulnerability assessment rule ID.
     * @param baselineName The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule). Possible values include: 'master', 'default'.
     * @param baselineResults The rule baseline result.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<DatabaseVulnerabilityAssessmentRuleBaselineInner> createOrUpdateAsync(@NonNull String resourceGroupName, @NonNull String serverName, @NonNull String databaseName, @NonNull String ruleId, @NonNull VulnerabilityAssessmentPolicyBaselineName baselineName, @NonNull List<DatabaseVulnerabilityAssessmentRuleBaselineItem> baselineResults, ServiceCallback<DatabaseVulnerabilityAssessmentRuleBaselineInner> serviceCallback) {
        return ServiceFuture.fromBody(createOrUpdateAsync(resourceGroupName, serverName, databaseName, ruleId, baselineName, baselineResults), serviceCallback);
    }

    /**
     * Creates or updates a database's vulnerability assessment rule baseline.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database for which the vulnerability assessment rule baseline is defined.
     * @param ruleId The vulnerability assessment rule ID.
     * @param baselineName The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule). Possible values include: 'master', 'default'.
     * @param baselineResults The rule baseline result.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<DatabaseVulnerabilityAssessmentRuleBaselineInner>> createOrUpdateWithRestResponseAsync(@NonNull String resourceGroupName, @NonNull String serverName, @NonNull String databaseName, @NonNull String ruleId, @NonNull VulnerabilityAssessmentPolicyBaselineName baselineName, @NonNull List<DatabaseVulnerabilityAssessmentRuleBaselineItem> baselineResults) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (databaseName == null) {
            throw new IllegalArgumentException("Parameter databaseName is required and cannot be null.");
        }
        if (ruleId == null) {
            throw new IllegalArgumentException("Parameter ruleId is required and cannot be null.");
        }
        if (baselineName == null) {
            throw new IllegalArgumentException("Parameter baselineName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (baselineResults == null) {
            throw new IllegalArgumentException("Parameter baselineResults is required and cannot be null.");
        }
        Validator.validate(baselineResults);
        final String vulnerabilityAssessmentName = "default";
        final String apiVersion = "2017-03-01-preview";
        DatabaseVulnerabilityAssessmentRuleBaselineInner parameters = new DatabaseVulnerabilityAssessmentRuleBaselineInner();
        parameters.withBaselineResults(baselineResults);
        return service.createOrUpdate(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, ruleId, baselineName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), parameters);
    }

    /**
     * Creates or updates a database's vulnerability assessment rule baseline.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database for which the vulnerability assessment rule baseline is defined.
     * @param ruleId The vulnerability assessment rule ID.
     * @param baselineName The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule). Possible values include: 'master', 'default'.
     * @param baselineResults The rule baseline result.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<DatabaseVulnerabilityAssessmentRuleBaselineInner> createOrUpdateAsync(@NonNull String resourceGroupName, @NonNull String serverName, @NonNull String databaseName, @NonNull String ruleId, @NonNull VulnerabilityAssessmentPolicyBaselineName baselineName, @NonNull List<DatabaseVulnerabilityAssessmentRuleBaselineItem> baselineResults) {
        return createOrUpdateWithRestResponseAsync(resourceGroupName, serverName, databaseName, ruleId, baselineName, baselineResults)
            .flatMapMaybe((BodyResponse<DatabaseVulnerabilityAssessmentRuleBaselineInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Removes the database's vulnerability assessment rule baseline.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database for which the vulnerability assessment rule baseline is defined.
     * @param ruleId The vulnerability assessment rule ID.
     * @param baselineName The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule). Possible values include: 'master', 'default'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void delete(@NonNull String resourceGroupName, @NonNull String serverName, @NonNull String databaseName, @NonNull String ruleId, @NonNull VulnerabilityAssessmentPolicyBaselineName baselineName) {
        deleteAsync(resourceGroupName, serverName, databaseName, ruleId, baselineName).blockingAwait();
    }

    /**
     * Removes the database's vulnerability assessment rule baseline.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database for which the vulnerability assessment rule baseline is defined.
     * @param ruleId The vulnerability assessment rule ID.
     * @param baselineName The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule). Possible values include: 'master', 'default'.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> deleteAsync(@NonNull String resourceGroupName, @NonNull String serverName, @NonNull String databaseName, @NonNull String ruleId, @NonNull VulnerabilityAssessmentPolicyBaselineName baselineName, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(deleteAsync(resourceGroupName, serverName, databaseName, ruleId, baselineName), serviceCallback);
    }

    /**
     * Removes the database's vulnerability assessment rule baseline.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database for which the vulnerability assessment rule baseline is defined.
     * @param ruleId The vulnerability assessment rule ID.
     * @param baselineName The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule). Possible values include: 'master', 'default'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> deleteWithRestResponseAsync(@NonNull String resourceGroupName, @NonNull String serverName, @NonNull String databaseName, @NonNull String ruleId, @NonNull VulnerabilityAssessmentPolicyBaselineName baselineName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (databaseName == null) {
            throw new IllegalArgumentException("Parameter databaseName is required and cannot be null.");
        }
        if (ruleId == null) {
            throw new IllegalArgumentException("Parameter ruleId is required and cannot be null.");
        }
        if (baselineName == null) {
            throw new IllegalArgumentException("Parameter baselineName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String vulnerabilityAssessmentName = "default";
        final String apiVersion = "2017-03-01-preview";
        return service.delete(resourceGroupName, serverName, databaseName, vulnerabilityAssessmentName, ruleId, baselineName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage());
    }

    /**
     * Removes the database's vulnerability assessment rule baseline.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param databaseName The name of the database for which the vulnerability assessment rule baseline is defined.
     * @param ruleId The vulnerability assessment rule ID.
     * @param baselineName The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule). Possible values include: 'master', 'default'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable deleteAsync(@NonNull String resourceGroupName, @NonNull String serverName, @NonNull String databaseName, @NonNull String ruleId, @NonNull VulnerabilityAssessmentPolicyBaselineName baselineName) {
        return deleteWithRestResponseAsync(resourceGroupName, serverName, databaseName, ruleId, baselineName)
            .toCompletable();
    }
}
