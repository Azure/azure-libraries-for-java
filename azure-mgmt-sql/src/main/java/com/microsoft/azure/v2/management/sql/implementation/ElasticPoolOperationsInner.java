/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.v2.management.sql.implementation;

import com.microsoft.azure.v2.AzureProxy;
import com.microsoft.azure.v2.CloudException;
import com.microsoft.azure.v2.Page;
import com.microsoft.azure.v2.PagedList;
import com.microsoft.rest.v2.BodyResponse;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.VoidResponse;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.HeaderParam;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.PathParam;
import com.microsoft.rest.v2.annotations.POST;
import com.microsoft.rest.v2.annotations.QueryParam;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import io.reactivex.Completable;
import io.reactivex.Observable;
import io.reactivex.Single;
import io.reactivex.annotations.NonNull;
import java.util.UUID;

/**
 * An instance of this class provides access to all the operations defined in
 * ElasticPoolOperations.
 */
public final class ElasticPoolOperationsInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private ElasticPoolOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private SqlManagementClientImpl client;

    /**
     * Initializes an instance of ElasticPoolOperationsInner.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public ElasticPoolOperationsInner(SqlManagementClientImpl client) {
        this.service = AzureProxy.create(ElasticPoolOperationsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for ElasticPoolOperations to be
     * used by the proxy service to perform REST calls.
     */
    @Host("https://management.azure.com")
    private interface ElasticPoolOperationsService {
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/operations/{operationId}/cancel")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<VoidResponse> cancel(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("serverName") String serverName, @PathParam("elasticPoolName") String elasticPoolName, @PathParam("operationId") UUID operationId, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/operations")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PageImpl1<ElasticPoolOperationInner>>> listByElasticPool(@PathParam("resourceGroupName") String resourceGroupName, @PathParam("serverName") String serverName, @PathParam("elasticPoolName") String elasticPoolName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PageImpl1<ElasticPoolOperationInner>>> listByElasticPoolNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);
    }

    /**
     * Cancels the asynchronous operation on the elastic pool.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param elasticPoolName the String value.
     * @param operationId The operation identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void cancel(@NonNull String resourceGroupName, @NonNull String serverName, @NonNull String elasticPoolName, @NonNull UUID operationId) {
        cancelAsync(resourceGroupName, serverName, elasticPoolName, operationId).blockingAwait();
    }

    /**
     * Cancels the asynchronous operation on the elastic pool.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param elasticPoolName the String value.
     * @param operationId The operation identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> cancelAsync(@NonNull String resourceGroupName, @NonNull String serverName, @NonNull String elasticPoolName, @NonNull UUID operationId, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(cancelAsync(resourceGroupName, serverName, elasticPoolName, operationId), serviceCallback);
    }

    /**
     * Cancels the asynchronous operation on the elastic pool.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param elasticPoolName the String value.
     * @param operationId The operation identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> cancelWithRestResponseAsync(@NonNull String resourceGroupName, @NonNull String serverName, @NonNull String elasticPoolName, @NonNull UUID operationId) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (elasticPoolName == null) {
            throw new IllegalArgumentException("Parameter elasticPoolName is required and cannot be null.");
        }
        if (operationId == null) {
            throw new IllegalArgumentException("Parameter operationId is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2017-10-01-preview";
        return service.cancel(resourceGroupName, serverName, elasticPoolName, operationId, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage());
    }

    /**
     * Cancels the asynchronous operation on the elastic pool.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param elasticPoolName the String value.
     * @param operationId The operation identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable cancelAsync(@NonNull String resourceGroupName, @NonNull String serverName, @NonNull String elasticPoolName, @NonNull UUID operationId) {
        return cancelWithRestResponseAsync(resourceGroupName, serverName, elasticPoolName, operationId)
            .toCompletable();
    }

    /**
     * Gets a list of operations performed on the elastic pool.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param elasticPoolName the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ElasticPoolOperationInner&gt; object if successful.
     */
    public PagedList<ElasticPoolOperationInner> listByElasticPool(@NonNull String resourceGroupName, @NonNull String serverName, @NonNull String elasticPoolName) {
        Page<ElasticPoolOperationInner> response = listByElasticPoolSinglePageAsync(resourceGroupName, serverName, elasticPoolName).blockingGet();
        return new PagedList<ElasticPoolOperationInner>(response) {
            @Override
            public Page<ElasticPoolOperationInner> nextPage(String nextPageLink) {
                return listByElasticPoolNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Gets a list of operations performed on the elastic pool.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param elasticPoolName the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;ElasticPoolOperationInner&gt; object.
     */
    public Observable<Page<ElasticPoolOperationInner>> listByElasticPoolAsync(@NonNull String resourceGroupName, @NonNull String serverName, @NonNull String elasticPoolName) {
        return listByElasticPoolSinglePageAsync(resourceGroupName, serverName, elasticPoolName)
            .toObservable()
            .concatMap((Page<ElasticPoolOperationInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listByElasticPoolNextAsync(nextPageLink));
            });
    }

    /**
     * Gets a list of operations performed on the elastic pool.
     *
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param serverName The name of the server.
     * @param elasticPoolName the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;ElasticPoolOperationInner&gt;&gt; object if successful.
     */
    public Single<Page<ElasticPoolOperationInner>> listByElasticPoolSinglePageAsync(@NonNull String resourceGroupName, @NonNull String serverName, @NonNull String elasticPoolName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (serverName == null) {
            throw new IllegalArgumentException("Parameter serverName is required and cannot be null.");
        }
        if (elasticPoolName == null) {
            throw new IllegalArgumentException("Parameter elasticPoolName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2017-10-01-preview";
        return service.listByElasticPool(resourceGroupName, serverName, elasticPoolName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl1<ElasticPoolOperationInner>> res) -> res.body());
    }

    /**
     * Gets a list of operations performed on the elastic pool.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;ElasticPoolOperationInner&gt; object if successful.
     */
    public PagedList<ElasticPoolOperationInner> listByElasticPoolNext(@NonNull String nextPageLink) {
        Page<ElasticPoolOperationInner> response = listByElasticPoolNextSinglePageAsync(nextPageLink).blockingGet();
        return new PagedList<ElasticPoolOperationInner>(response) {
            @Override
            public Page<ElasticPoolOperationInner> nextPage(String nextPageLink) {
                return listByElasticPoolNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Gets a list of operations performed on the elastic pool.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;ElasticPoolOperationInner&gt; object.
     */
    public Observable<Page<ElasticPoolOperationInner>> listByElasticPoolNextAsync(@NonNull String nextPageLink) {
        return listByElasticPoolNextSinglePageAsync(nextPageLink)
            .toObservable()
            .concatMap((Page<ElasticPoolOperationInner> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listByElasticPoolNextAsync(nextPageLink1));
            });
    }

    /**
     * Gets a list of operations performed on the elastic pool.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;ElasticPoolOperationInner&gt;&gt; object if successful.
     */
    public Single<Page<ElasticPoolOperationInner>> listByElasticPoolNextSinglePageAsync(@NonNull String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByElasticPoolNext(nextUrl, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl1<ElasticPoolOperationInner>> res) -> res.body());
    }
}
