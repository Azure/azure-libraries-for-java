/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.v2.management.sql.implementation;

import com.microsoft.azure.v2.AzureProxy;
import com.microsoft.azure.v2.CloudException;
import com.microsoft.azure.v2.OperationStatus;
import com.microsoft.azure.v2.Page;
import com.microsoft.azure.v2.PagedList;
import com.microsoft.azure.v2.management.sql.LongTermRetentionDatabaseState;
import com.microsoft.azure.v2.util.ServiceFutureUtil;
import com.microsoft.rest.v2.BodyResponse;
import com.microsoft.rest.v2.OperationDescription;
import com.microsoft.rest.v2.ServiceCallback;
import com.microsoft.rest.v2.ServiceFuture;
import com.microsoft.rest.v2.VoidResponse;
import com.microsoft.rest.v2.annotations.DELETE;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.HeaderParam;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.PathParam;
import com.microsoft.rest.v2.annotations.QueryParam;
import com.microsoft.rest.v2.annotations.ResumeOperation;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import io.reactivex.Completable;
import io.reactivex.Maybe;
import io.reactivex.Observable;
import io.reactivex.Single;
import io.reactivex.annotations.NonNull;

/**
 * An instance of this class provides access to all the operations defined in
 * LongTermRetentionBackups.
 */
public final class LongTermRetentionBackupsInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private LongTermRetentionBackupsService service;

    /**
     * The service client containing this operation class.
     */
    private SqlManagementClientImpl client;

    /**
     * Initializes an instance of LongTermRetentionBackupsInner.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public LongTermRetentionBackupsInner(SqlManagementClientImpl client) {
        this.service = AzureProxy.create(LongTermRetentionBackupsService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for LongTermRetentionBackups to
     * be used by the proxy service to perform REST calls.
     */
    @Host("https://management.azure.com")
    private interface LongTermRetentionBackupsService {
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<LongTermRetentionBackupInner>> get(@PathParam("locationName") String locationName, @PathParam("longTermRetentionServerName") String longTermRetentionServerName, @PathParam("longTermRetentionDatabaseName") String longTermRetentionDatabaseName, @PathParam("backupName") String backupName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @DELETE("subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Observable<OperationStatus<Void>> beginDelete(@PathParam("locationName") String locationName, @PathParam("longTermRetentionServerName") String longTermRetentionServerName, @PathParam("longTermRetentionDatabaseName") String longTermRetentionDatabaseName, @PathParam("backupName") String backupName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @DELETE("subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<VoidResponse> delete(@PathParam("locationName") String locationName, @PathParam("longTermRetentionServerName") String longTermRetentionServerName, @PathParam("longTermRetentionDatabaseName") String longTermRetentionDatabaseName, @PathParam("backupName") String backupName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @DELETE("subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(CloudException.class)
        @ResumeOperation
        Observable<OperationStatus<Void>> resumeDelete(OperationDescription operationDescription);

        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PageImpl1<LongTermRetentionBackupInner>>> listByDatabase(@PathParam("locationName") String locationName, @PathParam("longTermRetentionServerName") String longTermRetentionServerName, @PathParam("longTermRetentionDatabaseName") String longTermRetentionDatabaseName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("onlyLatestPerDatabase") Boolean onlyLatestPerDatabase, @QueryParam("databaseState") LongTermRetentionDatabaseState databaseState, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PageImpl1<LongTermRetentionBackupInner>>> listByLocation(@PathParam("locationName") String locationName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("onlyLatestPerDatabase") Boolean onlyLatestPerDatabase, @QueryParam("databaseState") LongTermRetentionDatabaseState databaseState, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PageImpl1<LongTermRetentionBackupInner>>> listByServer(@PathParam("locationName") String locationName, @PathParam("longTermRetentionServerName") String longTermRetentionServerName, @PathParam("subscriptionId") String subscriptionId, @QueryParam("onlyLatestPerDatabase") Boolean onlyLatestPerDatabase, @QueryParam("databaseState") LongTermRetentionDatabaseState databaseState, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PageImpl1<LongTermRetentionBackupInner>>> listByDatabaseNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PageImpl1<LongTermRetentionBackupInner>>> listByLocationNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);

        @GET("{nextUrl}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PageImpl1<LongTermRetentionBackupInner>>> listByServerNext(@PathParam(value = "nextUrl", encoded = true) String nextUrl, @HeaderParam("accept-language") String acceptLanguage);
    }

    /**
     * Gets a long term retention backup.
     *
     * @param locationName The location of the database.
     * @param longTermRetentionServerName the String value.
     * @param longTermRetentionDatabaseName the String value.
     * @param backupName The backup name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the LongTermRetentionBackupInner object if successful.
     */
    public LongTermRetentionBackupInner get(@NonNull String locationName, @NonNull String longTermRetentionServerName, @NonNull String longTermRetentionDatabaseName, @NonNull String backupName) {
        return getAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName).blockingGet();
    }

    /**
     * Gets a long term retention backup.
     *
     * @param locationName The location of the database.
     * @param longTermRetentionServerName the String value.
     * @param longTermRetentionDatabaseName the String value.
     * @param backupName The backup name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<LongTermRetentionBackupInner> getAsync(@NonNull String locationName, @NonNull String longTermRetentionServerName, @NonNull String longTermRetentionDatabaseName, @NonNull String backupName, ServiceCallback<LongTermRetentionBackupInner> serviceCallback) {
        return ServiceFuture.fromBody(getAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName), serviceCallback);
    }

    /**
     * Gets a long term retention backup.
     *
     * @param locationName The location of the database.
     * @param longTermRetentionServerName the String value.
     * @param longTermRetentionDatabaseName the String value.
     * @param backupName The backup name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<BodyResponse<LongTermRetentionBackupInner>> getWithRestResponseAsync(@NonNull String locationName, @NonNull String longTermRetentionServerName, @NonNull String longTermRetentionDatabaseName, @NonNull String backupName) {
        if (locationName == null) {
            throw new IllegalArgumentException("Parameter locationName is required and cannot be null.");
        }
        if (longTermRetentionServerName == null) {
            throw new IllegalArgumentException("Parameter longTermRetentionServerName is required and cannot be null.");
        }
        if (longTermRetentionDatabaseName == null) {
            throw new IllegalArgumentException("Parameter longTermRetentionDatabaseName is required and cannot be null.");
        }
        if (backupName == null) {
            throw new IllegalArgumentException("Parameter backupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2017-03-01-preview";
        return service.get(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage());
    }

    /**
     * Gets a long term retention backup.
     *
     * @param locationName The location of the database.
     * @param longTermRetentionServerName the String value.
     * @param longTermRetentionDatabaseName the String value.
     * @param backupName The backup name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Maybe<LongTermRetentionBackupInner> getAsync(@NonNull String locationName, @NonNull String longTermRetentionServerName, @NonNull String longTermRetentionDatabaseName, @NonNull String backupName) {
        return getWithRestResponseAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName)
            .flatMapMaybe((BodyResponse<LongTermRetentionBackupInner> res) -> res.body() == null ? Maybe.empty() : Maybe.just(res.body()));
    }

    /**
     * Deletes a long term retention backup.
     *
     * @param locationName The location of the database.
     * @param longTermRetentionServerName the String value.
     * @param longTermRetentionDatabaseName the String value.
     * @param backupName The backup name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void beginDelete(@NonNull String locationName, @NonNull String longTermRetentionServerName, @NonNull String longTermRetentionDatabaseName, @NonNull String backupName) {
        beginDeleteAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName).blockingLast();
    }

    /**
     * Deletes a long term retention backup.
     *
     * @param locationName The location of the database.
     * @param longTermRetentionServerName the String value.
     * @param longTermRetentionDatabaseName the String value.
     * @param backupName The backup name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the ServiceFuture&lt;Void&gt; object.
     */
    public ServiceFuture<Void> beginDeleteAsync(@NonNull String locationName, @NonNull String longTermRetentionServerName, @NonNull String longTermRetentionDatabaseName, @NonNull String backupName, ServiceCallback<Void> serviceCallback) {
        return ServiceFutureUtil.fromLRO(beginDeleteAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName), serviceCallback);
    }

    /**
     * Deletes a long term retention backup.
     *
     * @param locationName The location of the database.
     * @param longTermRetentionServerName the String value.
     * @param longTermRetentionDatabaseName the String value.
     * @param backupName The backup name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    public Observable<OperationStatus<Void>> beginDeleteAsync(@NonNull String locationName, @NonNull String longTermRetentionServerName, @NonNull String longTermRetentionDatabaseName, @NonNull String backupName) {
        if (locationName == null) {
            throw new IllegalArgumentException("Parameter locationName is required and cannot be null.");
        }
        if (longTermRetentionServerName == null) {
            throw new IllegalArgumentException("Parameter longTermRetentionServerName is required and cannot be null.");
        }
        if (longTermRetentionDatabaseName == null) {
            throw new IllegalArgumentException("Parameter longTermRetentionDatabaseName is required and cannot be null.");
        }
        if (backupName == null) {
            throw new IllegalArgumentException("Parameter backupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2017-03-01-preview";
        return service.beginDelete(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage());
    }

    /**
     * Deletes a long term retention backup.
     *
     * @param locationName The location of the database.
     * @param longTermRetentionServerName the String value.
     * @param longTermRetentionDatabaseName the String value.
     * @param backupName The backup name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    public void delete(@NonNull String locationName, @NonNull String longTermRetentionServerName, @NonNull String longTermRetentionDatabaseName, @NonNull String backupName) {
        deleteAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName).blockingAwait();
    }

    /**
     * Deletes a long term retention backup.
     *
     * @param locationName The location of the database.
     * @param longTermRetentionServerName the String value.
     * @param longTermRetentionDatabaseName the String value.
     * @param backupName The backup name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a ServiceFuture which will be completed with the result of the network request.
     */
    public ServiceFuture<Void> deleteAsync(@NonNull String locationName, @NonNull String longTermRetentionServerName, @NonNull String longTermRetentionDatabaseName, @NonNull String backupName, ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromBody(deleteAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName), serviceCallback);
    }

    /**
     * Deletes a long term retention backup.
     *
     * @param locationName The location of the database.
     * @param longTermRetentionServerName the String value.
     * @param longTermRetentionDatabaseName the String value.
     * @param backupName The backup name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Single<VoidResponse> deleteWithRestResponseAsync(@NonNull String locationName, @NonNull String longTermRetentionServerName, @NonNull String longTermRetentionDatabaseName, @NonNull String backupName) {
        if (locationName == null) {
            throw new IllegalArgumentException("Parameter locationName is required and cannot be null.");
        }
        if (longTermRetentionServerName == null) {
            throw new IllegalArgumentException("Parameter longTermRetentionServerName is required and cannot be null.");
        }
        if (longTermRetentionDatabaseName == null) {
            throw new IllegalArgumentException("Parameter longTermRetentionDatabaseName is required and cannot be null.");
        }
        if (backupName == null) {
            throw new IllegalArgumentException("Parameter backupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2017-03-01-preview";
        return service.delete(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage());
    }

    /**
     * Deletes a long term retention backup.
     *
     * @param locationName The location of the database.
     * @param longTermRetentionServerName the String value.
     * @param longTermRetentionDatabaseName the String value.
     * @param backupName The backup name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Single which performs the network request upon subscription.
     */
    public Completable deleteAsync(@NonNull String locationName, @NonNull String longTermRetentionServerName, @NonNull String longTermRetentionDatabaseName, @NonNull String backupName) {
        return deleteWithRestResponseAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName)
            .toCompletable();
    }

    /**
     * Deletes a long term retention backup. (resume watch).
     *
     * @param operationDescription The OperationDescription object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable for the request.
     */
    public Observable<OperationStatus<Void>> resumeDelete(OperationDescription operationDescription) {
        if (operationDescription == null) {
            throw new IllegalArgumentException("Parameter operationDescription is required and cannot be null.");
        }
        return service.resumeDelete(operationDescription);
    }

    /**
     * Lists all long term retention backups for a database.
     *
     * @param locationName The location of the database.
     * @param longTermRetentionServerName the String value.
     * @param longTermRetentionDatabaseName the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;LongTermRetentionBackupInner&gt; object if successful.
     */
    public PagedList<LongTermRetentionBackupInner> listByDatabase(@NonNull String locationName, @NonNull String longTermRetentionServerName, @NonNull String longTermRetentionDatabaseName) {
        Page<LongTermRetentionBackupInner> response = listByDatabaseSinglePageAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName).blockingGet();
        return new PagedList<LongTermRetentionBackupInner>(response) {
            @Override
            public Page<LongTermRetentionBackupInner> nextPage(String nextPageLink) {
                return listByDatabaseNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Lists all long term retention backups for a database.
     *
     * @param locationName The location of the database.
     * @param longTermRetentionServerName the String value.
     * @param longTermRetentionDatabaseName the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;LongTermRetentionBackupInner&gt; object.
     */
    public Observable<Page<LongTermRetentionBackupInner>> listByDatabaseAsync(@NonNull String locationName, @NonNull String longTermRetentionServerName, @NonNull String longTermRetentionDatabaseName) {
        return listByDatabaseSinglePageAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName)
            .toObservable()
            .concatMap((Page<LongTermRetentionBackupInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listByDatabaseNextAsync(nextPageLink));
            });
    }

    /**
     * Lists all long term retention backups for a database.
     *
     * @param locationName The location of the database.
     * @param longTermRetentionServerName the String value.
     * @param longTermRetentionDatabaseName the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;LongTermRetentionBackupInner&gt;&gt; object if successful.
     */
    public Single<Page<LongTermRetentionBackupInner>> listByDatabaseSinglePageAsync(@NonNull String locationName, @NonNull String longTermRetentionServerName, @NonNull String longTermRetentionDatabaseName) {
        if (locationName == null) {
            throw new IllegalArgumentException("Parameter locationName is required and cannot be null.");
        }
        if (longTermRetentionServerName == null) {
            throw new IllegalArgumentException("Parameter longTermRetentionServerName is required and cannot be null.");
        }
        if (longTermRetentionDatabaseName == null) {
            throw new IllegalArgumentException("Parameter longTermRetentionDatabaseName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2017-03-01-preview";
        final Boolean onlyLatestPerDatabase = null;
        final LongTermRetentionDatabaseState databaseState = null;
        return service.listByDatabase(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, this.client.subscriptionId(), onlyLatestPerDatabase, databaseState, apiVersion, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl1<LongTermRetentionBackupInner>> res) -> res.body());
    }

    /**
     * Lists all long term retention backups for a database.
     *
     * @param locationName The location of the database.
     * @param longTermRetentionServerName the String value.
     * @param longTermRetentionDatabaseName the String value.
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database.
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. Possible values include: 'All', 'Live', 'Deleted'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;LongTermRetentionBackupInner&gt; object if successful.
     */
    public PagedList<LongTermRetentionBackupInner> listByDatabase(@NonNull String locationName, @NonNull String longTermRetentionServerName, @NonNull String longTermRetentionDatabaseName, Boolean onlyLatestPerDatabase, LongTermRetentionDatabaseState databaseState) {
        Page<LongTermRetentionBackupInner> response = listByDatabaseSinglePageAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, onlyLatestPerDatabase, databaseState).blockingGet();
        return new PagedList<LongTermRetentionBackupInner>(response) {
            @Override
            public Page<LongTermRetentionBackupInner> nextPage(String nextPageLink) {
                return listByDatabaseNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Lists all long term retention backups for a database.
     *
     * @param locationName The location of the database.
     * @param longTermRetentionServerName the String value.
     * @param longTermRetentionDatabaseName the String value.
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database.
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. Possible values include: 'All', 'Live', 'Deleted'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;LongTermRetentionBackupInner&gt; object.
     */
    public Observable<Page<LongTermRetentionBackupInner>> listByDatabaseAsync(@NonNull String locationName, @NonNull String longTermRetentionServerName, @NonNull String longTermRetentionDatabaseName, Boolean onlyLatestPerDatabase, LongTermRetentionDatabaseState databaseState) {
        return listByDatabaseSinglePageAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, onlyLatestPerDatabase, databaseState)
            .toObservable()
            .concatMap((Page<LongTermRetentionBackupInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listByDatabaseNextAsync(nextPageLink));
            });
    }

    /**
     * Lists all long term retention backups for a database.
     *
     * @param locationName The location of the database.
     * @param longTermRetentionServerName the String value.
     * @param longTermRetentionDatabaseName the String value.
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database.
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. Possible values include: 'All', 'Live', 'Deleted'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;LongTermRetentionBackupInner&gt;&gt; object if successful.
     */
    public Single<Page<LongTermRetentionBackupInner>> listByDatabaseSinglePageAsync(@NonNull String locationName, @NonNull String longTermRetentionServerName, @NonNull String longTermRetentionDatabaseName, Boolean onlyLatestPerDatabase, LongTermRetentionDatabaseState databaseState) {
        if (locationName == null) {
            throw new IllegalArgumentException("Parameter locationName is required and cannot be null.");
        }
        if (longTermRetentionServerName == null) {
            throw new IllegalArgumentException("Parameter longTermRetentionServerName is required and cannot be null.");
        }
        if (longTermRetentionDatabaseName == null) {
            throw new IllegalArgumentException("Parameter longTermRetentionDatabaseName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2017-03-01-preview";
        return service.listByDatabase(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, this.client.subscriptionId(), onlyLatestPerDatabase, databaseState, apiVersion, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl1<LongTermRetentionBackupInner>> res) -> res.body());
    }

    /**
     * Lists the long term retention backups for a given location.
     *
     * @param locationName The location of the database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;LongTermRetentionBackupInner&gt; object if successful.
     */
    public PagedList<LongTermRetentionBackupInner> listByLocation(@NonNull String locationName) {
        Page<LongTermRetentionBackupInner> response = listByLocationSinglePageAsync(locationName).blockingGet();
        return new PagedList<LongTermRetentionBackupInner>(response) {
            @Override
            public Page<LongTermRetentionBackupInner> nextPage(String nextPageLink) {
                return listByLocationNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Lists the long term retention backups for a given location.
     *
     * @param locationName The location of the database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;LongTermRetentionBackupInner&gt; object.
     */
    public Observable<Page<LongTermRetentionBackupInner>> listByLocationAsync(@NonNull String locationName) {
        return listByLocationSinglePageAsync(locationName)
            .toObservable()
            .concatMap((Page<LongTermRetentionBackupInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listByLocationNextAsync(nextPageLink));
            });
    }

    /**
     * Lists the long term retention backups for a given location.
     *
     * @param locationName The location of the database.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;LongTermRetentionBackupInner&gt;&gt; object if successful.
     */
    public Single<Page<LongTermRetentionBackupInner>> listByLocationSinglePageAsync(@NonNull String locationName) {
        if (locationName == null) {
            throw new IllegalArgumentException("Parameter locationName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2017-03-01-preview";
        final Boolean onlyLatestPerDatabase = null;
        final LongTermRetentionDatabaseState databaseState = null;
        return service.listByLocation(locationName, this.client.subscriptionId(), onlyLatestPerDatabase, databaseState, apiVersion, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl1<LongTermRetentionBackupInner>> res) -> res.body());
    }

    /**
     * Lists the long term retention backups for a given location.
     *
     * @param locationName The location of the database.
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database.
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. Possible values include: 'All', 'Live', 'Deleted'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;LongTermRetentionBackupInner&gt; object if successful.
     */
    public PagedList<LongTermRetentionBackupInner> listByLocation(@NonNull String locationName, Boolean onlyLatestPerDatabase, LongTermRetentionDatabaseState databaseState) {
        Page<LongTermRetentionBackupInner> response = listByLocationSinglePageAsync(locationName, onlyLatestPerDatabase, databaseState).blockingGet();
        return new PagedList<LongTermRetentionBackupInner>(response) {
            @Override
            public Page<LongTermRetentionBackupInner> nextPage(String nextPageLink) {
                return listByLocationNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Lists the long term retention backups for a given location.
     *
     * @param locationName The location of the database.
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database.
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. Possible values include: 'All', 'Live', 'Deleted'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;LongTermRetentionBackupInner&gt; object.
     */
    public Observable<Page<LongTermRetentionBackupInner>> listByLocationAsync(@NonNull String locationName, Boolean onlyLatestPerDatabase, LongTermRetentionDatabaseState databaseState) {
        return listByLocationSinglePageAsync(locationName, onlyLatestPerDatabase, databaseState)
            .toObservable()
            .concatMap((Page<LongTermRetentionBackupInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listByLocationNextAsync(nextPageLink));
            });
    }

    /**
     * Lists the long term retention backups for a given location.
     *
     * @param locationName The location of the database.
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database.
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. Possible values include: 'All', 'Live', 'Deleted'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;LongTermRetentionBackupInner&gt;&gt; object if successful.
     */
    public Single<Page<LongTermRetentionBackupInner>> listByLocationSinglePageAsync(@NonNull String locationName, Boolean onlyLatestPerDatabase, LongTermRetentionDatabaseState databaseState) {
        if (locationName == null) {
            throw new IllegalArgumentException("Parameter locationName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2017-03-01-preview";
        return service.listByLocation(locationName, this.client.subscriptionId(), onlyLatestPerDatabase, databaseState, apiVersion, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl1<LongTermRetentionBackupInner>> res) -> res.body());
    }

    /**
     * Lists the long term retention backups for a given server.
     *
     * @param locationName The location of the database.
     * @param longTermRetentionServerName the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;LongTermRetentionBackupInner&gt; object if successful.
     */
    public PagedList<LongTermRetentionBackupInner> listByServer(@NonNull String locationName, @NonNull String longTermRetentionServerName) {
        Page<LongTermRetentionBackupInner> response = listByServerSinglePageAsync(locationName, longTermRetentionServerName).blockingGet();
        return new PagedList<LongTermRetentionBackupInner>(response) {
            @Override
            public Page<LongTermRetentionBackupInner> nextPage(String nextPageLink) {
                return listByServerNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Lists the long term retention backups for a given server.
     *
     * @param locationName The location of the database.
     * @param longTermRetentionServerName the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;LongTermRetentionBackupInner&gt; object.
     */
    public Observable<Page<LongTermRetentionBackupInner>> listByServerAsync(@NonNull String locationName, @NonNull String longTermRetentionServerName) {
        return listByServerSinglePageAsync(locationName, longTermRetentionServerName)
            .toObservable()
            .concatMap((Page<LongTermRetentionBackupInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listByServerNextAsync(nextPageLink));
            });
    }

    /**
     * Lists the long term retention backups for a given server.
     *
     * @param locationName The location of the database.
     * @param longTermRetentionServerName the String value.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;LongTermRetentionBackupInner&gt;&gt; object if successful.
     */
    public Single<Page<LongTermRetentionBackupInner>> listByServerSinglePageAsync(@NonNull String locationName, @NonNull String longTermRetentionServerName) {
        if (locationName == null) {
            throw new IllegalArgumentException("Parameter locationName is required and cannot be null.");
        }
        if (longTermRetentionServerName == null) {
            throw new IllegalArgumentException("Parameter longTermRetentionServerName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2017-03-01-preview";
        final Boolean onlyLatestPerDatabase = null;
        final LongTermRetentionDatabaseState databaseState = null;
        return service.listByServer(locationName, longTermRetentionServerName, this.client.subscriptionId(), onlyLatestPerDatabase, databaseState, apiVersion, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl1<LongTermRetentionBackupInner>> res) -> res.body());
    }

    /**
     * Lists the long term retention backups for a given server.
     *
     * @param locationName The location of the database.
     * @param longTermRetentionServerName the String value.
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database.
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. Possible values include: 'All', 'Live', 'Deleted'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;LongTermRetentionBackupInner&gt; object if successful.
     */
    public PagedList<LongTermRetentionBackupInner> listByServer(@NonNull String locationName, @NonNull String longTermRetentionServerName, Boolean onlyLatestPerDatabase, LongTermRetentionDatabaseState databaseState) {
        Page<LongTermRetentionBackupInner> response = listByServerSinglePageAsync(locationName, longTermRetentionServerName, onlyLatestPerDatabase, databaseState).blockingGet();
        return new PagedList<LongTermRetentionBackupInner>(response) {
            @Override
            public Page<LongTermRetentionBackupInner> nextPage(String nextPageLink) {
                return listByServerNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Lists the long term retention backups for a given server.
     *
     * @param locationName The location of the database.
     * @param longTermRetentionServerName the String value.
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database.
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. Possible values include: 'All', 'Live', 'Deleted'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;LongTermRetentionBackupInner&gt; object.
     */
    public Observable<Page<LongTermRetentionBackupInner>> listByServerAsync(@NonNull String locationName, @NonNull String longTermRetentionServerName, Boolean onlyLatestPerDatabase, LongTermRetentionDatabaseState databaseState) {
        return listByServerSinglePageAsync(locationName, longTermRetentionServerName, onlyLatestPerDatabase, databaseState)
            .toObservable()
            .concatMap((Page<LongTermRetentionBackupInner> page) -> {
                String nextPageLink = page.nextPageLink();
                if (nextPageLink == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listByServerNextAsync(nextPageLink));
            });
    }

    /**
     * Lists the long term retention backups for a given server.
     *
     * @param locationName The location of the database.
     * @param longTermRetentionServerName the String value.
     * @param onlyLatestPerDatabase Whether or not to only get the latest backup for each database.
     * @param databaseState Whether to query against just live databases, just deleted databases, or all databases. Possible values include: 'All', 'Live', 'Deleted'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;LongTermRetentionBackupInner&gt;&gt; object if successful.
     */
    public Single<Page<LongTermRetentionBackupInner>> listByServerSinglePageAsync(@NonNull String locationName, @NonNull String longTermRetentionServerName, Boolean onlyLatestPerDatabase, LongTermRetentionDatabaseState databaseState) {
        if (locationName == null) {
            throw new IllegalArgumentException("Parameter locationName is required and cannot be null.");
        }
        if (longTermRetentionServerName == null) {
            throw new IllegalArgumentException("Parameter longTermRetentionServerName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2017-03-01-preview";
        return service.listByServer(locationName, longTermRetentionServerName, this.client.subscriptionId(), onlyLatestPerDatabase, databaseState, apiVersion, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl1<LongTermRetentionBackupInner>> res) -> res.body());
    }

    /**
     * Lists all long term retention backups for a database.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;LongTermRetentionBackupInner&gt; object if successful.
     */
    public PagedList<LongTermRetentionBackupInner> listByDatabaseNext(@NonNull String nextPageLink) {
        Page<LongTermRetentionBackupInner> response = listByDatabaseNextSinglePageAsync(nextPageLink).blockingGet();
        return new PagedList<LongTermRetentionBackupInner>(response) {
            @Override
            public Page<LongTermRetentionBackupInner> nextPage(String nextPageLink) {
                return listByDatabaseNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Lists all long term retention backups for a database.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;LongTermRetentionBackupInner&gt; object.
     */
    public Observable<Page<LongTermRetentionBackupInner>> listByDatabaseNextAsync(@NonNull String nextPageLink) {
        return listByDatabaseNextSinglePageAsync(nextPageLink)
            .toObservable()
            .concatMap((Page<LongTermRetentionBackupInner> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listByDatabaseNextAsync(nextPageLink1));
            });
    }

    /**
     * Lists all long term retention backups for a database.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;LongTermRetentionBackupInner&gt;&gt; object if successful.
     */
    public Single<Page<LongTermRetentionBackupInner>> listByDatabaseNextSinglePageAsync(@NonNull String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByDatabaseNext(nextUrl, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl1<LongTermRetentionBackupInner>> res) -> res.body());
    }

    /**
     * Lists the long term retention backups for a given location.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;LongTermRetentionBackupInner&gt; object if successful.
     */
    public PagedList<LongTermRetentionBackupInner> listByLocationNext(@NonNull String nextPageLink) {
        Page<LongTermRetentionBackupInner> response = listByLocationNextSinglePageAsync(nextPageLink).blockingGet();
        return new PagedList<LongTermRetentionBackupInner>(response) {
            @Override
            public Page<LongTermRetentionBackupInner> nextPage(String nextPageLink) {
                return listByLocationNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Lists the long term retention backups for a given location.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;LongTermRetentionBackupInner&gt; object.
     */
    public Observable<Page<LongTermRetentionBackupInner>> listByLocationNextAsync(@NonNull String nextPageLink) {
        return listByLocationNextSinglePageAsync(nextPageLink)
            .toObservable()
            .concatMap((Page<LongTermRetentionBackupInner> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listByLocationNextAsync(nextPageLink1));
            });
    }

    /**
     * Lists the long term retention backups for a given location.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;LongTermRetentionBackupInner&gt;&gt; object if successful.
     */
    public Single<Page<LongTermRetentionBackupInner>> listByLocationNextSinglePageAsync(@NonNull String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByLocationNext(nextUrl, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl1<LongTermRetentionBackupInner>> res) -> res.body());
    }

    /**
     * Lists the long term retention backups for a given server.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws CloudException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the PagedList&lt;LongTermRetentionBackupInner&gt; object if successful.
     */
    public PagedList<LongTermRetentionBackupInner> listByServerNext(@NonNull String nextPageLink) {
        Page<LongTermRetentionBackupInner> response = listByServerNextSinglePageAsync(nextPageLink).blockingGet();
        return new PagedList<LongTermRetentionBackupInner>(response) {
            @Override
            public Page<LongTermRetentionBackupInner> nextPage(String nextPageLink) {
                return listByServerNextSinglePageAsync(nextPageLink).blockingGet();
            }
        };
    }

    /**
     * Lists the long term retention backups for a given server.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;LongTermRetentionBackupInner&gt; object.
     */
    public Observable<Page<LongTermRetentionBackupInner>> listByServerNextAsync(@NonNull String nextPageLink) {
        return listByServerNextSinglePageAsync(nextPageLink)
            .toObservable()
            .concatMap((Page<LongTermRetentionBackupInner> page) -> {
                String nextPageLink1 = page.nextPageLink();
                if (nextPageLink1 == null) {
                    return Observable.just(page);
                }
                return Observable.just(page).concatWith(listByServerNextAsync(nextPageLink1));
            });
    }

    /**
     * Lists the long term retention backups for a given server.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the Single&lt;Page&lt;LongTermRetentionBackupInner&gt;&gt; object if successful.
     */
    public Single<Page<LongTermRetentionBackupInner>> listByServerNextSinglePageAsync(@NonNull String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByServerNext(nextUrl, this.client.acceptLanguage())
            .map((BodyResponse<PageImpl1<LongTermRetentionBackupInner>> res) -> res.body());
    }
}
