// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.storage;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/**
 * The StorageAccountUpdateParameters model.
 */
@JsonFlatten
@Fluent
public class StorageAccountUpdateParameters {
    /*
     * The SKU of the storage account.
     */
    @JsonProperty(value = "sku")
    private Sku sku;

    /*
     * Gets or sets a list of key value pairs that describe the resource. These
     * tags can be used in viewing and grouping this resource (across resource
     * groups). A maximum of 15 tags can be provided for a resource. Each tag
     * must have a key no greater in length than 128 characters and a value no
     * greater in length than 256 characters.
     */
    @JsonProperty(value = "tags")
    private Map<String, String> tags;

    /*
     * Identity for the resource.
     */
    @JsonProperty(value = "identity")
    private Identity identity;

    /*
     * Indicates the type of storage account.
     */
    @JsonProperty(value = "kind")
    private Kind kind;

    /*
     * The custom domain assigned to this storage account. This can be set via
     * Update.
     */
    @JsonProperty(value = "properties.customDomain")
    private CustomDomain customDomain;

    /*
     * The encryption settings on the storage account.
     */
    @JsonProperty(value = "properties.encryption")
    private Encryption encryption;

    /*
     * Required for storage accounts where kind = BlobStorage. The access tier
     * used for billing.
     */
    @JsonProperty(value = "properties.accessTier")
    private AccessTier accessTier;

    /*
     * Settings for Azure Files identity based authentication.
     */
    @JsonProperty(value = "properties.azureFilesIdentityBasedAuthentication")
    private AzureFilesIdentityBasedAuthentication azureFilesIdentityBasedAuthentication;

    /*
     * Allows https traffic only to storage service if sets to true.
     */
    @JsonProperty(value = "properties.supportsHttpsTrafficOnly")
    private Boolean enableHttpsTrafficOnly;

    /*
     * Network rule set
     */
    @JsonProperty(value = "properties.networkAcls")
    private NetworkRuleSet networkRuleSet;

    /*
     * Allow large file shares if sets to Enabled. It cannot be disabled once
     * it is enabled.
     */
    @JsonProperty(value = "properties.largeFileSharesState")
    private LargeFileSharesState largeFileSharesState;

    /*
     * Routing preference defines the type of network, either microsoft or
     * internet routing to be used to deliver the user data, the default option
     * is microsoft routing
     */
    @JsonProperty(value = "properties.routingPreference")
    private RoutingPreference routingPreference;

    /**
     * Get the sku property: The SKU of the storage account.
     * 
     * @return the sku value.
     */
    public Sku getSku() {
        return this.sku;
    }

    /**
     * Set the sku property: The SKU of the storage account.
     * 
     * @param sku the sku value to set.
     * @return the StorageAccountUpdateParameters object itself.
     */
    public StorageAccountUpdateParameters setSku(Sku sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the tags property: Gets or sets a list of key value pairs that
     * describe the resource. These tags can be used in viewing and grouping
     * this resource (across resource groups). A maximum of 15 tags can be
     * provided for a resource. Each tag must have a key no greater in length
     * than 128 characters and a value no greater in length than 256
     * characters.
     * 
     * @return the tags value.
     */
    public Map<String, String> getTags() {
        return this.tags;
    }

    /**
     * Set the tags property: Gets or sets a list of key value pairs that
     * describe the resource. These tags can be used in viewing and grouping
     * this resource (across resource groups). A maximum of 15 tags can be
     * provided for a resource. Each tag must have a key no greater in length
     * than 128 characters and a value no greater in length than 256
     * characters.
     * 
     * @param tags the tags value to set.
     * @return the StorageAccountUpdateParameters object itself.
     */
    public StorageAccountUpdateParameters setTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the identity property: Identity for the resource.
     * 
     * @return the identity value.
     */
    public Identity getIdentity() {
        return this.identity;
    }

    /**
     * Set the identity property: Identity for the resource.
     * 
     * @param identity the identity value to set.
     * @return the StorageAccountUpdateParameters object itself.
     */
    public StorageAccountUpdateParameters setIdentity(Identity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the kind property: Indicates the type of storage account.
     * 
     * @return the kind value.
     */
    public Kind getKind() {
        return this.kind;
    }

    /**
     * Set the kind property: Indicates the type of storage account.
     * 
     * @param kind the kind value to set.
     * @return the StorageAccountUpdateParameters object itself.
     */
    public StorageAccountUpdateParameters setKind(Kind kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the customDomain property: The custom domain assigned to this
     * storage account. This can be set via Update.
     * 
     * @return the customDomain value.
     */
    public CustomDomain getCustomDomain() {
        return this.customDomain;
    }

    /**
     * Set the customDomain property: The custom domain assigned to this
     * storage account. This can be set via Update.
     * 
     * @param customDomain the customDomain value to set.
     * @return the StorageAccountUpdateParameters object itself.
     */
    public StorageAccountUpdateParameters setCustomDomain(CustomDomain customDomain) {
        this.customDomain = customDomain;
        return this;
    }

    /**
     * Get the encryption property: The encryption settings on the storage
     * account.
     * 
     * @return the encryption value.
     */
    public Encryption getEncryption() {
        return this.encryption;
    }

    /**
     * Set the encryption property: The encryption settings on the storage
     * account.
     * 
     * @param encryption the encryption value to set.
     * @return the StorageAccountUpdateParameters object itself.
     */
    public StorageAccountUpdateParameters setEncryption(Encryption encryption) {
        this.encryption = encryption;
        return this;
    }

    /**
     * Get the accessTier property: Required for storage accounts where kind =
     * BlobStorage. The access tier used for billing.
     * 
     * @return the accessTier value.
     */
    public AccessTier getAccessTier() {
        return this.accessTier;
    }

    /**
     * Set the accessTier property: Required for storage accounts where kind =
     * BlobStorage. The access tier used for billing.
     * 
     * @param accessTier the accessTier value to set.
     * @return the StorageAccountUpdateParameters object itself.
     */
    public StorageAccountUpdateParameters setAccessTier(AccessTier accessTier) {
        this.accessTier = accessTier;
        return this;
    }

    /**
     * Get the azureFilesIdentityBasedAuthentication property: Settings for
     * Azure Files identity based authentication.
     * 
     * @return the azureFilesIdentityBasedAuthentication value.
     */
    public AzureFilesIdentityBasedAuthentication getAzureFilesIdentityBasedAuthentication() {
        return this.azureFilesIdentityBasedAuthentication;
    }

    /**
     * Set the azureFilesIdentityBasedAuthentication property: Settings for
     * Azure Files identity based authentication.
     * 
     * @param azureFilesIdentityBasedAuthentication the
     * azureFilesIdentityBasedAuthentication value to set.
     * @return the StorageAccountUpdateParameters object itself.
     */
    public StorageAccountUpdateParameters setAzureFilesIdentityBasedAuthentication(AzureFilesIdentityBasedAuthentication azureFilesIdentityBasedAuthentication) {
        this.azureFilesIdentityBasedAuthentication = azureFilesIdentityBasedAuthentication;
        return this;
    }

    /**
     * Get the enableHttpsTrafficOnly property: Allows https traffic only to
     * storage service if sets to true.
     * 
     * @return the enableHttpsTrafficOnly value.
     */
    public Boolean isEnableHttpsTrafficOnly() {
        return this.enableHttpsTrafficOnly;
    }

    /**
     * Set the enableHttpsTrafficOnly property: Allows https traffic only to
     * storage service if sets to true.
     * 
     * @param enableHttpsTrafficOnly the enableHttpsTrafficOnly value to set.
     * @return the StorageAccountUpdateParameters object itself.
     */
    public StorageAccountUpdateParameters setEnableHttpsTrafficOnly(Boolean enableHttpsTrafficOnly) {
        this.enableHttpsTrafficOnly = enableHttpsTrafficOnly;
        return this;
    }

    /**
     * Get the networkRuleSet property: Network rule set.
     * 
     * @return the networkRuleSet value.
     */
    public NetworkRuleSet getNetworkRuleSet() {
        return this.networkRuleSet;
    }

    /**
     * Set the networkRuleSet property: Network rule set.
     * 
     * @param networkRuleSet the networkRuleSet value to set.
     * @return the StorageAccountUpdateParameters object itself.
     */
    public StorageAccountUpdateParameters setNetworkRuleSet(NetworkRuleSet networkRuleSet) {
        this.networkRuleSet = networkRuleSet;
        return this;
    }

    /**
     * Get the largeFileSharesState property: Allow large file shares if sets
     * to Enabled. It cannot be disabled once it is enabled.
     * 
     * @return the largeFileSharesState value.
     */
    public LargeFileSharesState getLargeFileSharesState() {
        return this.largeFileSharesState;
    }

    /**
     * Set the largeFileSharesState property: Allow large file shares if sets
     * to Enabled. It cannot be disabled once it is enabled.
     * 
     * @param largeFileSharesState the largeFileSharesState value to set.
     * @return the StorageAccountUpdateParameters object itself.
     */
    public StorageAccountUpdateParameters setLargeFileSharesState(LargeFileSharesState largeFileSharesState) {
        this.largeFileSharesState = largeFileSharesState;
        return this;
    }

    /**
     * Get the routingPreference property: Routing preference defines the type
     * of network, either microsoft or internet routing to be used to deliver
     * the user data, the default option is microsoft routing.
     * 
     * @return the routingPreference value.
     */
    public RoutingPreference getRoutingPreference() {
        return this.routingPreference;
    }

    /**
     * Set the routingPreference property: Routing preference defines the type
     * of network, either microsoft or internet routing to be used to deliver
     * the user data, the default option is microsoft routing.
     * 
     * @param routingPreference the routingPreference value to set.
     * @return the StorageAccountUpdateParameters object itself.
     */
    public StorageAccountUpdateParameters setRoutingPreference(RoutingPreference routingPreference) {
        this.routingPreference = routingPreference;
        return this;
    }
}
