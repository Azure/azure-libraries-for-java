// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.management.storage.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.management.storage.AccessTier;
import com.azure.management.storage.AccountStatus;
import com.azure.management.storage.AzureFilesIdentityBasedAuthentication;
import com.azure.management.storage.CustomDomain;
import com.azure.management.storage.Encryption;
import com.azure.management.storage.Endpoints;
import com.azure.management.storage.GeoReplicationStats;
import com.azure.management.storage.Identity;
import com.azure.management.storage.Kind;
import com.azure.management.storage.LargeFileSharesState;
import com.azure.management.storage.NetworkRuleSet;
import com.azure.management.storage.ProvisioningState;
import com.azure.management.storage.RoutingPreference;
import com.azure.management.storage.Sku;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * The StorageAccount model.
 */
@JsonFlatten
@Fluent
public class StorageAccountInner extends Resource {
    /*
     * The SKU of the storage account.
     */
    @JsonProperty(value = "sku", access = JsonProperty.Access.WRITE_ONLY)
    private Sku sku;

    /*
     * Indicates the type of storage account.
     */
    @JsonProperty(value = "kind", access = JsonProperty.Access.WRITE_ONLY)
    private Kind kind;

    /*
     * Identity for the resource.
     */
    @JsonProperty(value = "identity")
    private Identity identity;

    /*
     * Gets the status of the storage account at the time the operation was
     * called.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /*
     * The URIs that are used to perform a retrieval of a public blob, queue,
     * table, web or dfs object.
     */
    @JsonProperty(value = "properties.primaryEndpoints", access = JsonProperty.Access.WRITE_ONLY)
    private Endpoints primaryEndpoints;

    /*
     * Gets the location of the primary data center for the storage account.
     */
    @JsonProperty(value = "properties.primaryLocation", access = JsonProperty.Access.WRITE_ONLY)
    private String primaryLocation;

    /*
     * Gets the status indicating whether the primary location of the storage
     * account is available or unavailable.
     */
    @JsonProperty(value = "properties.statusOfPrimary", access = JsonProperty.Access.WRITE_ONLY)
    private AccountStatus statusOfPrimary;

    /*
     * Gets the timestamp of the most recent instance of a failover to the
     * secondary location. Only the most recent timestamp is retained. This
     * element is not returned if there has never been a failover instance.
     * Only available if the accountType is Standard_GRS or Standard_RAGRS.
     */
    @JsonProperty(value = "properties.lastGeoFailoverTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastGeoFailoverTime;

    /*
     * Gets the location of the geo-replicated secondary for the storage
     * account. Only available if the accountType is Standard_GRS or
     * Standard_RAGRS.
     */
    @JsonProperty(value = "properties.secondaryLocation", access = JsonProperty.Access.WRITE_ONLY)
    private String secondaryLocation;

    /*
     * Gets the status indicating whether the primary location of the storage
     * account is available or unavailable.
     */
    @JsonProperty(value = "properties.statusOfSecondary", access = JsonProperty.Access.WRITE_ONLY)
    private AccountStatus statusOfSecondary;

    /*
     * Gets the creation date and time of the storage account in UTC.
     */
    @JsonProperty(value = "properties.creationTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime creationTime;

    /*
     * The custom domain assigned to this storage account. This can be set via
     * Update.
     */
    @JsonProperty(value = "properties.customDomain", access = JsonProperty.Access.WRITE_ONLY)
    private CustomDomain customDomain;

    /*
     * The URIs that are used to perform a retrieval of a public blob, queue,
     * table, web or dfs object.
     */
    @JsonProperty(value = "properties.secondaryEndpoints", access = JsonProperty.Access.WRITE_ONLY)
    private Endpoints secondaryEndpoints;

    /*
     * The encryption settings on the storage account.
     */
    @JsonProperty(value = "properties.encryption", access = JsonProperty.Access.WRITE_ONLY)
    private Encryption encryption;

    /*
     * Required for storage accounts where kind = BlobStorage. The access tier
     * used for billing.
     */
    @JsonProperty(value = "properties.accessTier", access = JsonProperty.Access.WRITE_ONLY)
    private AccessTier accessTier;

    /*
     * Settings for Azure Files identity based authentication.
     */
    @JsonProperty(value = "properties.azureFilesIdentityBasedAuthentication")
    private AzureFilesIdentityBasedAuthentication azureFilesIdentityBasedAuthentication;

    /*
     * Allows https traffic only to storage service if sets to true.
     */
    @JsonProperty(value = "properties.supportsHttpsTrafficOnly")
    private Boolean enableHttpsTrafficOnly;

    /*
     * Network rule set
     */
    @JsonProperty(value = "properties.networkAcls", access = JsonProperty.Access.WRITE_ONLY)
    private NetworkRuleSet networkRuleSet;

    /*
     * Account HierarchicalNamespace enabled if sets to true.
     */
    @JsonProperty(value = "properties.isHnsEnabled")
    private Boolean isHnsEnabled;

    /*
     * Statistics related to replication for storage account's Blob, Table,
     * Queue and File services. It is only available when geo-redundant
     * replication is enabled for the storage account.
     */
    @JsonProperty(value = "properties.geoReplicationStats", access = JsonProperty.Access.WRITE_ONLY)
    private GeoReplicationStats geoReplicationStats;

    /*
     * If the failover is in progress, the value will be true, otherwise, it
     * will be null.
     */
    @JsonProperty(value = "properties.failoverInProgress", access = JsonProperty.Access.WRITE_ONLY)
    private Boolean failoverInProgress;

    /*
     * Allow large file shares if sets to Enabled. It cannot be disabled once
     * it is enabled.
     */
    @JsonProperty(value = "properties.largeFileSharesState")
    private LargeFileSharesState largeFileSharesState;

    /*
     * List of private endpoint connection associated with the specified
     * storage account
     */
    @JsonProperty(value = "properties.privateEndpointConnections", access = JsonProperty.Access.WRITE_ONLY)
    private List<PrivateEndpointConnectionInner> privateEndpointConnections;

    /*
     * Routing preference defines the type of network, either microsoft or
     * internet routing to be used to deliver the user data, the default option
     * is microsoft routing
     */
    @JsonProperty(value = "properties.routingPreference")
    private RoutingPreference routingPreference;

    /*
     * Blob restore status.
     */
    @JsonProperty(value = "properties.blobRestoreStatus", access = JsonProperty.Access.WRITE_ONLY)
    private BlobRestoreStatusInner blobRestoreStatus;

    /**
     * Get the sku property: The SKU of the storage account.
     * 
     * @return the sku value.
     */
    public Sku getSku() {
        return this.sku;
    }

    /**
     * Get the kind property: Indicates the type of storage account.
     * 
     * @return the kind value.
     */
    public Kind getKind() {
        return this.kind;
    }

    /**
     * Get the identity property: Identity for the resource.
     * 
     * @return the identity value.
     */
    public Identity getIdentity() {
        return this.identity;
    }

    /**
     * Set the identity property: Identity for the resource.
     * 
     * @param identity the identity value to set.
     * @return the StorageAccountInner object itself.
     */
    public StorageAccountInner setIdentity(Identity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the provisioningState property: Gets the status of the storage
     * account at the time the operation was called.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState getProvisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the primaryEndpoints property: The URIs that are used to perform a
     * retrieval of a public blob, queue, table, web or dfs object.
     * 
     * @return the primaryEndpoints value.
     */
    public Endpoints getPrimaryEndpoints() {
        return this.primaryEndpoints;
    }

    /**
     * Get the primaryLocation property: Gets the location of the primary data
     * center for the storage account.
     * 
     * @return the primaryLocation value.
     */
    public String getPrimaryLocation() {
        return this.primaryLocation;
    }

    /**
     * Get the statusOfPrimary property: Gets the status indicating whether the
     * primary location of the storage account is available or unavailable.
     * 
     * @return the statusOfPrimary value.
     */
    public AccountStatus getStatusOfPrimary() {
        return this.statusOfPrimary;
    }

    /**
     * Get the lastGeoFailoverTime property: Gets the timestamp of the most
     * recent instance of a failover to the secondary location. Only the most
     * recent timestamp is retained. This element is not returned if there has
     * never been a failover instance. Only available if the accountType is
     * Standard_GRS or Standard_RAGRS.
     * 
     * @return the lastGeoFailoverTime value.
     */
    public OffsetDateTime getLastGeoFailoverTime() {
        return this.lastGeoFailoverTime;
    }

    /**
     * Get the secondaryLocation property: Gets the location of the
     * geo-replicated secondary for the storage account. Only available if the
     * accountType is Standard_GRS or Standard_RAGRS.
     * 
     * @return the secondaryLocation value.
     */
    public String getSecondaryLocation() {
        return this.secondaryLocation;
    }

    /**
     * Get the statusOfSecondary property: Gets the status indicating whether
     * the primary location of the storage account is available or unavailable.
     * 
     * @return the statusOfSecondary value.
     */
    public AccountStatus getStatusOfSecondary() {
        return this.statusOfSecondary;
    }

    /**
     * Get the creationTime property: Gets the creation date and time of the
     * storage account in UTC.
     * 
     * @return the creationTime value.
     */
    public OffsetDateTime getCreationTime() {
        return this.creationTime;
    }

    /**
     * Get the customDomain property: The custom domain assigned to this
     * storage account. This can be set via Update.
     * 
     * @return the customDomain value.
     */
    public CustomDomain getCustomDomain() {
        return this.customDomain;
    }

    /**
     * Get the secondaryEndpoints property: The URIs that are used to perform a
     * retrieval of a public blob, queue, table, web or dfs object.
     * 
     * @return the secondaryEndpoints value.
     */
    public Endpoints getSecondaryEndpoints() {
        return this.secondaryEndpoints;
    }

    /**
     * Get the encryption property: The encryption settings on the storage
     * account.
     * 
     * @return the encryption value.
     */
    public Encryption getEncryption() {
        return this.encryption;
    }

    /**
     * Get the accessTier property: Required for storage accounts where kind =
     * BlobStorage. The access tier used for billing.
     * 
     * @return the accessTier value.
     */
    public AccessTier getAccessTier() {
        return this.accessTier;
    }

    /**
     * Get the azureFilesIdentityBasedAuthentication property: Settings for
     * Azure Files identity based authentication.
     * 
     * @return the azureFilesIdentityBasedAuthentication value.
     */
    public AzureFilesIdentityBasedAuthentication getAzureFilesIdentityBasedAuthentication() {
        return this.azureFilesIdentityBasedAuthentication;
    }

    /**
     * Set the azureFilesIdentityBasedAuthentication property: Settings for
     * Azure Files identity based authentication.
     * 
     * @param azureFilesIdentityBasedAuthentication the
     * azureFilesIdentityBasedAuthentication value to set.
     * @return the StorageAccountInner object itself.
     */
    public StorageAccountInner setAzureFilesIdentityBasedAuthentication(AzureFilesIdentityBasedAuthentication azureFilesIdentityBasedAuthentication) {
        this.azureFilesIdentityBasedAuthentication = azureFilesIdentityBasedAuthentication;
        return this;
    }

    /**
     * Get the enableHttpsTrafficOnly property: Allows https traffic only to
     * storage service if sets to true.
     * 
     * @return the enableHttpsTrafficOnly value.
     */
    public Boolean isEnableHttpsTrafficOnly() {
        return this.enableHttpsTrafficOnly;
    }

    /**
     * Set the enableHttpsTrafficOnly property: Allows https traffic only to
     * storage service if sets to true.
     * 
     * @param enableHttpsTrafficOnly the enableHttpsTrafficOnly value to set.
     * @return the StorageAccountInner object itself.
     */
    public StorageAccountInner setEnableHttpsTrafficOnly(Boolean enableHttpsTrafficOnly) {
        this.enableHttpsTrafficOnly = enableHttpsTrafficOnly;
        return this;
    }

    /**
     * Get the networkRuleSet property: Network rule set.
     * 
     * @return the networkRuleSet value.
     */
    public NetworkRuleSet getNetworkRuleSet() {
        return this.networkRuleSet;
    }

    /**
     * Get the isHnsEnabled property: Account HierarchicalNamespace enabled if
     * sets to true.
     * 
     * @return the isHnsEnabled value.
     */
    public Boolean isHnsEnabled() {
        return this.isHnsEnabled;
    }

    /**
     * Set the isHnsEnabled property: Account HierarchicalNamespace enabled if
     * sets to true.
     * 
     * @param isHnsEnabled the isHnsEnabled value to set.
     * @return the StorageAccountInner object itself.
     */
    public StorageAccountInner setIsHnsEnabled(Boolean isHnsEnabled) {
        this.isHnsEnabled = isHnsEnabled;
        return this;
    }

    /**
     * Get the geoReplicationStats property: Statistics related to replication
     * for storage account's Blob, Table, Queue and File services. It is only
     * available when geo-redundant replication is enabled for the storage
     * account.
     * 
     * @return the geoReplicationStats value.
     */
    public GeoReplicationStats getGeoReplicationStats() {
        return this.geoReplicationStats;
    }

    /**
     * Get the failoverInProgress property: If the failover is in progress, the
     * value will be true, otherwise, it will be null.
     * 
     * @return the failoverInProgress value.
     */
    public Boolean isFailoverInProgress() {
        return this.failoverInProgress;
    }

    /**
     * Get the largeFileSharesState property: Allow large file shares if sets
     * to Enabled. It cannot be disabled once it is enabled.
     * 
     * @return the largeFileSharesState value.
     */
    public LargeFileSharesState getLargeFileSharesState() {
        return this.largeFileSharesState;
    }

    /**
     * Set the largeFileSharesState property: Allow large file shares if sets
     * to Enabled. It cannot be disabled once it is enabled.
     * 
     * @param largeFileSharesState the largeFileSharesState value to set.
     * @return the StorageAccountInner object itself.
     */
    public StorageAccountInner setLargeFileSharesState(LargeFileSharesState largeFileSharesState) {
        this.largeFileSharesState = largeFileSharesState;
        return this;
    }

    /**
     * Get the privateEndpointConnections property: List of private endpoint
     * connection associated with the specified storage account.
     * 
     * @return the privateEndpointConnections value.
     */
    public List<PrivateEndpointConnectionInner> getPrivateEndpointConnections() {
        return this.privateEndpointConnections;
    }

    /**
     * Get the routingPreference property: Routing preference defines the type
     * of network, either microsoft or internet routing to be used to deliver
     * the user data, the default option is microsoft routing.
     * 
     * @return the routingPreference value.
     */
    public RoutingPreference getRoutingPreference() {
        return this.routingPreference;
    }

    /**
     * Set the routingPreference property: Routing preference defines the type
     * of network, either microsoft or internet routing to be used to deliver
     * the user data, the default option is microsoft routing.
     * 
     * @param routingPreference the routingPreference value to set.
     * @return the StorageAccountInner object itself.
     */
    public StorageAccountInner setRoutingPreference(RoutingPreference routingPreference) {
        this.routingPreference = routingPreference;
        return this;
    }

    /**
     * Get the blobRestoreStatus property: Blob restore status.
     * 
     * @return the blobRestoreStatus value.
     */
    public BlobRestoreStatusInner getBlobRestoreStatus() {
        return this.blobRestoreStatus;
    }
}
