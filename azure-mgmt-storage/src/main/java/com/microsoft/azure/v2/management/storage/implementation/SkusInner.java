/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.v2.management.storage.implementation;

import com.microsoft.azure.v2.AzureProxy;
import com.microsoft.azure.v2.CloudException;
import com.microsoft.azure.v2.Page;
import com.microsoft.azure.v2.PagedList;
import com.microsoft.rest.v2.BodyResponse;
import com.microsoft.rest.v2.annotations.ExpectedResponses;
import com.microsoft.rest.v2.annotations.GET;
import com.microsoft.rest.v2.annotations.HeaderParam;
import com.microsoft.rest.v2.annotations.Host;
import com.microsoft.rest.v2.annotations.PathParam;
import com.microsoft.rest.v2.annotations.QueryParam;
import com.microsoft.rest.v2.annotations.UnexpectedResponseExceptionType;
import io.reactivex.Observable;
import io.reactivex.Single;

/**
 * An instance of this class provides access to all the operations defined in
 * Skus.
 */
public final class SkusInner {
    /**
     * The proxy service used to perform REST calls.
     */
    private SkusService service;

    /**
     * The service client containing this operation class.
     */
    private StorageManagementClientImpl client;

    /**
     * Initializes an instance of SkusInner.
     *
     * @param client the instance of the service client containing this operation class.
     */
    public SkusInner(StorageManagementClientImpl client) {
        this.service = AzureProxy.create(SkusService.class, client);
        this.client = client;
    }

    /**
     * The interface defining all the services for Skus to be used by the proxy
     * service to perform REST calls.
     */
    @Host("https://management.azure.com")
    private interface SkusService {
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Storage/skus")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(CloudException.class)
        Single<BodyResponse<PageImpl<SkuInner>>> list(@PathParam("subscriptionId") String subscriptionId, @QueryParam("api-version") String apiVersion, @HeaderParam("accept-language") String acceptLanguage);
    }

    /**
     * Lists the available SKUs supported by Microsoft.Storage for given subscription.
     *
     * @return the PagedList&lt;SkuInner&gt; object if successful.
     */
    public PagedList<SkuInner> list() {
        Page<SkuInner> page = listAsync().blockingSingle();
        return new PagedList<SkuInner>(page) {
            @Override
            public Page<SkuInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * Lists the available SKUs supported by Microsoft.Storage for given subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return the observable to the PagedList&lt;SkuInner&gt; object.
     */
    public Observable<Page<SkuInner>> listAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage())
            .map((BodyResponse<PageImpl<SkuInner>> res) -> (Page<SkuInner>) res.body())
            .toObservable();
    }
}
