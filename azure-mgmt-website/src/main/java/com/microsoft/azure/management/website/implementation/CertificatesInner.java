/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.website.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceCall;
import com.microsoft.azure.AzureServiceResponseBuilder;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Certificates.
 */
public final class CertificatesInner {
    /** The Retrofit service to perform REST calls. */
    private CertificatesService service;
    /** The service client containing this operation class. */
    private WebSiteManagementClientImpl client;

    /**
     * Initializes an instance of CertificatesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public CertificatesInner(Retrofit retrofit, WebSiteManagementClientImpl client) {
        this.service = retrofit.create(CertificatesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Certificates to be
     * used by Retrofit to perform actually REST calls.
     */
    interface CertificatesService {
        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.Web/certificates")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}")
        Observable<Response<ResponseBody>> get(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Body CertificateInner certificateEnvelope, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}")
        Observable<Response<ResponseBody>> update(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Body CertificateInner certificateEnvelope, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs")
        Observable<Response<ResponseBody>> listCsrs(@Path("resourceGroupName") String resourceGroupName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}")
        Observable<Response<ResponseBody>> getCsr(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}")
        Observable<Response<ResponseBody>> createOrUpdateCsr(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Body CsrInner csrEnvelope, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteCsr(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}")
        Observable<Response<ResponseBody>> updateCsr(@Path("resourceGroupName") String resourceGroupName, @Path("name") String name, @Path("subscriptionId") String subscriptionId, @Body CsrInner csrEnvelope, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("{nextLink}")
        Observable<Response<ResponseBody>> listNext(@Path(value = "nextLink", encoded = true) String nextPageLink, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("{nextLink}")
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Path(value = "nextLink", encoded = true) String nextPageLink, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get all certificates for a subscription.
     * Get all certificates for a subscription.
     *
     * @return the PagedList&lt;CertificateInner&gt; object if successful.
     */
    public PagedList<CertificateInner> list() {
        ServiceResponse<Page<CertificateInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<CertificateInner>(response.getBody()) {
            @Override
            public Page<CertificateInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Get all certificates for a subscription.
     * Get all certificates for a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<CertificateInner>> listAsync(final ListOperationCallback<CertificateInner> serviceCallback) {
        return AzureServiceCall.create(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<CertificateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CertificateInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all certificates for a subscription.
     * Get all certificates for a subscription.
     *
     * @return the observable to the PagedList&lt;CertificateInner&gt; object
     */
    public Observable<Page<CertificateInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<CertificateInner>>, Page<CertificateInner>>() {
                @Override
                public Page<CertificateInner> call(ServiceResponse<Page<CertificateInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Get all certificates for a subscription.
     * Get all certificates for a subscription.
     *
     * @return the observable to the PagedList&lt;CertificateInner&gt; object
     */
    public Observable<ServiceResponse<Page<CertificateInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<CertificateInner>>, Observable<ServiceResponse<Page<CertificateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CertificateInner>>> call(ServiceResponse<Page<CertificateInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all certificates for a subscription.
     * Get all certificates for a subscription.
     *
     * @return the PagedList&lt;CertificateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<CertificateInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2016-03-01";
        return service.list(this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<CertificateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CertificateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<CertificateInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<CertificateInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<CertificateInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<CertificateInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<CertificateInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get certificates for a subscription in the specified resource group.
     * Get certificates for a subscription in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group
     * @return the PagedList&lt;CertificateInner&gt; object if successful.
     */
    public PagedList<CertificateInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<CertificateInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<CertificateInner>(response.getBody()) {
            @Override
            public Page<CertificateInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Get certificates for a subscription in the specified resource group.
     * Get certificates for a subscription in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<CertificateInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<CertificateInner> serviceCallback) {
        return AzureServiceCall.create(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<CertificateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CertificateInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get certificates for a subscription in the specified resource group.
     * Get certificates for a subscription in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group
     * @return the observable to the PagedList&lt;CertificateInner&gt; object
     */
    public Observable<Page<CertificateInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<CertificateInner>>, Page<CertificateInner>>() {
                @Override
                public Page<CertificateInner> call(ServiceResponse<Page<CertificateInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Get certificates for a subscription in the specified resource group.
     * Get certificates for a subscription in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group
     * @return the observable to the PagedList&lt;CertificateInner&gt; object
     */
    public Observable<ServiceResponse<Page<CertificateInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<CertificateInner>>, Observable<ServiceResponse<Page<CertificateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CertificateInner>>> call(ServiceResponse<Page<CertificateInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get certificates for a subscription in the specified resource group.
     * Get certificates for a subscription in the specified resource group.
     *
    ServiceResponse<PageImpl<CertificateInner>> * @param resourceGroupName Name of the resource group
     * @return the PagedList&lt;CertificateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<CertificateInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2016-03-01";
        return service.listByResourceGroup(resourceGroupName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<CertificateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CertificateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<CertificateInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<CertificateInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<CertificateInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<CertificateInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<CertificateInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get a certificate by certificate name for a subscription in the specified resource group.
     * Get a certificate by certificate name for a subscription in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate.
     * @return the CertificateInner object if successful.
     */
    public CertificateInner get(String resourceGroupName, String name) {
        return getWithServiceResponseAsync(resourceGroupName, name).toBlocking().single().getBody();
    }

    /**
     * Get a certificate by certificate name for a subscription in the specified resource group.
     * Get a certificate by certificate name for a subscription in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<CertificateInner> getAsync(String resourceGroupName, String name, final ServiceCallback<CertificateInner> serviceCallback) {
        return ServiceCall.create(getWithServiceResponseAsync(resourceGroupName, name), serviceCallback);
    }

    /**
     * Get a certificate by certificate name for a subscription in the specified resource group.
     * Get a certificate by certificate name for a subscription in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate.
     * @return the observable to the CertificateInner object
     */
    public Observable<CertificateInner> getAsync(String resourceGroupName, String name) {
        return getWithServiceResponseAsync(resourceGroupName, name).map(new Func1<ServiceResponse<CertificateInner>, CertificateInner>() {
            @Override
            public CertificateInner call(ServiceResponse<CertificateInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Get a certificate by certificate name for a subscription in the specified resource group.
     * Get a certificate by certificate name for a subscription in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate.
     * @return the observable to the CertificateInner object
     */
    public Observable<ServiceResponse<CertificateInner>> getWithServiceResponseAsync(String resourceGroupName, String name) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2016-03-01";
        return service.get(resourceGroupName, name, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CertificateInner>>>() {
                @Override
                public Observable<ServiceResponse<CertificateInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CertificateInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CertificateInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<CertificateInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<CertificateInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates or modifies an existing certificate.
     * Creates or modifies an existing certificate.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate.
     * @param certificateEnvelope Details of certificate if it exists already.
     * @return the CertificateInner object if successful.
     */
    public CertificateInner createOrUpdate(String resourceGroupName, String name, CertificateInner certificateEnvelope) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, name, certificateEnvelope).toBlocking().single().getBody();
    }

    /**
     * Creates or modifies an existing certificate.
     * Creates or modifies an existing certificate.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate.
     * @param certificateEnvelope Details of certificate if it exists already.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<CertificateInner> createOrUpdateAsync(String resourceGroupName, String name, CertificateInner certificateEnvelope, final ServiceCallback<CertificateInner> serviceCallback) {
        return ServiceCall.create(createOrUpdateWithServiceResponseAsync(resourceGroupName, name, certificateEnvelope), serviceCallback);
    }

    /**
     * Creates or modifies an existing certificate.
     * Creates or modifies an existing certificate.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate.
     * @param certificateEnvelope Details of certificate if it exists already.
     * @return the observable to the CertificateInner object
     */
    public Observable<CertificateInner> createOrUpdateAsync(String resourceGroupName, String name, CertificateInner certificateEnvelope) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, name, certificateEnvelope).map(new Func1<ServiceResponse<CertificateInner>, CertificateInner>() {
            @Override
            public CertificateInner call(ServiceResponse<CertificateInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Creates or modifies an existing certificate.
     * Creates or modifies an existing certificate.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate.
     * @param certificateEnvelope Details of certificate if it exists already.
     * @return the observable to the CertificateInner object
     */
    public Observable<ServiceResponse<CertificateInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String name, CertificateInner certificateEnvelope) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (certificateEnvelope == null) {
            throw new IllegalArgumentException("Parameter certificateEnvelope is required and cannot be null.");
        }
        Validator.validate(certificateEnvelope);
        final String apiVersion = "2016-03-01";
        return service.createOrUpdate(resourceGroupName, name, this.client.subscriptionId(), certificateEnvelope, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CertificateInner>>>() {
                @Override
                public Observable<ServiceResponse<CertificateInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CertificateInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CertificateInner> createOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<CertificateInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<CertificateInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete a certificate by name in a specificed subscription and resourcegroup.
     * Delete a certificate by name in a specificed subscription and resourcegroup.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate to be deleted.
     * @return the Object object if successful.
     */
    public Object delete(String resourceGroupName, String name) {
        return deleteWithServiceResponseAsync(resourceGroupName, name).toBlocking().single().getBody();
    }

    /**
     * Delete a certificate by name in a specificed subscription and resourcegroup.
     * Delete a certificate by name in a specificed subscription and resourcegroup.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate to be deleted.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Object> deleteAsync(String resourceGroupName, String name, final ServiceCallback<Object> serviceCallback) {
        return ServiceCall.create(deleteWithServiceResponseAsync(resourceGroupName, name), serviceCallback);
    }

    /**
     * Delete a certificate by name in a specificed subscription and resourcegroup.
     * Delete a certificate by name in a specificed subscription and resourcegroup.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate to be deleted.
     * @return the observable to the Object object
     */
    public Observable<Object> deleteAsync(String resourceGroupName, String name) {
        return deleteWithServiceResponseAsync(resourceGroupName, name).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Delete a certificate by name in a specificed subscription and resourcegroup.
     * Delete a certificate by name in a specificed subscription and resourcegroup.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate to be deleted.
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> deleteWithServiceResponseAsync(String resourceGroupName, String name) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2016-03-01";
        return service.delete(resourceGroupName, name, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<Object, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates or modifies an existing certificate.
     * Creates or modifies an existing certificate.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate.
     * @param certificateEnvelope Details of certificate if it exists already.
     * @return the CertificateInner object if successful.
     */
    public CertificateInner update(String resourceGroupName, String name, CertificateInner certificateEnvelope) {
        return updateWithServiceResponseAsync(resourceGroupName, name, certificateEnvelope).toBlocking().single().getBody();
    }

    /**
     * Creates or modifies an existing certificate.
     * Creates or modifies an existing certificate.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate.
     * @param certificateEnvelope Details of certificate if it exists already.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<CertificateInner> updateAsync(String resourceGroupName, String name, CertificateInner certificateEnvelope, final ServiceCallback<CertificateInner> serviceCallback) {
        return ServiceCall.create(updateWithServiceResponseAsync(resourceGroupName, name, certificateEnvelope), serviceCallback);
    }

    /**
     * Creates or modifies an existing certificate.
     * Creates or modifies an existing certificate.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate.
     * @param certificateEnvelope Details of certificate if it exists already.
     * @return the observable to the CertificateInner object
     */
    public Observable<CertificateInner> updateAsync(String resourceGroupName, String name, CertificateInner certificateEnvelope) {
        return updateWithServiceResponseAsync(resourceGroupName, name, certificateEnvelope).map(new Func1<ServiceResponse<CertificateInner>, CertificateInner>() {
            @Override
            public CertificateInner call(ServiceResponse<CertificateInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Creates or modifies an existing certificate.
     * Creates or modifies an existing certificate.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate.
     * @param certificateEnvelope Details of certificate if it exists already.
     * @return the observable to the CertificateInner object
     */
    public Observable<ServiceResponse<CertificateInner>> updateWithServiceResponseAsync(String resourceGroupName, String name, CertificateInner certificateEnvelope) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (certificateEnvelope == null) {
            throw new IllegalArgumentException("Parameter certificateEnvelope is required and cannot be null.");
        }
        Validator.validate(certificateEnvelope);
        final String apiVersion = "2016-03-01";
        return service.update(resourceGroupName, name, this.client.subscriptionId(), certificateEnvelope, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CertificateInner>>>() {
                @Override
                public Observable<ServiceResponse<CertificateInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CertificateInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CertificateInner> updateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<CertificateInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<CertificateInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets the certificate signing requests for a subscription in the specified resource group.
     * Gets the certificate signing requests for a subscription in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group
     * @return the List&lt;CsrInner&gt; object if successful.
     */
    public List<CsrInner> listCsrs(String resourceGroupName) {
        return listCsrsWithServiceResponseAsync(resourceGroupName).toBlocking().single().getBody();
    }

    /**
     * Gets the certificate signing requests for a subscription in the specified resource group.
     * Gets the certificate signing requests for a subscription in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<CsrInner>> listCsrsAsync(String resourceGroupName, final ServiceCallback<List<CsrInner>> serviceCallback) {
        return ServiceCall.create(listCsrsWithServiceResponseAsync(resourceGroupName), serviceCallback);
    }

    /**
     * Gets the certificate signing requests for a subscription in the specified resource group.
     * Gets the certificate signing requests for a subscription in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group
     * @return the observable to the List&lt;CsrInner&gt; object
     */
    public Observable<List<CsrInner>> listCsrsAsync(String resourceGroupName) {
        return listCsrsWithServiceResponseAsync(resourceGroupName).map(new Func1<ServiceResponse<List<CsrInner>>, List<CsrInner>>() {
            @Override
            public List<CsrInner> call(ServiceResponse<List<CsrInner>> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Gets the certificate signing requests for a subscription in the specified resource group.
     * Gets the certificate signing requests for a subscription in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group
     * @return the observable to the List&lt;CsrInner&gt; object
     */
    public Observable<ServiceResponse<List<CsrInner>>> listCsrsWithServiceResponseAsync(String resourceGroupName) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2016-03-01";
        return service.listCsrs(resourceGroupName, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<CsrInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<CsrInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<CsrInner>> clientResponse = listCsrsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<CsrInner>> listCsrsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<List<CsrInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<List<CsrInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Gets a certificate signing request by certificate name for a subscription in the specified resource group.
     * Gets a certificate signing request by certificate name for a subscription in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate.
     * @return the CsrInner object if successful.
     */
    public CsrInner getCsr(String resourceGroupName, String name) {
        return getCsrWithServiceResponseAsync(resourceGroupName, name).toBlocking().single().getBody();
    }

    /**
     * Gets a certificate signing request by certificate name for a subscription in the specified resource group.
     * Gets a certificate signing request by certificate name for a subscription in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<CsrInner> getCsrAsync(String resourceGroupName, String name, final ServiceCallback<CsrInner> serviceCallback) {
        return ServiceCall.create(getCsrWithServiceResponseAsync(resourceGroupName, name), serviceCallback);
    }

    /**
     * Gets a certificate signing request by certificate name for a subscription in the specified resource group.
     * Gets a certificate signing request by certificate name for a subscription in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate.
     * @return the observable to the CsrInner object
     */
    public Observable<CsrInner> getCsrAsync(String resourceGroupName, String name) {
        return getCsrWithServiceResponseAsync(resourceGroupName, name).map(new Func1<ServiceResponse<CsrInner>, CsrInner>() {
            @Override
            public CsrInner call(ServiceResponse<CsrInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Gets a certificate signing request by certificate name for a subscription in the specified resource group.
     * Gets a certificate signing request by certificate name for a subscription in the specified resource group.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate.
     * @return the observable to the CsrInner object
     */
    public Observable<ServiceResponse<CsrInner>> getCsrWithServiceResponseAsync(String resourceGroupName, String name) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2016-03-01";
        return service.getCsr(resourceGroupName, name, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CsrInner>>>() {
                @Override
                public Observable<ServiceResponse<CsrInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CsrInner> clientResponse = getCsrDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CsrInner> getCsrDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<CsrInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<CsrInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates or modifies an existing certificate signing request.
     * Creates or modifies an existing certificate signing request.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate.
     * @param csrEnvelope Details of certificate signing request if it exists already.
     * @return the CsrInner object if successful.
     */
    public CsrInner createOrUpdateCsr(String resourceGroupName, String name, CsrInner csrEnvelope) {
        return createOrUpdateCsrWithServiceResponseAsync(resourceGroupName, name, csrEnvelope).toBlocking().single().getBody();
    }

    /**
     * Creates or modifies an existing certificate signing request.
     * Creates or modifies an existing certificate signing request.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate.
     * @param csrEnvelope Details of certificate signing request if it exists already.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<CsrInner> createOrUpdateCsrAsync(String resourceGroupName, String name, CsrInner csrEnvelope, final ServiceCallback<CsrInner> serviceCallback) {
        return ServiceCall.create(createOrUpdateCsrWithServiceResponseAsync(resourceGroupName, name, csrEnvelope), serviceCallback);
    }

    /**
     * Creates or modifies an existing certificate signing request.
     * Creates or modifies an existing certificate signing request.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate.
     * @param csrEnvelope Details of certificate signing request if it exists already.
     * @return the observable to the CsrInner object
     */
    public Observable<CsrInner> createOrUpdateCsrAsync(String resourceGroupName, String name, CsrInner csrEnvelope) {
        return createOrUpdateCsrWithServiceResponseAsync(resourceGroupName, name, csrEnvelope).map(new Func1<ServiceResponse<CsrInner>, CsrInner>() {
            @Override
            public CsrInner call(ServiceResponse<CsrInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Creates or modifies an existing certificate signing request.
     * Creates or modifies an existing certificate signing request.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate.
     * @param csrEnvelope Details of certificate signing request if it exists already.
     * @return the observable to the CsrInner object
     */
    public Observable<ServiceResponse<CsrInner>> createOrUpdateCsrWithServiceResponseAsync(String resourceGroupName, String name, CsrInner csrEnvelope) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (csrEnvelope == null) {
            throw new IllegalArgumentException("Parameter csrEnvelope is required and cannot be null.");
        }
        Validator.validate(csrEnvelope);
        final String apiVersion = "2016-03-01";
        return service.createOrUpdateCsr(resourceGroupName, name, this.client.subscriptionId(), csrEnvelope, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CsrInner>>>() {
                @Override
                public Observable<ServiceResponse<CsrInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CsrInner> clientResponse = createOrUpdateCsrDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CsrInner> createOrUpdateCsrDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<CsrInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<CsrInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete the certificate signing request.
     * Delete the certificate signing request.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate signing request.
     * @return the Object object if successful.
     */
    public Object deleteCsr(String resourceGroupName, String name) {
        return deleteCsrWithServiceResponseAsync(resourceGroupName, name).toBlocking().single().getBody();
    }

    /**
     * Delete the certificate signing request.
     * Delete the certificate signing request.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate signing request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Object> deleteCsrAsync(String resourceGroupName, String name, final ServiceCallback<Object> serviceCallback) {
        return ServiceCall.create(deleteCsrWithServiceResponseAsync(resourceGroupName, name), serviceCallback);
    }

    /**
     * Delete the certificate signing request.
     * Delete the certificate signing request.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate signing request.
     * @return the observable to the Object object
     */
    public Observable<Object> deleteCsrAsync(String resourceGroupName, String name) {
        return deleteCsrWithServiceResponseAsync(resourceGroupName, name).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Delete the certificate signing request.
     * Delete the certificate signing request.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate signing request.
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> deleteCsrWithServiceResponseAsync(String resourceGroupName, String name) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        final String apiVersion = "2016-03-01";
        return service.deleteCsr(resourceGroupName, name, this.client.subscriptionId(), apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = deleteCsrDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> deleteCsrDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<Object, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Creates or modifies an existing certificate signing request.
     * Creates or modifies an existing certificate signing request.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate.
     * @param csrEnvelope Details of certificate signing request if it exists already.
     * @return the CsrInner object if successful.
     */
    public CsrInner updateCsr(String resourceGroupName, String name, CsrInner csrEnvelope) {
        return updateCsrWithServiceResponseAsync(resourceGroupName, name, csrEnvelope).toBlocking().single().getBody();
    }

    /**
     * Creates or modifies an existing certificate signing request.
     * Creates or modifies an existing certificate signing request.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate.
     * @param csrEnvelope Details of certificate signing request if it exists already.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<CsrInner> updateCsrAsync(String resourceGroupName, String name, CsrInner csrEnvelope, final ServiceCallback<CsrInner> serviceCallback) {
        return ServiceCall.create(updateCsrWithServiceResponseAsync(resourceGroupName, name, csrEnvelope), serviceCallback);
    }

    /**
     * Creates or modifies an existing certificate signing request.
     * Creates or modifies an existing certificate signing request.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate.
     * @param csrEnvelope Details of certificate signing request if it exists already.
     * @return the observable to the CsrInner object
     */
    public Observable<CsrInner> updateCsrAsync(String resourceGroupName, String name, CsrInner csrEnvelope) {
        return updateCsrWithServiceResponseAsync(resourceGroupName, name, csrEnvelope).map(new Func1<ServiceResponse<CsrInner>, CsrInner>() {
            @Override
            public CsrInner call(ServiceResponse<CsrInner> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Creates or modifies an existing certificate signing request.
     * Creates or modifies an existing certificate signing request.
     *
     * @param resourceGroupName Name of the resource group
     * @param name Name of the certificate.
     * @param csrEnvelope Details of certificate signing request if it exists already.
     * @return the observable to the CsrInner object
     */
    public Observable<ServiceResponse<CsrInner>> updateCsrWithServiceResponseAsync(String resourceGroupName, String name, CsrInner csrEnvelope) {
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (csrEnvelope == null) {
            throw new IllegalArgumentException("Parameter csrEnvelope is required and cannot be null.");
        }
        Validator.validate(csrEnvelope);
        final String apiVersion = "2016-03-01";
        return service.updateCsr(resourceGroupName, name, this.client.subscriptionId(), csrEnvelope, apiVersion, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CsrInner>>>() {
                @Override
                public Observable<ServiceResponse<CsrInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CsrInner> clientResponse = updateCsrDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CsrInner> updateCsrDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<CsrInner, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<CsrInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get all certificates for a subscription.
     * Get all certificates for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;CertificateInner&gt; object if successful.
     */
    public PagedList<CertificateInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<CertificateInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<CertificateInner>(response.getBody()) {
            @Override
            public Page<CertificateInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Get all certificates for a subscription.
     * Get all certificates for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<CertificateInner>> listNextAsync(final String nextPageLink, final ServiceCall<List<CertificateInner>> serviceCall, final ListOperationCallback<CertificateInner> serviceCallback) {
        return AzureServiceCall.create(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<CertificateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CertificateInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get all certificates for a subscription.
     * Get all certificates for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;CertificateInner&gt; object
     */
    public Observable<Page<CertificateInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<CertificateInner>>, Page<CertificateInner>>() {
                @Override
                public Page<CertificateInner> call(ServiceResponse<Page<CertificateInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Get all certificates for a subscription.
     * Get all certificates for a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;CertificateInner&gt; object
     */
    public Observable<ServiceResponse<Page<CertificateInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<CertificateInner>>, Observable<ServiceResponse<Page<CertificateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CertificateInner>>> call(ServiceResponse<Page<CertificateInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get all certificates for a subscription.
     * Get all certificates for a subscription.
     *
    ServiceResponse<PageImpl<CertificateInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;CertificateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<CertificateInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        return service.listNext(nextPageLink, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<CertificateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CertificateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<CertificateInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<CertificateInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<CertificateInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<CertificateInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<CertificateInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get certificates for a subscription in the specified resource group.
     * Get certificates for a subscription in the specified resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;CertificateInner&gt; object if successful.
     */
    public PagedList<CertificateInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<CertificateInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<CertificateInner>(response.getBody()) {
            @Override
            public Page<CertificateInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().getBody();
            }
        };
    }

    /**
     * Get certificates for a subscription in the specified resource group.
     * Get certificates for a subscription in the specified resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceCall the ServiceCall object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<List<CertificateInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceCall<List<CertificateInner>> serviceCall, final ListOperationCallback<CertificateInner> serviceCallback) {
        return AzureServiceCall.create(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<CertificateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CertificateInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * Get certificates for a subscription in the specified resource group.
     * Get certificates for a subscription in the specified resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;CertificateInner&gt; object
     */
    public Observable<Page<CertificateInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<CertificateInner>>, Page<CertificateInner>>() {
                @Override
                public Page<CertificateInner> call(ServiceResponse<Page<CertificateInner>> response) {
                    return response.getBody();
                }
            });
    }

    /**
     * Get certificates for a subscription in the specified resource group.
     * Get certificates for a subscription in the specified resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the observable to the PagedList&lt;CertificateInner&gt; object
     */
    public Observable<ServiceResponse<Page<CertificateInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<CertificateInner>>, Observable<ServiceResponse<Page<CertificateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CertificateInner>>> call(ServiceResponse<Page<CertificateInner>> page) {
                    String nextPageLink = page.getBody().getNextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * Get certificates for a subscription in the specified resource group.
     * Get certificates for a subscription in the specified resource group.
     *
    ServiceResponse<PageImpl<CertificateInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @return the PagedList&lt;CertificateInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<CertificateInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        return service.listByResourceGroupNext(nextPageLink, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<CertificateInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<CertificateInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<CertificateInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<CertificateInner>>(result.getBody(), result.getResponse()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<CertificateInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return new AzureServiceResponseBuilder<PageImpl<CertificateInner>, CloudException>(this.client.mapperAdapter())
                .register(200, new TypeToken<PageImpl<CertificateInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
