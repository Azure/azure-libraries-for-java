/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import com.microsoft.azure.Page;
import com.microsoft.azure.credentials.ApplicationTokenCredentials;
import com.microsoft.azure.credentials.AzureEnvironment;
import com.microsoft.azure.management.compute.ComputeManagementClient;
import com.microsoft.azure.management.compute.ComputeManagementClientImpl;
import com.microsoft.azure.management.compute.models.HardwareProfile;
import com.microsoft.azure.management.compute.models.ImageReference;
import com.microsoft.azure.management.compute.models.NetworkInterfaceReference;
import com.microsoft.azure.management.compute.models.NetworkProfile;
import com.microsoft.azure.management.compute.models.OSDisk;
import com.microsoft.azure.management.compute.models.OSProfile;
import com.microsoft.azure.management.compute.models.StorageProfile;
import com.microsoft.azure.management.compute.models.VirtualHardDisk;
import com.microsoft.azure.management.compute.models.VirtualMachine;
import com.microsoft.azure.management.compute.models.VirtualMachineImageResource;
import com.microsoft.azure.management.network.NetworkManagementClient;
import com.microsoft.azure.management.network.NetworkManagementClientImpl;
import com.microsoft.azure.management.network.models.AddressSpace;
import com.microsoft.azure.management.network.models.DhcpOptions;
import com.microsoft.azure.management.network.models.NetworkInterface;
import com.microsoft.azure.management.network.models.NetworkInterfaceIPConfiguration;
import com.microsoft.azure.management.network.models.PublicIPAddress;
import com.microsoft.azure.management.network.models.PublicIPAddressDnsSettings;
import com.microsoft.azure.management.network.models.Subnet;
import com.microsoft.azure.management.network.models.VirtualNetwork;
import com.microsoft.azure.management.resources.ResourceManagementClient;
import com.microsoft.azure.management.resources.ResourceManagementClientImpl;
import com.microsoft.azure.management.resources.SubscriptionClient;
import com.microsoft.azure.management.resources.SubscriptionClientImpl;
import com.microsoft.azure.management.resources.models.ResourceGroup;
import com.microsoft.azure.management.resources.models.Subscription;
import com.microsoft.azure.management.storage.StorageManagementClient;
import com.microsoft.azure.management.storage.StorageManagementClientImpl;
import com.microsoft.azure.management.storage.models.AccountType;
import com.microsoft.azure.management.storage.models.StorageAccount;
import com.microsoft.azure.management.storage.models.StorageAccountCreateParameters;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class VMCreateGuide {
    private static Scanner in = new Scanner(System.in);

    public static void main(String argv[]) throws Exception {
        // Login credentials
        String clientId             = "client-guid";
        String domain               = "tenant-guid";
        String secret               = "secret";

        // Sample configs
        String location             = "westus";
        String resourceGroupName    = "resourcegroupname";
        String vmName               = getVMNameFromPrompt();
        String storageAccountName   = "nosymbols";
        String vnetName             = "sample_vnet";
        String subnetName           = "sample_subnet";
        String publicIPName         = "sample_pip";
        String networkInterfaceName = "sample_nic";
        String ipConfigName         = "sample_crpip";
        String domainNameLabel      = "nouppercase";
        String osDiskName           = "sample_osdisk";

        // Ubuntu config
        String publisher            = "Canonical";
        String offer                = "UbuntuServer";
        String sku                  = "14.04.3-LTS";

        // Windows config
//        String publisher          = "MicrosoftWindowsServer";
//        String offer              = "WindowsServer";
//        String sku                = "2012-R2-Datacenter";

        String adminUsername        = "notadmin";
        String adminPassword        = "Pa$$w0rd";

        // Clients
        ResourceManagementClient resourceManagementClient;
        StorageManagementClient storageManagementClient;
        NetworkManagementClient networkManagementClient;
        ComputeManagementClient computeManagementClient;

        // Credential
        ApplicationTokenCredentials credentials = new ApplicationTokenCredentials(
                clientId, domain, secret, AzureEnvironment.AZURE
        );

        // Subscriptions
        SubscriptionClient client = new SubscriptionClientImpl(credentials);
        Page<Subscription> subscriptions = client.getSubscriptions().list().getBody();
        String subscription = selectSubscription(subscriptions);

        // Client creation
        resourceManagementClient = new ResourceManagementClientImpl(credentials);
        resourceManagementClient.setSubscriptionId(subscription);
        storageManagementClient = new StorageManagementClientImpl(credentials);
        storageManagementClient.setSubscriptionId(subscription);
        networkManagementClient = new NetworkManagementClientImpl(credentials);
        networkManagementClient.setSubscriptionId(subscription);
        computeManagementClient = new ComputeManagementClientImpl(credentials);
        computeManagementClient.setSubscriptionId(subscription);

        // Create resource group
        ResourceGroup resourceGroupParameters = new ResourceGroup();
        resourceGroupParameters.setLocation(location);
        System.out.println("Creating resource group...");
        resourceManagementClient.getResourceGroups().createOrUpdate(resourceGroupName, resourceGroupParameters);
        while (!resourceManagementClient.getResourceGroups().checkExistence(resourceGroupName).getBody()) {
            Thread.sleep(5000);
        }

        // Create Storage account
        boolean found = false;
        List<StorageAccount> accounts = storageManagementClient.getStorageAccounts().listByResourceGroup(resourceGroupName).getBody().getValue();
        for (StorageAccount account : accounts) {
            if (account.getName().equals(storageAccountName)) {
                found = true;
                break;
            }
        }
        if (!found) {
            StorageAccountCreateParameters storageParameters = new StorageAccountCreateParameters();
            storageParameters.setLocation(location);
            storageParameters.setAccountType(AccountType.STANDARD_GRS);
            System.out.println("Creating storage account...");
            storageManagementClient.getStorageAccounts().create(resourceGroupName, storageAccountName, storageParameters);
        }

        // Create VNET
        VirtualNetwork vnet = new VirtualNetwork();
        vnet.setLocation(location);
        vnet.setAddressSpace(new AddressSpace());
        vnet.getAddressSpace().setAddressPrefixes(new ArrayList<String>());
        vnet.getAddressSpace().getAddressPrefixes().add("10.0.0.0/16");
        vnet.setDhcpOptions(new DhcpOptions());
        vnet.getDhcpOptions().setDnsServers(new ArrayList<String>());
        vnet.getDhcpOptions().getDnsServers().add("10.1.1.1");
        vnet.getDhcpOptions().getDnsServers().add("10.1.2.4");
        vnet.setSubnets(new ArrayList<Subnet>());
        Subnet subnet = new Subnet();
        subnet.setName(subnetName);
        subnet.setAddressPrefix("10.0.0.0/24");
        vnet.getSubnets().add(subnet);
        System.out.println("Creating vnet...");
        networkManagementClient.getVirtualNetworks().createOrUpdate(resourceGroupName, vnetName, vnet);
        subnet = networkManagementClient.getSubnets().get(resourceGroupName, vnetName, subnetName, null).getBody();

        // Create public IP
        PublicIPAddress publicIPAddress = new PublicIPAddress();
        publicIPAddress.setLocation(location);
        publicIPAddress.setPublicIPAllocationMethod("Dynamic");
        publicIPAddress.setDnsSettings(new PublicIPAddressDnsSettings());
        publicIPAddress.getDnsSettings().setDomainNameLabel(domainNameLabel);

        System.out.println("Creating public IP...");
        networkManagementClient.getPublicIPAddresses().createOrUpdate(resourceGroupName, publicIPName, publicIPAddress);
        publicIPAddress = networkManagementClient.getPublicIPAddresses().get(resourceGroupName, publicIPName, null).getBody();

        // Create Network interface
        NetworkInterface nic = new NetworkInterface();
        nic.setLocation(location);
        nic.setIpConfigurations(new ArrayList<NetworkInterfaceIPConfiguration>());
        NetworkInterfaceIPConfiguration configuration = new NetworkInterfaceIPConfiguration();
        configuration.setName(ipConfigName);
        configuration.setPrivateIPAllocationMethod("Dynamic");
        configuration.setSubnet(subnet);
        configuration.setPublicIPAddress(publicIPAddress);
        nic.getIpConfigurations().add(configuration);
        System.out.println("Creating network interface...");
        networkManagementClient.getNetworkInterfaces().createOrUpdate(resourceGroupName, networkInterfaceName, nic);
        nic = networkManagementClient.getNetworkInterfaces().get(resourceGroupName, networkInterfaceName, null).getBody();

        // Get VM Image
        VirtualMachineImageResource virtualMachineImageResource = new VirtualMachineImageResource();
        String name = computeManagementClient.getVirtualMachineImages().list(location, publisher, offer, sku, null, 1, null).getBody().get(0).getName();
        ImageReference imageReference = new ImageReference();
        imageReference.setOffer(offer);
        imageReference.setPublisher(publisher);
        imageReference.setSku(sku);
        imageReference.setVersion(name);

        // Create VM
        VirtualMachine request = new VirtualMachine();
        request.setLocation(location);
        request.setOsProfile(new OSProfile());
        request.getOsProfile().setComputerName(vmName);
        request.getOsProfile().setAdminUsername(adminUsername);
        request.getOsProfile().setAdminPassword(adminPassword);
        request.setHardwareProfile(new HardwareProfile());
        request.getHardwareProfile().setVmSize("Basic_A0");
        request.setStorageProfile(new StorageProfile());
        request.getStorageProfile().setImageReference(imageReference);
        request.getStorageProfile().setDataDisks(null);
        request.getStorageProfile().setOsDisk(new OSDisk());
        request.getStorageProfile().getOsDisk().setCaching("None");
        request.getStorageProfile().getOsDisk().setCreateOption("fromImage");
        request.getStorageProfile().getOsDisk().setName(osDiskName);
        request.getStorageProfile().getOsDisk().setVhd(new VirtualHardDisk());
        request.getStorageProfile().getOsDisk().getVhd().setUri("https://" + storageAccountName + ".blob.core.windows.net/javacontainer/osjavawindows.vhd");
        request.setNetworkProfile(new NetworkProfile());
        request.getNetworkProfile().setNetworkInterfaces(new ArrayList<NetworkInterfaceReference>());
        NetworkInterfaceReference nir = new NetworkInterfaceReference();
        nir.setPrimary(true);
        nir.setId(nic.getId());
        request.getNetworkProfile().getNetworkInterfaces().add(nir);
        System.out.println("Creating VM...");
        VirtualMachine vm = computeManagementClient.getVirtualMachines().createOrUpdate(resourceGroupName, vmName, request).getBody();
        nic = networkManagementClient.getNetworkInterfaces().get(resourceGroupName, networkInterfaceName, null).getBody();

        // Print results
        System.out.println("__   ____  __    ___              _          _");
        System.out.println("\\ \\ / /  \\/  |  / __|_ _ ___ __ _| |_ ___ __| |");
        System.out.println(" \\ V /| |\\/| | | (__| '_/ -_) _` |  _/ -_) _` |");
        System.out.println("  \\_/ |_|  |_|  \\___|_| \\___\\__,_|\\__\\___\\__,_|");
        System.out.println(String.format("Name:          %s", vm.getName()));
        System.out.println(String.format("IP:            %s", nic.getIpConfigurations().get(0).getPublicIPAddress().getIpAddress()));
        System.out.println(String.format("System:        %s - %s - %s", publisher, offer, sku));
    }

    private static String selectSubscription(Page<Subscription> subscriptions) {
        System.out.println("Here are your subscriptions:");
        int i = 0;
        for (; i != subscriptions.getItems().size(); i ++) {
            Subscription subscription = subscriptions.getItems().get(i);
            System.out.println(String.format("%d) %s (%s)", i + 1, subscription.getDisplayName(), subscription.getSubscriptionId()));
        }
        System.out.print("Select the number before the subscription name: ");
        return subscriptions.getItems().get(in.nextInt() - 1).getSubscriptionId();
    }

    private static String getVMNameFromPrompt() {
        System.out.print("The name of the VM to create: ");
        return in.next();
    }
}
